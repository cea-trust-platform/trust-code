#!/bin/bash
# AmgX		: See https://github.com/NVIDIA/AMGX#building
# AmgXwrapper	: See https://github.com/barbagroup/AmgXWrapper/blob/master/doc/install.md
AMGX_DIR=`dirname $1`
LIB=`basename $1`
ROOT=`pwd`
valgrind=$TRUST_ROOT/exec/valgrind/bin/valgrind

# Gestion du NVidia SDK (apparait de plus en plus sur les clusters. Et necessaire pour OpenMP)
# Il faut cmake 3.22 (sinon CUDA::cublas non detecte) et nvcc qui pointe sur une version du Cuda Toolkit !
# Pas:  /product/ubuntu20-x86_64/apps/NVHPC-nompi/22.1/Linux_x86_64/22.1/compilers/bin/nvcc
# Mais: /product/ubuntu20-x86_64/apps/NVHPC-nompi/22.1/Linux_x86_64/22.1/cuda/11.0/bin/nvcc
# On peut se baser sur Linux_x86_64 pour voir que c'est le Nvidia SDK et refuser le chemin /compilers/

# ToDo: reecrire cette partie avec math_libs !
# Il faut faire attention a pointer vers la bonne version de CUDA (vu sur JeanZay) avec NVHPC_CUDA_HOME
for CUDA_LIB_PATH in `echo $NVHPC_CUDA_HOME | sed "1,$ s?/cuda/?/math_libs/?g"` $CUDA_ROOT/math_libs $CUDA_ROOT/../math_libs $CUDA_ROOT/../../math_libs `echo $CUDA_ROOT | sed "1,$ s?/cuda/?/../math_libs/?g"`
do
   [ -d $CUDA_LIB_PATH ] && export CUDA_LIB_PATH && CUDA_NVCC_FLAGS="-DCUDA_NVCC_FLAGS=-I$CUDA_LIB_PATH/include;--compiler-options;-L$CUDA_LIB_PATH/lib64;-fPIC" && break
done
# Fin ToDo
log=$ROOT/perf_$LIB.log && rm -f $log
rm -r -f $LIB
#TRUST_AMGX_COMMIT=69e625e99b
if [ $LIB = AmgX ]
then
   # Build
   cd $ROOT
   if [ "$TRUST_AMGX_COMMIT" != "" ]
   then
      commit=$TRUST_AMGX_COMMIT
      git clone --recursive https://github.com/NVIDIA/AMGX.git $LIB
      cd $LIB && git checkout $commit && cd -
      PACKAGE=$TRUST_ROOT/externalpackages/AmgX/$LIB"_"$commit.tar.gz
      tar cfz $PACKAGE --exclude .git $LIB && echo "Creation du package $PACKAGE"
   else
      commit=4d1bda0016
      #commit=v2.4.0 # Soucis encore selon version Cuda...
      commit=69e625e99b # Meilleures performances sur A6000 et meilleur support sur JZ avec update cmake
      tar xfz $TRUST_ROOT/externalpackages/AmgX/AmgX_$commit.tar.gz
   fi
   cd $LIB && mkdir -p build && cd build

   # Compilers: See https://github.com/NVIDIA/AMGX
   # Don't use unset CPATH, i get cusparse_v2.h not found on JeanZay after cmake upgrade !
   [ "$TRUST_CC_BASE_EXTP" != "" ] && TRUST_CC_BASE=$TRUST_CC_BASE_EXTP
   [ "$TRUST_cc_BASE_EXTP" != "" ] && TRUST_cc_BASE=$TRUST_cc_BASE_EXTP #&& unset CPATH
   AMGX_COMPILERS="-DCMAKE_CXX_COMPILER=$TRUST_CC_BASE -DCMAKE_C_COMPILER=$TRUST_cc_BASE -DCMAKE_CXX_FLAGS=-std=c++14"
   AMGX_COMPILERS=$AMGX_COMPILERS" -DCMAKE_CXX_FLAGS=-fno-openmp" # Important de specifier car AmgX cherche OpenMP par defaut
   # Ajout de l'architecture:
   [ "$TRUST_CUDA_CC" = 86 ] && TRUST_CUDA_CC=80 # 86 pas supporte
   AMGX_COMPILERS=$AMGX_COMPILERS" -DCUDA_ARCH=$TRUST_CUDA_CC"
   
   # Hack du CMakeLists.txt (vu sur orcus avec Cuda 12) car manque de cublasLt
   sed -i "1,$ s?CUDA::cublas?CUDA::cublas CUDA::cublasLt?g" ../CMakeLists.txt || exit -1
   
   if [ "$HOST" = jean-zay ]
   then
      # ToDo: cublas not found on JeanZay so we simplify and it works now... Generalize to other builds ?
      cmake -DCMAKE_CUDA_COMPILER=$TRUST_NVCC -DAMGX_NO_RPATH=1 -DCMAKE_INSTALL_PREFIX=$AMGX_DIR/$LIB $AMGX_COMPILERS -DCMAKE_CUDA_FLAGS_RELEASE="-DNDEBUG" .. || exit -1
      make -j5 install || make install || exit -1 # Parallel build echoue sur JeanZay...! Donc on poursuit par un make simple
   else
      cmake -DCMAKE_CUDA_COMPILER=$TRUST_NVCC -DCUDAToolkit_ROOT=$CUDA_ROOT -DCMAKE_CUDA_FLAGS=-L$CUDA_ROOT/lib64 $CUDA_NVCC_FLAGS -DAMGX_NO_RPATH=1 -DCMAKE_INSTALL_PREFIX=$AMGX_DIR/$LIB $AMGX_COMPILERS -DCMAKE_CUDA_FLAGS_RELEASE="-DNDEBUG" .. || exit -1
      $TRUST_MAKE install || exit -1 # Important de faire en 1 fois car sur cluster make install recompile a nouveau apres make !!!
   fi
   cp -f ../examples/matrix.mtx $AMGX_DIR/$LIB/lib/examples
   # Install cuSPARSE 11.2 to fix multi-gpu bug for C-AMG if cuda>11.2
   # NB_GPUS=`nvidia-smi 2>/dev/null | grep -e Off -e On | wc -l`
   # [ $NB_GPUS != 1 ] && cusparse=$TRUST_ROOT/externalpackages/AmgX/libcusparse.so.11 && [ -f $cusparse.gz ] && gunzip -c $cusparse.gz > $AMGX_DIR/$LIB/lib/`basename $cusparse`
   # Clean:
   cd $ROOT && rm -r -f $LIB
fi
if [ $LIB = AmgXWrapper ]
then
   cd $ROOT
   if [ "$TRUST_AMGXWRAPPER_COMMIT" != "" ]
   then
      commit=$TRUST_AMGXWRAPPER_COMMIT
      git clone https://github.com/barbagroup/AmgXWrapper.git $LIB
      cd $LIB && git checkout $commit && cd -
      PACKAGE=$TRUST_ROOT/externalpackages/AmgX/$LIB"_"$commit.tar.gz
      tar cfz $PACKAGE --exclude .git $LIB && echo "Creation du package $PACKAGE"
   else
      commit=331eba32db693528749bd2c46158073079d80972
      tar xfz $TRUST_ROOT/externalpackages/AmgX/AmgXWrapper_$commit.tar.gz
   fi
   # Hack pour acceder directement au solver AmgX via AmgXWrapper:
   sed -i "1,$ s?private:?public:?g" AmgXWrapper/src/AmgXSolver.hpp || exit -1
   # Hack pour empecher le test des binaires qui ne marche pas cluster (un binaire PETSc compile avec CUDA plantera sur la frontale non gpu)
   sed -i "1,$ s?endif (\${\${runs}})??" AmgXWrapper/cmake-modules/FindPETSc.cmake
   sed -i "1,$ s?if (\${\${runs}})??"    AmgXWrapper/cmake-modules/FindPETSc.cmake
   # Hack pour int64:
   cp -R patch_AmgXWrapper/* AmgXWrapper
   cd $LIB && rm -r -f build && mkdir -p build && cd build
   BUILD=RELEASE
   #BUILD=DEBUG
   # On specifie CC et CXX:
   export CXX=$TRUST_CC
   export CC=$TRUST_cc
   if [ "$TRUST_CC_BASE_EXTP" != "" ]
   then
      export OMPI_CXX=$TRUST_CC_BASE_EXTP
      export OMPI_CC=$TRUST_cc_BASE_EXTP
      export MPICH_CXX=$OMPI_CXX
      export MPICH_CC=$OMPI_CC
      unset CPATH
   fi
   CMAKE_FLAGS=" -DCMAKE_CUDA_COMPILER=$TRUST_NVCC -DCUDA_DIR=$CUDA_ROOT -DAMGX_DIR=$AMGX_DIR/AmgX -DCMAKE_CUDA_HOST_COMPILER=$CC -DCMAKE_CUDA_FLAGS=-fPIC -DCMAKE_CXX_FLAGS=-fPIC"
   CMAKE_FLAGS=$CMAKE_FLAGS" -DCMAKE_CXX_FLAGS=-g -DCMAKE_CUDA_FLAGS=-g" # Pour debug
   # Configure and build:
   cmake $CMAKE_FLAGS -DCMAKE_INSTALL_LIBDIR=lib64 -DCMAKE_INSTALL_PREFIX=$AMGX_DIR/$LIB -DCMAKE_BUILD_TYPE=$BUILD -DBUILD_SHARED_LIBS=OFF .. && $TRUST_MAKE
   [ $? != 0 ] && exit -1
   make install # Erreur sur la doc on ne fait pas de exit
   # Creation d'une librairie statique en plus de la dynamique libAmgXWrapper.so
   # ar cru $AMGX_DIR/$LIB/lib64/libAmgXWrapper_static.a CMakeFiles/AmgXWrapper.dir/src/*.o || exit -1
   # Test
   cd $AMGX_DIR/$LIB 
   rm -r -f example && mkdir -p example && cd example
   tests="poisson solveFromFiles"
   for test in $tests
   do
      echo "Building $test test..."
      sed -i "1,$ s?# include <petsctime.h>??g" $ROOT/AmgXWrapper/example/$test/src/solve.cpp || exit -1
      mkdir -p $test && cd $test && cp $ROOT/AmgXWrapper/example/$test/README.md .
      cmake $CMAKE_FLAGS $ROOT/AmgXWrapper/example/$test || exit -1
      # On reprend les compilateurs de TRUST pour les tests (regle les pbs de link OMP)
      if [ "$TRUST_CC_BASE_EXTP" != "" ]
      then
         MPICH_CXX=$TRUST_CC_BASE OMPI_CXX=$TRUST_CC_BASE $TRUST_MAKE || exit -1
      else
         $TRUST_MAKE || exit -1
      fi
      cd ..
   done
   cd $ROOT && rm -r -f $LIB # On efface les sources ?
fi
if [ -f $TRUST_ENV/card.log ] && [ "$TRUST_WITHOUT_HOST" = 1 ] # On ne teste que si on peut lancer des calculs GPU
then
   # Ces tests doivent absolument marcher:
   echo "Testing $LIB..."
   ./test_$LIB.sh >> $log || exit -1
fi
exit 0

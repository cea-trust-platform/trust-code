#!/bin/bash
# OpenMPI install script
default_version=4.1.6
latest_version=5.0.5

version=$default_version
# Cas ou l'on force la version la plus recente:
[ "$TRUST_FORCE_LATEST_OPENMPI" = 1 ] && version=$latest_version

# Telechargement du package
package=openmpi-$version.tar.gz
if [ ! -f $package ]
then
   rep_version=`echo $version | $TRUST_Awk -F. '{print $1"."$2}'`
   wget_ https://download.open-mpi.org/release/open-mpi/v$rep_version/$package
   if [ $? != 0 ] 
   then 
      wget_ http://download.open-mpi.org/release/open-mpi/v$rep_version/$package
      [ $? != 0 ] && exit -1
   fi
fi

echo "Using $package on $HOST..."
install=`pwd`/openmpi
install=$MPI_ROOT
src=${package%.tar.gz}
if [ ! -d $install ] || [ $package -nt $install ] || [ ! -d $src ]
then
   gunzip -c $package | tar -xf -
fi
cd $src

if [ "`uname -s`" = Darwin ] # Darwin linkers dont support anymore -commons flag
   then
   echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
   echo "HACK FOR MAC"
   sed -i "s/OMPI_FORTRAN_WRAPPER_FLAGS=\"-Wl,-commons,use_dylibs\"/OMPI_FORTRAN_WRAPPER_FLAGS=\"\"/g" configure
   #sed -i "s/OMPI_FORTRAN_WRAPPER_FLAGS=\"-Wl,-commons,use_dylibs\"/OMPI_FORTRAN_WRAPPER_FLAGS=\"\"/g" config/ompi_setup_fc.m4
fi

###############################
# Lancement de la configuration
###############################
# Choix du compilateur:
if [ "$TRUST_CC_BASE_EXTP" != "" ]
then
   export CXX=$TRUST_CC_BASE_EXTP
   export CC=$TRUST_cc_BASE_EXTP
   export F77=$TRUST_F77_BASE_EXTP
else
   export CXX=$TRUST_CC_BASE
   export CC=$TRUST_cc_BASE
   export F77=$TRUST_F77_BASE
fi
export FC=$F77
export CXXFLAGS="-fPIC -fno-strict-aliasing"
export CFLAGS="-fPIC -fno-strict-aliasing"
export FFLAGS="-fPIC -fno-strict-aliasing"
export FCFLAGS="-fPIC -fno-strict-aliasing"
[ `uname -s` != "Darwin" ] && export LDFLAGS="-Wl,--no-as-needed"
[ `uname -s` != "Darwin" ] && export LIBS="-ldl"
# Configuration:
./configure --help 2>&1 > ../configure.help

# Ajout d'options pour des versions recentes d'OpenMPI:
# --with-memory-manager=none evite les adress not mapped avec TRUST en share libs: important donc
options="--with-memory-manager=none --with-hwloc=internal --disable-libompitrace"

# Valgrind:
[ -f $TRUST_ROOT/exec/valgrind ] && options=$options" --with-valgrind=$TRUST_ROOT/exec/valgrind"
[ $version = $latest_version ]   && options=$options" --enable-mpi1-compatibility" # HDF5 qui utilise des MPI deprecated...

# On disable diverses choses pour accelerer la compilation et reduire la taille de la libmpi.a 
# On retire --disable-shared pour que les cas tests utilisant mpi4py tournent.
options=$options" --enable-static --disable-mpi-cxx --enable-mca-no-build=maffinity-libnuma"
options=$options" --disable-wrapper-rpath --disable-wrapper-runpath --without-f08-bindings"

# Ajout CUDA:
if [ "$TRUST_USE_CUDA" = 1 ]
then
    options=$options" --disable-mca-dso --with-cuda=$CUDA_ROOT"
    # Il faut le chemin vers libcuda.so (sous stubs)
    STUBS=`find $CUDA_ROOT -name libcuda.so | sort -n | tail -1 | xargs dirname`
    echo "==============================="
    echo "Finding libcuda.so under $STUBS"
    echo "==============================="
    # Non le cas GPU_Aware_MPI plante sur 8 procs avec (cela vient $STUBS...)
    # options=$options" --with-cuda-libdir=$STUBS --with-libevent=internal"
    # ToDo: see https://docs.open-mpi.org/en/v5.0.x/tuning-apps/networking/cuda.html#cuda
    # Utiliser UCX 1.9.0 avec support Cuda
    # ToDo: 
    # Utiliser osu-micro-benchmarks-7.1.tar.gz pour voir apport UCX en mettant a jour mpi_bench.sh
fi

# A partir d'OpenMPI 1.7, mpif77 et mpif90 -> mpifort
[ "`grep f77 ../configure.help`" != "" ] && options=$options" --with-wrapper-ldflags=-lmpi_f77"

./configure --prefix=$install $options || exit -1

#############################
# Lancement de la compilation
#############################
$TRUST_MAKE || exit -1 

#######################
# Fin de l'installation
#######################
make install || exit -1
cd ..
rm -r -f $src configure.help

# Check MPI Cuda awareness:
[ "$TRUST_USE_CUDA" = 1 ] && [ "`$TRUST_ROOT/lib/src/LIBMPI/openmpi/bin/ompi_info --parsable --all | grep mpi_built_with_cuda_support:value:true`" = "" ] && echo "Error, MPI not built with Cuda support !" && exit -1

########################
# Post-install cleanup #
########################
if [ "`uname -s`" = Darwin ] && [ "$TRUST_FORCE_LATEST_OPENMPI" = 1 ]
then
   wrapdir="$MPI_ROOT/bin"
   datadir="$MPI_ROOT/share/openmpi"

   # 1. Flags Darwin obsolètes
   targets=(mpicc mpicxx mpif90 mpifort mpif77)
   for w in "${targets[@]}"; do
   sed -i '' -e 's|-Wl,-flat_namespace||g' \
               -e 's|-Wl,-commons,use_dylibs||g' \
               -e 's|-Wl,-rpath,[^ ]*gcc/current[^ ]*||g' "$wrapdir/$w"
   done

   # 2. Nettoyer les libs Fortran hors wrappers C/C++
   for w in mpicc mpicxx; do
   sed -i '' -e 's|-lmpi_usempif08[^ ]*||g' \
               -e 's|-lmpi_usempi_ignore_tkr[^ ]*||g' \
               -e 's|-lmpi_mpifh[^ ]*||g' "$wrapdir/$w"
   done

   # 3. Répéter la même chose dans les *-wrapper-data.txt
   for f in "$datadir"/*-wrapper-data.txt; do
   sed -i '' -e 's|-Wl,-flat_namespace||g' \
               -e 's|-Wl,-commons,use_dylibs||g' \
               -e 's|-Wl,-rpath,[^ ]*gcc/current[^ ]*||g' \
               -e 's|-lmpi_usempif08[^ ]*||g' \
               -e 's|-lmpi_usempi_ignore_tkr[^ ]*||g' "$f"
   done
fi

exit 0

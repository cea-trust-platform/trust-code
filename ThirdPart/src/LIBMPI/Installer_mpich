#!/bin/bash
# Install MPICH (standard, Infiniband tuned version removed in v1.9.1_beta)

#########
# MPICH #
#########
default_version=3.2
# latest_version=3.4.2 # Blocages MUMPS sur Fedora 34
# 3.4.2 : 4mn pour installer, 4.0.2 : 31mn pour installer. Donc uniquement Darwin pour cette derniere !
# PL NB1: Pour tous, changer de version de MPI n'est pas anodin: portabilite, temps de build, temps de run, valgrind error free, tout cela doit etre soupese pour remplacement MPICH 3.2
latest_version=3.4.2
[ `uname -s` = Darwin ] && latest_version=4.0.2

# Choix du compilateur:
if [ "$TRUST_CC_BASE_EXTP" != "" ]
then
   export CXX=$TRUST_CC_BASE_EXTP
   export CC=$TRUST_cc_BASE_EXTP
   export F77=$TRUST_F77_BASE_EXTP
else
   export CXX=$TRUST_CC_BASE
   export CC=$TRUST_cc_BASE
   export F77=$TRUST_F77_BASE
fi
export FC=$F77
# Si compilateur GNU calcul de la version (ToDo: remonter dans configure)
# ND : avec clang, on peut installer mpich maintenant, mais si gfortran > 11 il faut prendre latest_version. je verifie donc la version de F77 a la place de CXX
TRUST_VERSION_GNU_NUMERIC=0 && [ "${F77%gfortran}" != "$F77" ] && TRUST_VERSION_GNU_NUMERIC=`$F77 -v 2>&1 | awk '/gcc / && /version / {split($3,a,".");print a[1]*100+a[2]*10+a[3]*1}'`

# Cas ou l'on force la version la plus recente:
if [ "$TRUST_FORCE_LATEST_MPICH" = 1 ]
then
   version=$latest_version
else # ToDo remonter dans le configure ?
   version=$default_version
   # Ubuntu 22 et Fedora 34, GNU>=11.0.0
   if [ "$TRUST_VERSION_GNU_NUMERIC" -ge 1100 ]
   then
      echo "Error, use -force_latest_mpich cause $version MPICH not supported with GNU compilers >= 11" && exit -1
   fi
fi
package=mpich-$version.tar.gz
src=${package%.tar.gz}
http=http://www.mpich.org/static/downloads/$version
src=${package%.tar.gz}
if [ "$TRUST_FORCE_LATEST_MPICH" = 1 ]
then
     #option_configure="--disable-dependency-tracking --enable-shared --enable-g=meminit --enable-fast=all,O3 --enable-yield=sched_yield --with-device=ch4:ofi"
     # --with-device= obligatoire...
     option_configure="--disable-dependency-tracking --enable-shared --enable-g=meminit --enable-fast=all,O3 --enable-yield=sched_yield --with-device=ch3:nemesis"
else
  # --enable-g=meminit,dbg,mem pour debugger MPICH avec valgrind (ce n'est pas ce que l'on veut)
  # --enable-shared (pour utiliser le MPI wrapper de valgrind)
  # http://lists.mcs.anl.gov/pipermail/mpich-discuss/2011-June/010273.html
  # By default, --with-device=ch3:nemesis but slow if number of CPUs > number of cores: (example PAR_Cx 9)
  # But ch3:sock much slower (latence and bandwith!) than OpenMPI when CPUs<=number of cores (example PAR_Bilans_VEF 2)!
  # http://wiki.mpich.org/mpich/index.php/Frequently_Asked_Questions#Q:_Why_does_my_MPI_program_run_much_slower_when_I_use_more_processes.3F
  # OK problem solved with --enable-yield=sched_yield which fixes the performance problem: https://svn.mcs.anl.gov/repos/mpi/mpich2/trunk/CHANGES
  # --enable-g=dbg,meminit http://wiki.mpich.org/mpich/index.php/Support_for_Debugging_Memory_Allocation
  # --enable-shared is added cause static MPICH library cause a crash during Cathare-TRUST couplings
  # disable-fc  ne compile pas depuis 3.1.4 on ne peut pas desactiver le fortran pour petsc 
  # NOFC="--disable-fc"
  NOFC=""
  option_configure="--enable-shared --enable-g=meminit $NOFC --enable-fast=all,O3 --enable-yield=sched_yield"
  # Try to build MPICH with valgrind include: Nothing is changed to avoid warnings with MPICH&Valgrind in //
  #option_configure="--enable-g=meminit --disable-fc --enable-fast=all,O3 --enable-yield=sched_yield $CPPFLAGS"
  #INCLUDE_VALGRIND=$TRUST_ROOT/exec/valgrind/include/valgrind && [ -d $INCLUDE_VALGRIND ] && option_configure=$option_configure" CPPFLAGS=-I$INCLUDE_VALGRIND"
fi

# Verification que le package present est bien valide (probleme rencontre lors d'un download incorrect)
#[ "`file $package 2>&1 | grep gzip`" = "" ] && rm -f $package

# On telecharge le package s'il n'est pas la
[ ! -f $package ] && package=$TRUST_TMP/$package
if [ ! -f $package ]
then
   wget_ $http/`basename $package` -P $TRUST_TMP || exit -1
fi

install=`pwd`/mpich
install=$MPI_ROOT
if [ ! -d $install ] || [ $package -nt $install ] || [ ! -d $src ]
then
   gunzip -c $package | tar -xf -
fi
cd $src 

if [ "`uname -s`" = Darwin ] # Darwin linkers dont support anymore -commons flag
   then
   echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
   echo "HACK FOR MAC"
   sed -i "s/WRAPPER_LDFLAGS -Wl,-commons,use_dylibs/WRAPPER_LDFLAGS/g" configure
fi

###############################
# Lancement de la configuration
###############################
export CXXFLAGS="-fPIC"
export CFLAGS="-fPIC"
export FFLAGS="-fPIC"
#-export FFLAGS="-fPIC -std=legacy" # gfortran option -> passe dans le configure
# MPICH meme recent 3.3.1 ne compile pas encore avec gfortran 10 sans allow-argument-mismatch:
[ "$TRUST_VERSION_GNU_NUMERIC" -ge 1000 ] && FFLAGS=$FFLAGS" -fallow-argument-mismatch"
#idem sous Darwin
[ `uname -s` = 'Darwin' ] && FFLAGS=$FFLAGS" -fallow-argument-mismatch"
export FCFLAGS=$FFLAGS
# La variable MV est definie a sta sur certaines machines et pose probleme:
unset MV
./configure --help 2>&1 1>../configure.help
./configure --prefix=$install $option_configure || exit -1

#############################
# Lancement de la compilation
#############################
$TRUST_MAKE || exit -1 # Yes, parallel build supported since MPICH 1.5

#######################
# Fin de l'installation
#######################
make install || exit -1

cd ..
rm -r -f $src configure.help

exit 0

#!/bin/bash
# Script d'installation
install_OpenBlas()
{
   #########################
   # Installation d'OpenBLAS
   #########################
   package=OpenBLAS-$version_openblas.tar.gz

   # Installation
   rm -r -f *-OpenBLAS-*
   OPENBLAS_USE_OPENMP=$TRUST_USE_OPENMP
   # Disable OpenMP for PETSc (Probleme avec STRUMPACK sur GPU)
   OPENBLAS_USE_OPENMP=0 
   echo "Installation of $package (USE_THREAD=$OPENBLAS_USE_OPENMP USE_OPENMP=$OPENBLAS_USE_OPENMP)..."
   gunzip -f -c $package | tar -xf -
   cd OpenBLAS-$version_openblas
   if [ "$TRUST_CC_BASE_EXTP" != "" ]
   then
      CC=$TRUST_cc_BASE_EXTP
      FC=$TRUST_F77_BASE_EXTP
      unset CPATH # Vu sur JeanZay pour eviter des conflits d'include (pris dans nvhpc)
   else
      CC=$TRUST_cc
      FC=$TRUST_F77
   fi
   # On ne construit que les libs (tests plantent parfois):
   targets="libs netlib"
   # Instructions -mavx512 fait crasher valgrind sur les machines avec instructions avx512 ... On desactive (comme dans TRUST d'ailleurs)
   options="CC=$CC FC=$FC USE_THREAD=$OPENBLAS_USE_OPENMP USE_OPENMP=$OPENBLAS_USE_OPENMP NO_AVX512=1"
   # Sur CalculCSPG PROMES, il faut decommenter la ligne ci-apres pour ajouter TARGET=NEHALEM sinon openblas ne s'installe pas
   #options="CC=$CC FC=$FC USE_THREAD=$OPENBLAS_USE_OPENMP USE_OPENMP=$OPENBLAS_USE_OPENMP NO_AVX512=1 TARGET=NEHALEM"

   if [ `uname -s` = Darwin ]
   then
      $TRUST_MAKE $targets $options
   else
      # Warning, faire en 2 passes car parallel build peut echouer sinon (ex: Fedora38)
      for target in $targets
      do
         $TRUST_MAKE $target $options || return 1
      done
   fi
   lib=`ls libopenblas_*$version_openblas.a 2>/dev/null`
   BENCH=0
   if [ $BENCH = 1 ]
   then
      # Bench OpenBlas:
      # Bizarre pour bench, besoin de copier la libairie sous un nom legerement different:
      cp $lib `echo $lib | sed '1,$ s?-r?p-r?'` 2>/dev/null
      cd benchmark
      if [ "$TRUST_USE_OPENMP" = 1 ] && [ "$HOST" != adastra ] # Blocage du test sur adastra et surement sur d'autres machines...
      then
         CFLAGS=-fopenmp make dgemm.goto CC=$CC FC=$FC USE_THREAD=$OPENBLAS_USE_OPENMP USE_OPENMP=$OPENBLAS_USE_OPENMP NO_AVX512=1 || return 1
         OMP_NUM_THREADS= ./dgemm.goto 2>&1 | tee ../../dgemm_openblas_$version_openblas.log
      else
         make dgemm.goto CC=$CC FC=$FC NO_AVX512=1 || return 1
         ./dgemm.goto 2>&1 | tee ../../dgemm_openblas_$version_openblas.log
      fi
      cd - 1>/dev/null 2>&1
   fi
}
install_NetLib()
{
   ##########################
   # Install de LAPACK NetLib
   ##########################
   package=lapack-$version_lapack
   if [ ! -f $package.tgz ]
   then
      # On telecharge le package si non livre
      wget_ http://www.netlib.org/lapack/$package.tgz || exit -1
   fi
   echo "Installation of $package..."
   #gunzip -c $package.tgz > $package.tar
   gunzip -f -c $package.tgz | tar -xf -
   #rm -f $package.tar
   cd $package 

   option=`$TRUST_Awk '/F77Flags_32b/  {gsub("F77Flags_32b =" ,"",$0);o=$0} END {print o}' $TRUST_ROOT/env/make.$TRUST_ARCH_CC"_opt"`
   # On garde Blas/Lapack en int32:
   #[ "$TRUST_INT64" = "1" ] && option=`echo $option | sed "s/-fdefault-integer-8//g" | sed "s/-i8//g" `
   # Creation du make.inc
   echo "
   SHELL    = /bin/sh
   PLAT     = 
   FORTRAN  = $TRUST_F77
   OPTS     = $option
   DRVOPTS  = \$(OPTS)
   NOOPT    = -g -O0 -fPIC
   LOADER   = $TRUST_F77
   LOADOPTS =
   TIMER    = INT_CPU_TIME
   ARCH     = ar
   ARCHFLAGS= cr
   RANLIB   = ranlib
   BLASLIB  = ../../../libblas\$(PLAT).a
   XBLASLIB =
   LAPACKLIB= ../liblapack\$(PLAT).a
   TMGLIB   = tmglib\$(PLAT).a
   EIGSRCLIB= eigsrc\$(PLAT).a
   LINSRCLIB= linsrc\$(PLAT).a" > make.inc

   libs="blaslib lapacklib"
   $TRUST_MAKE $libs || exit -1
   cd ..
   # On efface les sources
   rm -r -f $package
   echo "Netlib Blas installed."
}
#########################
# Debut de la procedure #
#########################
if [ "$TRUST_BUILD_IN_TMP" = "1" ]
then
    name=LIBLAPACK
    build_dir=$TRUST_TMP/build/$name
    mkdir -p $build_dir
    cp -r * $build_dir
    cd $build_dir
fi

# recuperation des archives
for file in `ls $TRUST_ROOT/externalpackages/lapack/*`
do
   ln -sf $file .
done
# Nom des versions a upgrader: Attention on garde encore 0.3.21 ailleurs car plantage possible sur haswell (PC Elie) avec seg fault dans MUMPS lors appel dgemmt_ (ToDo: semble corrige dans 0.3.24)
# version_openblas=0.3.21 && [ $HOST = adastra ] && version_openblas=0.3.23 # Necessaire pour adastra (-O noomp inconnue plante lapack)
#version_openblas=0.3.25 # Prendre version plus ancienne si probleme
# On utilise Lapack 3.1.1 si le compilateur fortran n'est pas f90 (auquel cas TRUST_USE_MUMPS=0)
version_lapack=3.4.1 && [ "$TRUST_INT64" != "1" ] && [ "$TRUST_USE_MUMPS" != 1 ] && version_lapack=3.1.1

# [HPC][!Portabilite] Utilisation OpenBlas par defaut (valide sur TRUST/F5/TrioCFD/G3) -> Decomposition LU plus rapide
if [ "$TRUST_USE_OPENBLAS" = 1 ]
then
   for tag in 0.3.25 0.3.29
   do 
     version_openblas=$tag
     echo "version_openblas = $tag"
     install_OpenBlas
     lib=`ls libopenblas_*$version_openblas.a 2>/dev/null | head -1`
     # On copie la librairie si elle existe sinon on sort
     if [ "`ls $lib 2>/dev/null`" != "" ]
     then
        cp $lib ..
        cd ..
        # On fait des liens
        ln -sf $lib libblas.a
        ln -sf $lib liblapack.a
        echo "OpenBLAS installed."
        # On efface les sources
        rm -r -f OpenBLAS*
        break
     else
        cd ..
        echo "Contact trust@cea.fr if you have issues with OpenBlas build."
        #exit -1 # Comment if issue
        echo "Error during OpenBLAS install, so switching to Netlib non optimized blas..."
        install_NetLib
     fi
   done
else
   install_NetLib
fi
mkdir -p $TRUST_LIB/src/LIBLAPACK
mv *.a $TRUST_LIB/src/LIBLAPACK
# On efface les liens des archives
for file in `ls $TRUST_ROOT/externalpackages/lapack/*`
do
 f=`basename $file`
 [ -h $f ] && rm  $f 
done
if [ "$TRUST_BUILD_IN_TMP" = "1" ]
then
   rm -rf $build_dir
fi
exit 0

#!/bin/bash
[ "$TRUST_ROOT" = "" ] && echo TRUST_ROOT not_set && exit
# DIR=`dirname $0`

if [ ${#Rapports_auto_root} = 0 ]
    then
    Rapports_auto_root=$TRUST_ROOT
    export Rapports_auto_root
else
    echo "Use of $Rapports_auto_root directory for validation insteed of \$TRUST_ROOT"
fi

get_list_prm_from_Times()
{
  file=$1
  list=""
  for cas in `awk '{print $NF}' $file`
    do
    cadt=`find $Rapports_auto_root/Validation/Rapports_automatiques -name $cas -follow | grep -v '/src/' | head -n1`
    if [ ! -f $cadt/skip_prm ] && [ ! -f $cadt/src/skip_prm ]; then
      list=$list" "$cadt
    fi
  done
  
  # Complete with other PRM (to get new ones) at top of the list
  lst_full=`get_list_prm`
  extras=""
  for p in $lst_full
    do
		echo $list" " | grep -q "$p[ ]"
    if [ $? != 0 ]
      then extras=$extras" "$p
      fi
    done
  list=$extras" "$list
  echo $list
}


get_list_prm()
{
    uniq_names=" "
    # PRM 
    for f in `find $Rapports_auto_root/Validation/Rapports_automatiques -name '*.prm' -follow  | grep '/src/'`
      do
      cas=`dirname $f`
      if [ "`basename $cas`" != "src" ]
      then
        echo "$f is strange - a PRM not in a src folder!!!!"
        return
      else
        dirn_cas=`dirname $cas`
        if [ ! -f $dirn_cas/skip_prm ] && [ ! -f $dirn_cas/src/skip_prm ]; then
          name_only=`basename $dirn_cas`
          echo $uniq_names | grep -e " $name_only " 2>&1 1>/dev/null  # note the spaces around name_only in the grep
          if [ ! $? -eq 0 ]; then
            echo `dirname $cas`
            uniq_names=$uniq_names" $name_only "
          fi
        fi
      fi
    done

    # Jupyter notebooks
    for f in `find $Rapports_auto_root/Validation/Rapports_automatiques -type f \( -name '*.ipynb' ! -path '*.ipynb_checkpoints*' \) -follow`
      do
      cas=`dirname $f`
      if [ ! -d "$cas/src" ]
      then
        echo "$f is strange - missing src subfolder!!!!"
        return
      else
        if [ ! -f $cas/skip_prm ] && [ ! -f $cas/src/skip_prm ]; then
          name_only=`basename $cas`
          echo $uniq_names | grep -e " $name_only " 2>&1 1>/dev/null  # note the spaces around name_only in the grep
          if [ ! $? -eq 0 ]; then
            echo $cas
            uniq_names=$uniq_names" $name_only "
          fi
        fi
      fi
    done
}

get_list_validation_from_a_file()
{
  # Check the existence of the file containing the customized list of validation test cases
  [[ ! -f ${1} ]] && exit 1
  
  for t in $(cat ${1})
  do
    # The test is added unless the line is commented with a '#'
    if [[ $(echo ${t} | grep -Ev "^ *#") ]]
    then
      echo ${project_directory}/${t}
    fi
  done
}

genere_fiche()
{
    GENERE_COURBE=$TRUST_ROOT/Validation/Outils/Genere_courbe/

    ko=0
    run=1
    cd $org
    mkdir -p BUILD archives
    dir=$1
    is_jupyter=false
    prm=`ls $dir/src/*.prm 2>/dev/null`
    if [ ! $? -eq 0 ]; then
      prm=`ls $dir/*.ipynb`
      if [ ! $? -eq 0 ]; then
         echo ERROR: no PRM and no notebook file found!
         exit 1
      fi
      is_jupyter=true
    fi
    cas=`basename $dir`
    opt=""
    if [ $with_sjob -eq 1 ]
    then
      opt="-parallel_sjob"
    fi 
    if [ $concurent -eq 0 ] ||  [ ! -d BUILD/$cas/build ]
    then
      [ ! -d BUILD ] && echo `pwd` pas de build && exit 
      echo $cas non existant on lance la generation de la fiche $dir
      # GF le / apres dir est important pour ne pas copier le lien
      # le -L pour copier les liens en tant que fichier 
      cp -rL $dir/ BUILD
      chmod -R +w  BUILD/$cas
      cd BUILD/$cas
      curr_dir=`pwd`
      # if the file KO has been created in a previous test, delete it for the current test
      rm -f KO*
      touch Running$OPTIONS_PRM
      if ! $is_jupyter; then   # PRM format 
         echo "@@@ About to execute Run script (PRM) ..."
         ${GENERE_COURBE}/Run $prm $opt  $OPTIONS_PRM 1> run$OPTIONS_PRM.log 2>&1
         status=$?
         echo "@@@ Done executing Run script."
      else    # Jupyter format
         echo "@@@ About to execute and export Jupyter notebook to PDF ..."
         env JUPYTER_RUN_OPTIONS="$opt -dest $curr_dir" jupyter-nbconvert --ExecutePreprocessor.timeout=432000 --to pdf --no-input --output "$curr_dir/build/rapport.pdf" --execute $prm 1>run$OPTIONS_PRM.log 2>&1
         status=$?
         echo "@@@ Done processing Jupyter notebook with exit status $status."
      fi

      if [ ! -f build/rapport.pdf ] || [ "$status" != "0" ]
          then
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          echo "!!! Error with report $dir"
          echo "!!! Below is a cat of the logs found in `pwd`/run$OPTIONS_PRM.log"
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          cat run$OPTIONS_PRM.log
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          ko=1
      else
          cp build/rapport.pdf $org/archives/$cas.pdf

          if [ $pdf_only -eq  0 ]; then
            echo "@@@ About to execute Run -archive ..."
            ${GENERE_COURBE}/Run $prm $opt -archive 1>arc.log 2>&1
            status=$?
            echo "@@@ Done Run -archive"
            if [ $status -ne 0 ]; then
              echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
              echo "!!! Error with Run_archive $dir"
              echo "!!! Below is a cat of the logs found in `pwd`/arc.log"
              echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
              cat arc.log
              echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
              echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
              ko=2
            else
              mv preserve.tgz $org/archives/$cas.tgz
              rm -rf build
            fi
          fi
      fi
      if [ $ko -eq 0 ]; then
         mv     Running$OPTIONS_PRM ../deps_$(basename $dir)
      else
         mv     Running$OPTIONS_PRM KO$OPTIONS_PRM
      fi

      cd $org
    else
      echo BUILD/$dir existe and mode concurrent, on ne lance pas la fiche
    fi

    return $ko
}

###
### MAIN
###

org=`pwd`

# echo `basename $0`

if [ "`basename -- $0`" = "Lance_gen_fiche" ]
then
concurent=0
[ "$1" = "-concurent" ] && concurent=1 && shift
pdf_only=0
[ "$1" = "-pdf_only" ] && pdf_only=1 && shift
with_sjob=0
[ "$1" = "-parallel_sjob" ] && with_sjob=1 && shift

if [[ "${testListValidation}" == "" ]]
then
  # Standard case : all validation tests are launched
  liste_prm=`get_list_prm`
else
  # A customized list of validation tests has been given
  liste_prm=$(get_list_validation_from_a_file "${testListValidation}")
  if [[ $? -ne 0 ]]
  then
    echo -e "Error : a problem occured when reading the file"
    exit 1
  fi
fi

[ "$1" = "-from-Times" ] && shift && file=$1 && shift&& liste_prm=`get_list_prm_from_Times $file` 
force=0
[ "$*" != "" ] && echo On passe les cas precises && liste_prm="$@" && force=1 
echo $liste_prm
echo " cas en double ? "
for dir in $liste_prm
  do
  echo `basename $dir`
done  | uniq -d
[ "$liste_prm" = "" ] && echo pas de prm && exit 1
run=0
if [ $force -eq 1 ]
then
 # echo on lance les cas precises dans la ligne
  for dir in $liste_prm
  do 
    cas=`basename $dir`
    
    echo "@@ About to genere_fiche"
    genere_fiche $dir
    echo "@@ Done genere_fiche"
  
    [ $ko -ne 0 ] && echo pb au run ??? && exit -1
  done
  echo ok
  exit 0
fi

echo  on lance d abord les rapports non existants
for dir in $liste_prm
do
  cas=`basename $dir`

  if [ ! -f $org/archives/$cas.pdf ] || [ ! -f  $org/archives/$cas.tgz ]
      then
      genere_fiche $dir
  fi
done

echo  on lance ensuite les cas ou les rappports sont plus vieux que le src
for dir in $liste_prm
do
  cas=`basename $dir`
  if [  -f $org/archives/$cas.pdf ]
      then
      te=`find $dir/src -newer $org/archives/$cas.pdf -type f`
      if [ "$te" != "" ]
      then
      echo $cas.pdf plus vieux que $te , on lance la generation de la fiche $dir
      genere_fiche $dir
      fi
  fi
done

echo  on lance ensuite les cas ou les rappports sont plus vieux que $exec
for dir in $liste_prm
do
  cas=`basename $dir`
  if [  -f $org/archives/$cas.pdf ]
      then
      if [ $org/archives/$cas.pdf -ot $exec ]
      then 
      echo $cas.pdf plus vieux que $exec , on lance la generation de la fiche $dir
      genere_fiche $dir
      fi
  fi
done
exit 
fi

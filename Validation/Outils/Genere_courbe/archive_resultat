#!/bin/bash
#
# This script produces the .tgz file containing all the data produced by the computations required
# in a PRM. The idea is to be able to reproduce the final PDF file with the old computation results
# but the set of tools of the new version of TRUST.
# This relies on the file build/used_files generated along the way by genererCourbe.py
# which relies itself on src/fileList.py
#

echo "usage $0 {src/file.prm|file.ipynb} [archive_name]"

# cd to the real directory in case of link
cd `pwd -P`
prm=$1
log_file=archive.log

#
# Check valid input
# 
is_jupyter=false
if [[ "$prm" == *.ipynb ]]; then
  is_jupyter=true
  if [ ! -f $prm ] ; then
    echo "File $prm does not exist!"
    exit -1
  fi
else 
   if [[ ! "$prm" == *.prm ]]; then
      echo "Invalid parameter to archive_resultat: $prm"
      exit 
   fi
   if [ ! -f src/$prm ] ; then
      echo "File $prm does not exist!"
      exit -1
   fi
fi
base_prm=$(basename $prm)

DIR=`dirname $0`
DIR=`(cd $DIR; pwd)`

#
# Prepare preserve dir and check computation has run:
#
rm -rf preserve archive.log
mkdir preserve
if ! $is_jupyter; then
    $DIR/Run $prm -not_run  -o test.pdf 1>$log_file 2>&1
    [ ! -f build/test.pdf ] && echo "Unable to generate report. Exiting. Launch 'Run_fiche' before 'Run_fiche -archive'." && exit 1
    rm -rf build/test.pdf
else  # For Jupyter, make it simpler, by default just check the build directory is there
    echo "Jupyter archiving -- warning: it is **your** responsibility to have an up-to-date 'build' directory ..."
    if [ ! -d build ]; then 
       echo "'build' directory not found!!"
       exit -1
    fi
fi

##
## Main
##
echo "ARCHIVE: Copying necessary files ..."
cp build/version_utilisee build/temps_total build/used_files preserve
cp -r src/* preserve
cp build/$base_prm preserve   # In F5 for example, the PRM itself is generated from a Python script ...
cp -r build/.tmp preserve  # Mandatory for "make validation"
chmod -R +w preserve
cd build 
for f in `cat used_files`; do
   ls $f 1>/dev/null 2>&1
   if [ ! $? -eq 0 ]; then continue; fi
   for f2 in `ls $f`; do
       d=$(dirname $f2);
       mkdir -p ../preserve/$d
       cp $f2 ../preserve/$f2
   done
done

# If Jupyter, take notebook with us:
if $is_jupyter; then
   cp ../$base_prm ../preserve
fi

cd ..

# Compressing
archive=preserve
[ "$2" != "" ] && archive=$2
echo "ARCHIVE: Creating archive:" $archive
tar zcf $archive.tgz preserve
rm -rf preserve all.tar

#
# Last check from generated tgz
#
echo "ARCHIVE: Testing archive ..."
tar zxf $archive.tgz
if ! $is_jupyter; then
    cd preserve
    python $DIR/src/genererCourbes.py -p $base_prm --no_prereq -o ../old_rapport.pdf 1> ../$log_file 2>&1
    status=$?
    cd ..
else  # Jupyter notebook
    # Build directory has to be called "build"
    mv build build_init
    mv preserve build
    curr_dir=`pwd`
    env JUPYTER_RUN_OPTIONS="-not_run" jupyter-nbconvert --ExecutePreprocessor.timeout=432000 --to pdf --no-input --output "$curr_dir/old_rapport.pdf" --execute $base_prm 1>$log_file 2>&1
    status=$?
fi

[ $status -ne 0 ] && echo "*** FAILED generating archive!! Last logs of (failed) report build can be seen in $log_file" &&  mv $archive.tgz ${archive}_FAILED.tgz && exit 2
gzip -f old_rapport.pdf
rm -rf preserve build

echo "ARCHIVE: All done! Last logs of (successful) report build can be seen in $log_file"


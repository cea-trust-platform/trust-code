#!/bin/bash

if [ -f lien_fiche_validation ]
then
    jdd=`ls pdi_io*.data` 
else
    jdd=sauvegarde_reprise.data
fi 
jdd_short=${jdd%".data"}

# generate .zones files if parallle case
nProcs=_TO_FILL_
if [ "$TRUST_DISABLE_MPI" != 1 ] && [ "$nProcs" -gt 1 ]
then
    trust domaine.data 1>/dev/null 2>&1 || exit -1
fi

# generate backup datafile
cp $jdd backup.data
checkpoint_format=_TO_FILL_
sed -i "s/.*pdi canal.sauv/$checkpoint_format pdi canal.sauv/g" backup.data
sed -i "s/tinit.*/tinit 0.0/g" backup.data
sed -i "s/tmax.*/tmax 0.08/g" backup.data    
sed -i "/nb_pas_dt_max 3/d" backup.data    
if [ "$checkpoint_format" == "sauvegarde" ]
then
    sed -i "s/# nb_sauv_max 2 #/nb_sauv_max 2/g" backup.data
fi

# generate backup file
if [ "$TRUST_DISABLE_MPI" == 1 ] && [ "$nProcs" -gt 1 ]
then
    echo "Not running parallel cases"
else
    trust backup $nProcs 1>/dev/null 2>&1 || exit -1
    mv backup_Channel_Flow_Rate_repr_pb_periox "$jdd_short"_Channel_Flow_Rate_repr_pb_periox
fi

# set init time and other variables for restart computation
t0=_T0_
sed -i "s/tinit.*/tinit $t0/g" $jdd
# if tinit is smaller than the last time statistics were updated,
# then we don't resume statistics
backward_tinit=`echo $t0 0.08 | awk '{if ($1 < $2) print 1; else print 0}'` 
if [ "$backward_tinit" -eq 1 ]
then
    sed -i "s/# BEGIN STATS #/# BEGIN STATS /g" $jdd
    sed -i "s/# END STATS #/ END STATS #/g" $jdd
fi

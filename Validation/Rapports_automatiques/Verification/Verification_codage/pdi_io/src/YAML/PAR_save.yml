pdi:
  metadata: # small values for which PDI keeps a copy
    # >
    # > Metadata regarding parallelism
    # MPI communicator for my group
    nodeComm : int
    # number of processors inside my group
    nodeSize : int
    # my rank inside my group
    nodeRk : int

    # unknowns dimensions
    dim_vitesse : { type: array, subtype: int, size: 2 }
    glob_dim_vitesse : int
    dim_pression : { type: array, subtype: int, size: 2 }
    glob_dim_pression : int

    # scheme information
    temps : double        # current physical time 
    iter : int            # Number of checkpoints performed until now (WARNING: does not correspond to the current iteration in my time loop)

    # information on format
    version : int
    simple_sauvegarde : int
    # >
  data: #data we want to save/recover (fields of unknown)
    vitesse : { type: array, subtype: double, size: [ '$dim_vitesse[0]', '$dim_vitesse[1]' ]  }
    pression : { type: array, subtype: double, size: [ '$dim_pression[0]', '$dim_pression[1]' ]  }
  plugins:
    trace:  
    mpi: 
    decl_hdf5:
    # >>> WRITING DATA
    # Every proc from a group collectively writes their data into their assigned file
    - file: PAR_canal.sauv
      communicator: $nodeComm
      on_event: simple_checkpoint 
      datasets:
        vitesse: { type: array, subtype: double, size: [ '$nodeSize', '$glob_dim_vitesse', '$dim_vitesse[1]' ] }
        pression: { type: array, subtype: double, size: [ '$nodeSize', '$glob_dim_pression', '$dim_pression[1]' ] }
      write:
        vitesse:
          dataset: vitesse
          dataset_selection: 
            size: [ 1, '$dim_vitesse[0]', '$dim_vitesse[1]']
            start: ['$nodeRk', 0, 0]
        pression:
          dataset: pression
          dataset_selection:
            size: [ 1, '$dim_pression[0]', '$dim_pression[1]']
            start: ['$nodeRk', 0, 0]
    - file: PAR_canal.sauv
      communicator: $nodeComm
      on_event: complete_checkpoint
      datasets:
        iter_0/vitesse: { type: array, subtype: double, size: [ '$nodeSize', '$glob_dim_vitesse', '$dim_vitesse[1]' ] }
        iter_0/pression: { type: array, subtype: double, size: [ '$nodeSize', '$glob_dim_pression', '$dim_pression[1]' ] }
        iter_1/vitesse: { type: array, subtype: double, size: [ '$nodeSize', '$glob_dim_vitesse', '$dim_vitesse[1]' ] }
        iter_1/pression: { type: array, subtype: double, size: [ '$nodeSize', '$glob_dim_pression', '$dim_pression[1]' ] }
        iter_2/vitesse: { type: array, subtype: double, size: [ '$nodeSize', '$glob_dim_vitesse', '$dim_vitesse[1]' ] }
        iter_2/pression: { type: array, subtype: double, size: [ '$nodeSize', '$glob_dim_pression', '$dim_pression[1]' ] }
        iter_3/vitesse: { type: array, subtype: double, size: [ '$nodeSize', '$glob_dim_vitesse', '$dim_vitesse[1]' ] }
        iter_3/pression: { type: array, subtype: double, size: [ '$nodeSize', '$glob_dim_pression', '$dim_pression[1]' ] }
      write:
        vitesse:
          dataset: 'iter_${iter}/vitesse'
          dataset_selection:
            size: [ 1, '$dim_vitesse[0]', '$dim_vitesse[1]']
            start: ['$nodeRk', 0, 0]
        pression:
          dataset: 'iter_${iter}/pression'
          dataset_selection:
            size: [ 1, '$dim_pression[0]', '$dim_pression[1]']
            start: ['$nodeRk', 0, 0]	    
    - file: PAR_canal.sauv
      communicator: $nodeComm
      write:
       version:
         dataset: format_sauvegarde/version
       simple_sauvegarde: 
         dataset: format_sauvegarde/simple_sauvegarde
    - file: PAR_canal.sauv
      communicator: $nodeComm
      on_event: time_scheme      
      datasets:
        time/t: { type: array, subtype: double, size: 4 }
      write:
        temps:
          dataset: time/t
          dataset_selection:
            size: [ 1 ]
            start: ['$iter']
        iter:  
          dataset: time/last_iteration
####################################
# Solveurs matrices non symetriques:
####################################

# Solveur Optimal
let i=$i+1;solver[$i]="Optimal        { seuil $seuil impr }"        						;sym[$i]=0                  	

# GMRES DIAG/ILU
let i=$i+1;solver[$i]="Petsc GMRES    { seuil $seuil precond DIAG { } restart 30 impr }"					;rank[$i]=4;
#let i=$i+1;solver[$i]="Petsc GMRES   { seuil $seuil precond ILU { level 1 } impr }"	
#let i=$i+1;solver[$i]="Petsc GMRES   { seuil $seuil precond PILUT { level 20 epsilon 0.01 } impr }"	
let i=$i+1;solver[$i]="Petsc GMRES    { seuil $seuil precond BLOCK_JACOBI_ILU { level 0 } impr }"				;rank[$i]=8;		

# BICGSTAB
let i=$i+1;solver[$i]="Petsc CLI      { -ksp_type bcgs -pc_type sor -ksp_atol $seuil }"	
let i=$i+1;solver[$i]="Petsc BICGSTAB { seuil $seuil precond DIAG { } impr }"							;rank[$i]=3;
#let i=$i+1;solver[$i]="Petsc BICGSTAB { seuil $seuil precond SSOR { omega 1 } impr }"	# EISENSTAT ne marche pas 3.0.0 mais OK avec 3.1.0
if [ "$TRUST_USE_OPENMP" = 0 ]
then
   # Si support GPU active pour Hypre, pas possible de switcher entre versions CPU et GPU: 
   let i=$i+1;solver[$i]="Petsc CLI      { -ksp_type bcgs -pc_type hypre -pc_hypre_type pilut -pc_hypre_pilut_factorrowsize 20 -pc_hypre_pilut_tol 0.01 -ksp_atol $seuil }"	;
   # SPAI+BICGSTAB ne marche pas en int64 (sur plusieurs machines), je desactive cela comme vu avec PL
   #let i=$i+1;solver[$i]="Petsc BICGSTAB { seuil $seuil precond SPAI { level 2 epsilon 0.2 } impr }"	
   # SPAI+GC ne marche pas en int64, bug dans Hypre mais SPAI plus supporte ce qui explique cela.
   #let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond SPAI { level 2 epsilon 0.2 } impr }"		;sym[$i]=1	
fi
let i=$i+1;solver[$i]="Petsc BICGSTAB { seuil $seuil precond BLOCK_JACOBI_ILU { level 0 } impr }"				;rank[$i]=0;
let i=$i+1;solver[$i]="Petsc BICGSTAB { seuil $seuil precond BLOCK_JACOBI_ICC { level 0 } impr }"		;sym[$i]=1 	
let i=$i+1;solver[$i]="Petsc BICGSTAB { seuil $seuil precond BLOCK_JACOBI_ICC { level 1 ordering rcm } impr }"	;sym[$i]=1 	;rank[$i]=1;
#let i=$i+1;solver[$i]="Petsc BICGSTAB { seuil $seuil precond ILU { level 0 } impr }"
#let i=$i+1;solver[$i]="Petsc BICGSTAB { seuil $seuil precond PILUT { level 1 } impr }"	# PILUT instead ILUT because CHANGES in the PETSc 3.6 Version: Removed -pc_hypre_type euclid due to bit-rot
#let i=$i+1;solver[$i]="Petsc BICGSTAB { seuil $seuil precond ILU { level 1 } impr }"	
#let i=$i+1;solver[$i]="Petsc BICGSTAB { seuil $seuil precond PILUT { level 20 epsilon 0.01 } impr }"	

# iBCGSTAB+BLOCK_JACOBI_ILU/ICC
let i=$i+1;solver[$i]="Petsc IBICGSTAB { seuil $seuil precond BLOCK_JACOBI_ILU { level 0 } impr }"				;rank[$i]=2;
let i=$i+1;solver[$i]="Petsc IBICGSTAB { seuil $seuil precond BLOCK_JACOBI_ICC { level 1 ordering rcm } impr }"	;sym[$i]=1	;rank[$i]=2;

# Reference TRUST GMRES+DIAG
let i=$i+1;solver[$i]="Gmres          { seuil $seuil diag controle_residu 1 impr }"				;sym[$i]=0	;rank[$i]=5;
# Reference TRUST BICGSTAB+DIAG
let i=$i+1;solver[$i]="Gen            { seuil $seuil solv_elem bicgstab precond ilu { type 0 filling 10 } impr }" ;sym[$i]=0	;rank[$i]=0;

################################
# Solveurs matrices symetriques:
################################
# References TRUST (GC+SSOR - Cholesky)
let i=$i+1;solver[$i]="      GCP      { seuil $seuil precond ssor { omega 1.65 } impr }"			;sym[$i]=1	;rank[$i]=1;
# Marche pas en VEF:
#let i=$i+1;solver[$i]="      GCP      { optimized seuil $seuil precond ssor { omega 1.65 } impr }"		;sym[$i]=1	

# Solveur Optimal
let i=$i+1;solver[$i]="      Optimal  { seuil $seuil impr }"        						;sym[$i]=1                  	

# Solveur Direct lapack
let i=$i+1;solver[$i]="      Cholesky { impr }"                                                                 ;sym[$i]=1      ;par[$i]=0;

# Cholesky Mumps (Fonctionne en non symetrique mais aucun interet pour TRUST)
let i=$i+1;solver[$i]="Petsc Cholesky { impr }"									;sym[$i]=1 	;rank[$i]=3;
let i=$i+1;solver[$i]="Petsc Cholesky_mumps_blr { impr }"							;sym[$i]=1 	;rank[$i]=3;
let i=$i+1;solver[$i]="Petsc Cholesky_mumps_blr { dropping_parameter 1.e-6 impr }"						;sym[$i]=1 	;rank[$i]=3;
let i=$i+1;solver[$i]="Petsc Cholesky { ordering metis impr }"							;sym[$i]=1 	;rank[$i]=4;
# Exemple de changement fin du comportement via cli:
let i=$i+1;solver[$i]="Petsc Cholesky { CLI { -mat_mumps_icntl_6 0 -mat_mumps_icntl_8 7 } }"			;sym[$i]=1 	;rank[$i]=4;
if [ -f /usr/bin/bison ]
then
let i=$i+1;solver[$i]="Petsc Cholesky { ordering scotch impr }"							;sym[$i]=1 	;rank[$i]=5;
let i=$i+1;solver[$i]="Petsc Cholesky { ordering pt-scotch impr }"				;par[$i]=1	;sym[$i]=1 	;rank[$i]=7;
fi
let i=$i+1;solver[$i]="Petsc Cholesky { ordering parmetis impr }"				;par[$i]=1	;sym[$i]=1 	;rank[$i]=6;
let i=$i+1;solver[$i]="Petsc Cholesky_out_of_core { impr }"							;sym[$i]=1 
# Si PETSc est construit avec SuperLu:
if [ "`grep -i superlu $TRUST_ENV/Cmake.libs`" != "" ]
then
   i=$i+1;solver[$i]="Petsc Cholesky_SuperLU { impr }"								;sym[$i]=1 
fi
# Strumpack:
if [ -f $PETSC_DIR/lib/libstrumpack.a ]
then
   let i=$i+1;solver[$i]="Petsc LU_Strumpack { impr }"                       
fi
# SuiteSparse:
if [ -f $PETSC_DIR/lib/libcholmod.a ]
then
   let i=$i+1;solver[$i]="Petsc Cholesky_Cholmod { impr }"                      ;par[$i]=0  ;sym[$i]=1 
   let i=$i+1;solver[$i]="Petsc Cholesky_Umfpack { impr }"						;par[$i]=0	;sym[$i]=1 
fi
let i=$i+1;solver[$i]="Petsc Cholesky_Lapack  { impr }"						;par[$i]=0	;sym[$i]=1 

# GC + SSOR / EISENSTAT / ASM 
let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond SSOR { omega 1.65 } impr }"			;sym[$i]=1	;rank[$i]=2;
let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond SSOR { omega 1.65 } impr aij }"			;sym[$i]=1	;rank[$i]=2;
#let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond EISENSTAT { omega 1.65 } impr }"			;sym[$i]=1	# OK avec 3.1.0 mais apporte rien

# GC / ASM ILU(0)
let i=$i+1;solver[$i]="Petsc CLI      { -ksp_type cg -pc_type asm -ksp_atol $seuil }"				;sym[$i]=1	

# GC / ASM SOR
# Impossible d'arriver a faire converger ASM mieux que BJACOBI, bizarre, niter augmente si pc_asm_overlap augmente
# Marche mieux avec ICC(1) voir le cas PAR_Cx 2 (reduit le nombre d'iterations mais bjacobi_icc(1) toujours le plus rapide)
let i=$i+1;solver[$i]="Petsc CLI      { -ksp_type cg -pc_type asm -sub_pc_type sor -sub_pc_sor_omega 1.65 -pc_asm_overlap 0 -ksp_atol $seuil }"	;sym[$i]=1 # Identique a SSOR

# CG + ILU HYPRE
#let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond ILU { level 1 } impr }"				;sym[$i]=1	# Hypre decevant, on prend ILU petsc meilleur
#let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond PILUT { level 20 epsilon 0.01 } impr }"		;sym[$i]=1	# PILUT instead ILUT because CHANGES in the PETSc 3.6 Version: Removed -pc_hypre_type euclid due to bit-rot

# CG + ILU BLR de MUMPS et STRUMPACK
let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond ILU_MUMPS     { epsilon 1.e-4 } impr }"		;sym[$i]=1	
if [ -f $PETSC_DIR/lib/libstrumpack.a ]
then
   let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond ILU_STRUMPACK { epsilon 1.e-4 } impr }"		;sym[$i]=1
fi
# CG + BLOCK JACOBI ILU PETSC
let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond BLOCK_JACOBI_ICC { level 1 } impr }"		;sym[$i]=1	;rank[$i]=8;		

# GMRES + BOOMERAMG
let i=$i+1;solver[$i]="Petsc GMRES      { seuil $seuil precond BOOMERAMG { } CLI { -pc_hypre_boomeramg_strong_threshold 0.9 } impr }"	;sym[$i]=1	

# PIPECG + SSOR
let i=$i+1;solver[$i]="Petsc PIPECG   { seuil $seuil precond SSOR { omega 1.65 } impr }"			;sym[$i]=1
let i=$i+1;solver[$i]="Petsc PIPECG2  { seuil $seuil precond SSOR { omega 1.65 } impr }"			;sym[$i]=1

# GC + AMG
let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond BOOMERAMG { } impr }"   		         ;sym[$i]=1
let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond C-AMG { } impr }" 				         ;sym[$i]=1
let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond SA-AMG { } impr }" 				     ;sym[$i]=1
let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond UA-AMG { } impr }" 				     ;sym[$i]=1

##########################
# Solveurs tested on GPU #
##########################
#let i=$i+1;solver[$i]="Petsc_GPU CLI  { -ksp_type cg -pc_type saviennacl -mat_type aijviennacl -vec_type viennacl -ksp_divtol 1e6 -ksp_atol $seuil }"	;gpu[$i]=1	;sym[$i]=1; par[$i]=0 # ToDo
# Faux:
#let i=$i+1;solver[$i]="Petsc_GPU CLI  { -ksp_type cg -pc_type rowscalingviennacl -mat_type aijviennacl -vec_type viennacl -ksp_divtol 1e6 -ksp_atol $seuil }"	;gpu[$i]=1	;sym[$i]=1; par[$i]=0 # ToDo

let i=$i+1;solver[$i]="Petsc_GPU CLI  { -ksp_type cg -pc_type jacobi -mat_type aijviennacl -vec_type viennacl -ksp_atol $seuil }"	;gpu[$i]=1	;sym[$i]=1;par[$i]=0 # ToDo
let i=$i+1;solver[$i]="Petsc_GPU CLI  { -ksp_type cg -pc_type chowiluviennacl -mat_type aijviennacl -vec_type viennacl -ksp_divtol 1e6 -ksp_atol $seuil }"	;gpu[$i]=1	;sym[$i]=1;par[$i]=0 # ToDo
let i=$i+1;solver[$i]="Petsc_GPU CLI  { -ksp_type cg -pc_type jacobi -mat_type aijcusparse                    -ksp_atol $seuil }"	;gpu[$i]=1	;sym[$i]=1 

let i=$i+1;solver[$i]="Petsc     GCP  { seuil $seuil precond SSOR { omega 1.6 } impr }"				;gpu[$i]=1	;sym[$i]=1
let i=$i+1;solver[$i]="Petsc     GCP  { seuil $seuil precond DIAG { } impr }"					;gpu[$i]=1	;sym[$i]=1
let i=$i+1;solver[$i]="Petsc_GPU GCP  { seuil $seuil precond BOOMERAMG { } impr }"	            ;gpu[$i]=1	;sym[$i]=1
let i=$i+1;solver[$i]="Petsc_GPU GCP  { seuil $seuil precond C-AMG { } impr }"					;gpu[$i]=1	;sym[$i]=1
let i=$i+1;solver[$i]="Petsc_GPU GCP  { seuil $seuil precond SA-AMG { } impr }"					;gpu[$i]=1	;sym[$i]=1
let i=$i+1;solver[$i]="Petsc_GPU GCP  { seuil $seuil precond DIAG { } impr }"					;gpu[$i]=1	;sym[$i]=1
let i=$i+1;solver[$i]="Petsc_GPU GCP  { seuil $seuil precond BLOCK_JACOBI_ILU { level 0 } impr }"		;gpu[$i]=1	;sym[$i]=1
#let i=$i+1;solver[$i]="Petsc_GPU CLI  { -ksp_type cg -pc_type bjacobi -sub_pc_type ilu -ksp_atol $seuil }"	;gpu[$i]=1	;sym[$i]=1 	;par[$i]=0 # Bug submitted to PETSc ?
#let i=$i+1;solver[$i]="Petsc_GPU CLI  { -ksp_type cg -pc_type asm -sub_pc_type ilu -ksp_atol $seuil }"		;gpu[$i]=1	;sym[$i]=1 	;par[$i]=0 # Bug submitted to PETSc ?
let i=$i+1;solver[$i]="Petsc_GPU BICGSTAB { seuil $seuil precond DIAG { } impr }"				;gpu[$i]=1	;sym[$i]=1
let i=$i+1;solver[$i]="Petsc     Cholesky         { impr }"							;gpu[$i]=1	
if [ "$TRUST_USE_OPENMP" = 1 ] && [ -f $PETSC_DIR/lib/libcholmod.a ]
then
   let i=$i+1;solver[$i]="Petsc_GPU Cholesky_cholmod { impr }"							;gpu[$i]=1	;sym[$i]=1	;par[$i]=0 # ToDo non parallele et limite a sbaij
fi
# Non desactive car bloque sur petra:
#[ "$TRUST_USE_OPENMP" = 1 ] && let i=$i+1 && solver[$i]="Petsc_GPU Cholesky_superlu { impr }"			;gpu[$i]=1			# Parallele et supporte aij (LU)	
let i=$i+1;solver[$i]="AMGX GCP { seuil $seuil precond C-AMG { } impr }" 					;gpu[$i]=1	;sym[$i]=1

###############################
# AMGX solveurs tested on GPU #
###############################
let i=$i+1;solver[$i]="AMGX  GCP      { seuil $seuil precond GS { } impr }" 				;amgx[$i]=1	;sym[$i]=1
#let i=$i+1;solver[$i]="AMGX  GCP      { seuil $seuil precond DIAG { } impr }" 				;amgx[$i]=1	;sym[$i]=1 
let i=$i+1;solver[$i]="AMGX  GCP      { seuil $seuil precond BLOCK_JACOBI_ILU { level 0 } impr }" 		;amgx[$i]=1	;sym[$i]=1 
let i=$i+1;solver[$i]="AMGX  GCP      { seuil $seuil precond BLOCK_JACOBI_ILU { level 1 } impr }" 		;amgx[$i]=1	;sym[$i]=1 
let i=$i+1;solver[$i]="AMGX  GCP      { seuil $seuil precond ILU  { level 0 } impr }" 			;amgx[$i]=1	;sym[$i]=1
let i=$i+1;solver[$i]="AMGX  GCP      { seuil $seuil precond ILU  { level 1 } impr }" 			;amgx[$i]=1	;sym[$i]=1 
let i=$i+1;solver[$i]="AMGX  CLI      { solver(s)=PCG s:preconditioner(p)=MULTICOLOR_GS s:tolerance=$seuil }";amgx[$i]=1	;sym[$i]=1 
let i=$i+1;solver[$i]="AMGX  GCP      { seuil $seuil precond C-AMG { } impr }" 				;amgx[$i]=1	;sym[$i]=1
let i=$i+1;solver[$i]="AMGX  GCP      { seuil $seuil precond SA-AMG { } impr }" 				;amgx[$i]=1	;sym[$i]=1
# Pour comparaison sur CPU:
let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond DIAG { } impr }"				;amgx[$i]=1	;sym[$i]=1
let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond SSOR { omega 1.6 } impr }"			;amgx[$i]=1	;sym[$i]=1
let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond C-AMG { } impr }" 				;amgx[$i]=1	;sym[$i]=1
let i=$i+1;solver[$i]="Petsc GCP      { seuil $seuil precond SA-AMG { } impr }" 				;amgx[$i]=1	;sym[$i]=1

############################################################################### 
# Solveurs Amgx sur matrices non symetriques (attention GMRES faux dans AmgX !)
###############################################################################
let i=$i+1;solver[$i]="AMGX  FGMRES   { seuil $seuil precond GS { } impr }" 				;amgx[$i]=1	;sym[$i]=0
#let i=$i+1;solver[$i]="AMGX  BICGSTAB { seuil $seuil precond GS { } impr }" 	 			;amgx[$i]=1	;sym[$i]=0	
let i=$i+1;solver[$i]="AMGX  BICGSTAB { seuil $seuil precond BLOCK_JACOBI_ILU { level 0 } impr }" 	;amgx[$i]=1	;sym[$i]=0	
let i=$i+1;solver[$i]="AMGX  GCP      { seuil $seuil precond GS { } impr }" 				;amgx[$i]=1	;sym[$i]=0
let i=$i+1;solver[$i]="AMGX  FGMRES   { seuil $seuil precond BLOCK_JACOBI_ILU { level 0 } impr }" 	;amgx[$i]=1	;sym[$i]=0
let i=$i+1;solver[$i]="AMGX  FGMRES   { seuil $seuil precond C-AMG { } impr }" 				;amgx[$i]=1	;sym[$i]=0
# Pour comparaison sur CPU:
let i=$i+1;solver[$i]="      GMRES    { seuil $seuil DIAG controle_residu 1 impr }" 		 	;amgx[$i]=1	;sym[$i]=0
let i=$i+1;solver[$i]="PETSC GMRES    { seuil $seuil precond DIAG { } impr }" 				;amgx[$i]=1	;sym[$i]=0	

#let i=$i+1;solver[$i]="Petsc_GPU CLI       { -ksp_type cg -pc_type saviennacl -mat_type aijviennacl -vec_type viennacl -ksp_divtol 1e6 -ksp_atol $seuil }"	   ;amgx[$i]=1	;sym[$i]=1; par[$i]=0 # ToDo
#let i=$i+1;solver[$i]="Petsc_GPU CLI       { -ksp_type cg -pc_type rowscalingviennacl -mat_type aijviennacl -vec_type viennacl -ksp_divtol 1e6 -ksp_atol $seuil }" ;amgx[$i]=1	;sym[$i]=1; par[$i]=0 # ToDo
#let i=$i+1;solver[$i]="Petsc_GPU CLI       { -ksp_type cg -pc_type chowiluviennacl -mat_type aijviennacl -vec_type viennacl -ksp_divtol 1e6 -ksp_atol $seuil }"	   ;amgx[$i]=1	;sym[$i]=1; par[$i]=0 # ToDo
#let i=$i+1;solver[$i]="Petsc_GPU GCP       { seuil $seuil precond C-AMG { } impr }" 				;amgx[$i]=1	;sym[$i]=1



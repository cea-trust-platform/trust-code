#!/bin/bash
# Script pour creer les fichiers d'instanciation dans un repertoire des sources de TRUST
# Appele a chaque make depend dans un repertoire
en_tete()
{
   echo "//
// Warning : DO NOT EDIT ! file generated automatically
// TRUST_NO_INDENT
//
#include <Objet_U.h>
#include <verifie_pere.h>
#include <arch.h>"
}
tmp=`mktemp_ -d`
org=`pwd`
export LC_ALL=C # Pour eviter d'avoir des fichiers instancie_src differents selon la variable LANG ou LC_ALL
# On ne cree pas de fichier instancie dans le MAIN et les ateliers
if [ "`basename $org`" != MAIN ] && [ ${org#$rep_dev} = $org ]
then
#######################
# Repertoire non MAIN #
# (main is handled in Createcmakefile.py #
#######################
   # No .h file, nothing to do, clean any previous instancie and exit:
   ls *.h 1>/dev/null 2>&1
   if [ ! $? -eq 0 ]; then
      rm -f instancie_*
      rm -rf $tmp
      exit 0
   fi

   name=instancie`echo ${org#$TRUST_ROOT} | sed "s?/?_?g" | sed "s/\.//g"`  
    
   # Liste les .h du repertoire
   files=`ls *.h | grep -v Declare_Inst | sort 2>/dev/null`
   
   # Rien a faire si pas de .h ou si pas de declare_instanciable dans les .h
   # On efface meme le fichier d'instanciation au cas ou il aurait existe
   [ ${#files} = 0 ] || [ "`grep eclare_instanciable $files`" = "" ] && rm -f $name.cpp && rm -r -f $tmp && exit
   
   # Ajout de toto.h pour avoir en sortie du grep file: match
   files=$files" toto.h"
   
   # On extrait les lignes declare_instanciable
   grep eclare_instanciable $files 2>/dev/null | grep -v class_name | grep -v "//" | grep -v " \* " | grep -v "\\\\" | grep -v ArrOf_Scala | grep -v Scalar_T | grep -v Diff_VDF_proto | grep -v structeur_32_64 | grep -v _instanciable_32_64 | grep -v _base_32_64 | sed "s?:? ?g" | sed "s?(? ?g" | sed "s?)? ?g" | sed "s?,? ?g" | $TRUST_Awk '{print $1" "$3}' > $tmp/declare_instanciable

   # Same thing for 32/64 bits templatized classes:
   grep 'eclare_instanciable[a_z_]*_32_64' $files 2>/dev/null | grep -v '#define' | grep -v class_name | grep -v "//" | grep -v " \* " | grep -v "\\\\" | grep -v _base_32_64 | sed "s?:? ?g" | sed "s?(? ?g" | sed "s?)? ?g" | sed "s?,? ?g" | $TRUST_Awk '{print $1" "$3}' > $tmp/declare_instanciable_32_64

   
   # On construit le fichier instancie.cpp provisoire
   en_tete > $tmp/$name.cpp
   $TRUST_Awk '{print ("#include <"$1">")}' $tmp/declare_instanciable | sort -u >> $tmp/$name.cpp
   if [ "`cat $tmp/declare_instanciable_32_64`" != "" ]; then
       $TRUST_Awk '{print ("#include <"$1">")}' $tmp/declare_instanciable_32_64 | sort -u >> $tmp/$name.cpp
   fi
   echo "void "$name"() {" >> $tmp/$name.cpp
   echo "Cerr << \"${name#instancie_}\" << finl;" >> $tmp/$name.cpp 
   echo "{" >> $tmp/$name.cpp
   $TRUST_Awk '{print ($2,"inst"FNR";  verifie_pere(inst"FNR");")}' $tmp/declare_instanciable >> $tmp/$name.cpp
   echo '}' >> $tmp/$name.cpp
   if [ "`cat $tmp/declare_instanciable_32_64`" != "" ]; then
       echo '{' >> $tmp/$name.cpp
       int_or_long="int"
       [ "$TRUST_INT64" = "1" ] && int_or_long="long"
       $TRUST_Awk '{print ($2"<'$int_or_long'>","inst"FNR";  verifie_pere(inst"FNR");")}' $tmp/declare_instanciable_32_64 >> $tmp/$name.cpp
       echo '}' >> $tmp/$name.cpp
       echo "#if INT_is_64_ == 2" >> $tmp/$name.cpp
       echo '{' >> $tmp/$name.cpp
       $TRUST_Awk '{print ($2"<trustIdType>","inst"FNR";  verifie_pere(inst"FNR");")}' $tmp/declare_instanciable_32_64 >> $tmp/$name.cpp
       echo '}' >> $tmp/$name.cpp
       echo '#endif' >> $tmp/$name.cpp
   fi
   echo "}" >> $tmp/$name.cpp

   # S'il est different, on le change
   if [ ! -f $name.cpp ] || [ "`diff $name.cpp $tmp/$name.cpp`" != "" ]
   then
      if [ ! -f $name.cpp ]
      then
         touch $name.cpp
      fi
      cat $tmp/$name.cpp > $name.cpp
      touch CMakeLists.txt
      # le touch est important pour recompiler mon_main !!!!!
      touch $TRUST_ROOT/src/MAIN/instancie_appel.h
   fi
elif [ "`basename $org`" = MAIN ] 
then
###################
# Repertoire MAIN #
###################
   en_tete > $tmp/instancie_appel.h
   en_tete > $tmp/instancie_appel_c.h
   for dir0 in `find $TRUST_ROOT/src -type d`
   do

      # Construit le nom de la fonction instancie: instancie_rep_rep_rep
      dir=${dir0/$TRUST_ROOT/}  # /tut/tata/TRUST/src/Kernel/Math becomes Kernel/Math
      name=instancie`echo $dir | sed "s?/?_?g" | sed "s/\.//"`  
      if [ -f $TRUST_ROOT/$dir/$name.cpp ]
      then
         # Ajout dans le fichier cree sous MAIN
         echo void $name"();" >> $tmp/instancie_appel.h
         echo $name"();" >> $tmp/instancie_appel_c.h
      fi
   done

   if [ ! -f instancie_appel.h ] || [ "`diff instancie_appel.h $tmp/instancie_appel.h`" != "" ]
   then
      echo "   File instancie_appel.h updated/created"
      #[ -f instancie_appel.h ] && diff instancie_appel.h $tmp/instancie_appel.h
      cat $tmp/instancie_appel.h > instancie_appel.h
   fi
   if [ ! -f instancie_appel_c.h ] || [ "`diff instancie_appel_c.h $tmp/instancie_appel_c.h`" != "" ]
   then
      echo "   File instancie_appel_c.h updated/created"
      #[ -f instancie_appel_c.h ] && diff instancie_appel_c.h $tmp/instancie_appel_c.h
      cat $tmp/instancie_appel_c.h > instancie_appel_c.h
   fi
fi
rm -r -f $tmp


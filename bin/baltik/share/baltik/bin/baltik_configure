#!/bin/bash
# --
# Author : Eli LAUCOIN (CEA)
# --

baltik_environnement_error() {
    echo "-----------------------------------------"
    echo "ERROR : undefined variable BALTIK_ROOT   "
    echo ""
    echo "Please, install BALTIK and run :         "
    echo "  source /path/to/BALTIK/bin/baltik_init "
    echo "-----------------------------------------"
    echo ""
    exit 1
}

baltik_environnement_init()
{
	script=$0
	bindir=`dirname $script`
	cd `dirname $bindir`
	pwd
}

# initialisation de l'etat de la variable BALTIK_ROOT
BALTIK_ROOT=`baltik_environnement_init`
# verification de l'etat de la variable BALTIK_ROOT
if [ "${BALTIK_ROOT}" = "" ]
then
    baltik_environnement_error
fi

# chargement des fonctions d'affichage des messages d'erreur
. ${BALTIK_ROOT}/bin/baltik_errors

# chargement des fonctions d'analyse d'un fichier de configuration
. ${BALTIK_ROOT}/bin/baltik_configuration_parsing

# chargement des fonctions de gestion des dependances
. ${BALTIK_ROOT}/bin/baltik_dependencies_management

# chargement des fonctions de correspondance nom variable OPT
. ${BALTIK_ROOT}/bin/baltik_OPT_management


# verification/chargement de TRUST
. ${BALTIK_ROOT}/bin/baltik_check_init_TRUST


# verification de l'etat de la variable TRUST_ROOT
if [ "${TRUST_ROOT}" = "" ]
then
    TRUST_environnement_error
fi

# Verification que tout est correct si TRUST est en 64 bit indices
if [ "$TRUST_INT64" != "1" ] && [ -f $TRUST_ROOT/.build64 ]
then
    TRUST_64bits_environnement_error
elif [ "$TRUST_INT64" = "1" ] && [ ! -f $TRUST_ROOT/.build64 ] && [ "$TRUST_INT64_NEW" != "1" ]
then
    TRUST_64bits_environnement_error
fi

echo "Initialisation ..."

# verification de la presence d'un fichier de configuration
project_directory=`pwd`
project_configuration_file="${project_directory}/project.cfg"
if  [ ! -e $project_configuration_file ] || [ ! -f $project_configuration_file ] 
then
    no_configuration_file_error "$project_directory=$"
fi

# extraction de la section de description du fichier de configuration
project_description=`extract_section "$project_configuration_file" description`

# verification des mots cles mis dans la description, si un pas autorise : exit
all_fields=`extract_section_fields "$project_description"`
for f in $all_fields
do
  case $f in
      name|author|executable|kernel|cpp_flags|ld_flags) continue ;;
      *) project_cfg_error $f "[description]" "name|author|executable|kernel|cpp_flags|ld_flags"
  esac
done

# extraction du nom du projet
project_name=`extract_field "$project_description" name`

# verification du nom du projet
if [ "${project_name}" = "" ]
then
    undefined_project_name_error "$project_configuration_file"
fi

echo "Done."
echo ""

preconfigure=$project_directory/share/bin/pre_configure
if [ -f $preconfigure ]
then
    echo "Executing $preconfigure"
    $preconfigure
    [ $? -ne 0 ] && echo "Error" && exit -1
    echo "Done"
    echo ""
fi

echo "Checking dependencies ..."

# creation d'un fichier temporaire qui contiendra les dependances
#mktemp: pas portable
#dependencies_file=`mktemp $project_directory/dependencies.XXXXXXXXXXXXXXXX`
dependencies_file=$project_directory/dependencies.tmp
rm -f $dependencies_file;touch $dependencies_file
trap "exit 1" HUP INT PIPE QUIT TERM
trap "rm -f $dependencies_file" EXIT

# initialisation des dependances
dependencies="${project_name}:${project_directory}:${project_directory};"

# ajout recursif des dependances
add_dependencies "$dependencies_file" "$dependencies"

# verification de la coherence des chemins
check_dependencies "$dependencies_file"

echo "Done."
echo ""




echo "Preparing sources ..."

# initialisation du repertoire de construction
project_build_directory="${project_directory}/build/src"
rm -r -f $project_build_directory   
mkdir -p $project_build_directory
rep_dev=$project_build_directory python $TRUST_ROOT/bin/KSH/Createcmakefile.py -atelier
mkdir -p $project_build_directory/exec $project_build_directory/exec_opt
touch $project_build_directory/exec/info_atelier.cpp
touch $project_build_directory/exec_opt/info_atelier.cpp

# Names and path of sub projects
sub_projects_names=""
sub_projects_paths=""

# ajout des fichiers sources des differentes dependances
while read name path
do
  echo "Adding source files from project $name"
  sourcedir="$path/src"

  # Verification que le baltik est n'est pas en 64 bit integers alors que TRUST est en 32 bit integers
  if [ "$TRUST_INT64" != "1" ] && [ -f $sourcedir/.build64 ]
  then
      BaltikIs64bits_TRUSTis32bits_environnement_error
  fi
  # Si ces deux conditions sont satisfaites, nous modifierons int par long
  if [ "$TRUST_INT64" = "1" ] && [ -f $TRUST_ROOT/.build64 ]
  then
      echo "Editing source files from project $name for 64 bit indices"
      echo ""
      cp $TRUST_ROOT/bin/BUILD64/GO_baltik $TRUST_ROOT/bin/BUILD64/Modifie $TRUST_ROOT/bin/BUILD64/replace_int_entier.py .
      ./GO_baltik $sourcedir
      touch $sourcedir/.build64
  fi

  sub_projects_names=$sub_projects_names" "$name
  sub_projects_paths=$sub_projects_paths" "$path

  for suf in h cpp f c hxx cxx tpp
    do
    test_uniq=`find  $sourcedir -follow -name "*."${suf} -exec basename {} \; | sort | uniq -d`
    if [ "${test_uniq}" != "" ]
	then
	conflicting_files_error ${test_uniq}  `find  $sourcedir -follow -name ${test_uniq}`
	fi
    for sourcefile in `find  $sourcedir -follow -name "*."${suf}`
      do
	# filename=${sourcefile##*/}
        filename=`basename ${sourcefile}`
	linkfile="${project_build_directory}/${filename}"
	if [ -e ${linkfile} ]
	    then
	    if [ ! ${linkfile} -ef ${sourcefile} ]
		then
		file_link=`ls -l ${project_build_directory}/${filename} | $TRUST_Awk '{print $NF}'`
	      # on regarde si le source file  est dans un repertoire merged
		dirsource=`dirname ${sourcefile}`
		dirsource=`basename $dirsource`
		
		dirlink=`dirname ${file_link}`
		dirlink=`basename $dirlink`

		[ "$dirsource" = "patch" ] && [ "$dirlink" = "patch" ]&& conflicting_files_error ${filename} ${file_link} ${sourcefile}
		
		
		# Pour anciennes viersions
		if [ "$dirsource" = "merged" ] ||  [ "$dirsource" = "patch" ]
		    then
		    # echo "linkfile" ${linkfile} ${file_link}
		    # echo "source " ${sourcefile}
		    echo "patch file  ?"
                    # on ne verifie plus si plus recent
		    echo "ok we replace ${file_link} with ${sourcefile}"
		    rm -f ${linkfile}
		    ln -sf ${sourcefile} ${linkfile}
		#    if [ ${sourcefile} -nt ${file_link} ]
		#	then
		#	echo "ok we replace ${file_link} with ${sourcefile}"
		#	rm -f ${linkfile}
		#	ln -sf ${sourcefile} ${linkfile}
		#    else
		#	echo "File in directory ${sourcefile} not newer that" ${file_link}
		#	conflicting_files_error ${filename} ${file_link} ${sourcefile}
		#    fi
		elif  [ "$dirlink" = "patch" ]
		    then
		    # echo "linkfile" ${linkfile} ${file_link}
		    # echo "source " ${sourcefile}
		    echo "patch file  ?"
                    # on ne verifie plus si plus recent
	  	    echo "ok we keep ${file_link} instead of ${sourcefile}"
		#    if [ ${file_link} -nt ${sourcefile} ]
		#	then
		#	echo "ok we keep ${file_link} instead of ${sourcefile}"
		#
		#    else
		#	echo "File in directory ${sourcefile} not newer that" ${file_link}
		#	conflicting_files_error ${filename} ${file_link} ${sourcefile}
		#    fi
		  else
	      # xterm
		    conflicting_files_error ${filename} ${file_link} ${sourcefile}
		fi
          fi
	else
	    ln -sf ${sourcefile} ${linkfile}
        fi
      done
    done
done < $dependencies_file

echo "Done."
echo ""

echo "Verify father"

father_description=`extract_section "$project_configuration_file" father_project`
if [ "$father_description" != "" ]
 then
     father_name=`extract_field "$father_description" name`
     father_location=`extract_field "$father_description" location`
     if [ "${father_name}" = "" ] || [ "${father_location}" = "" ]
       then
	    echo "Error in definiton of prerequisite$number"
	    exit 1
       fi
     father_location=`eval echo  $father_location` 
     echo "father project : $father_name ($father_location)"
     mkdir -p ${project_directory}/local
     local_father_dir=${project_directory}/local/${father_name}
     [ -h  ${local_father_dir} ] && rm ${local_father_dir}
     cmd='ln -sf ${father_location}/install ${local_father_dir}'
     echo "Ajouter des verifs de coherence name location..."
     echo $cmd 
     eval $cmd
     # on recupere les prerequis du pere
     source ${local_father_dir}/share/prerequis.sh

     includes_add="${includes_add} -I${local_father_dir}/include"
     librairies_add="-L${local_father_dir}/lib/ -l ${father_name}\${OPT} ${librairies_add}"
     # on copie le instancie
     cp ${local_father_dir}/share/instancie_${father_name}.cpp  ${project_build_directory}/.
     chmod +w ${project_build_directory}/instancie_${father_name}.cpp
     # rpertoire additionnel par encore parfait ...
     tutu=`echo $TRUST_ROOT | awk -F\/ '{for (i=0;i<=NF;i++) {printf("../");}}'`
    echo "rep_add=$tutu/${local_father_dir}/src" > rep_add.sh
    echo "rep_add=${local_father_dir}/src" > rep_add.sh
    echo "export rep_add" >>rep_add.sh
    mv rep_add.sh ${project_build_directory}/.
   
 fi
echo "Done"
echo ""


echo "Verify prerequies"
[ "$includes_add" = "" ] && includes_add=""
[ "$librairies_add" = "" ] && librairies_add=""
cmake_flags="SET(libdeps \"\") %%"
cmake_flags="$cmake_flags %% set(OLD_CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH}) %% list(APPEND CMAKE_LIBRARY_PATH \$ENV{TRUST_ROOT}/exec/python/lib) %% %%"

# extraction de la dependance kernel
kernel_name=`extract_field "$project_description" kernel`
[ "$kernel_name" != ""  ] && cmake_flags=$cmake_flags"  SET(kernel $kernel_name) %%" 

# extraction des cpp_flags
cpp_flags_name=`extract_field "$project_description" cpp_flags`
[ "$cpp_flags_name" != ""  ] && cmake_flags=$cmake_flags"  SET(cpp_flags $cpp_flags_name) %%add_definitions(\${cpp_flags}) %% message(STATUS \"\${cpp_flags} added to CPP_FLAGS \")"

# extraction des ld_flags
ld_flags_name=`extract_field "$project_description" ld_flags`
if [ "$ld_flags_name" != ""  ]
then
   for lib0 in $ld_flags_name
   do
      lib=`echo $lib0| sed "s?-l??"`
      libs="lib${lib}.so lib${lib}.a"
      cmake_flags="$cmake_flags %% find_library( ${lib} NAMES ${libs} ${lib} )"
      cmake_flags="$cmake_flags %% message(STATUS \"Library '${lib}' found there: \${${lib}}\")"
      cmake_flags="$cmake_flags %% if (${lib} STREQUAL ${lib}-NOTFOUND)%% find_library( ${lib} NAMES ${libs} ${lib} ) %% endif()"
      cmake_flags="$cmake_flags  %% set(libdeps  \${libdeps} \${${lib}} )"
   done
fi

cmake_flags="$cmake_flags %% %% set(CMAKE_LIBRARY_PATH ${OLD_CMAKE_LIBRARY_PATH}) %%"

if [ "$1" != "-noprerequis" ]
then  
   total_path=""
   distrib_path=""
   while read name path
   do
      total_path=${total_path}" "$path
      distrib_path=${distrib_path}" "$name:$path
      echo "Verify prerequies project "$name
      project_directory_dep=$path
      project_dep_configuration_file=$path/project.cfg
      for number in `seq 1 20`
      do
         # extraction de la section de description du fichier de configuration
         prerequis_description=`extract_section "$project_dep_configuration_file" prerequisite$number`
         if  [ "$prerequis_description" != "" ]
         then
            # verification des mots cles mis dans la section [prerequisite], si un pas autorise : exit
            all_fields=`extract_section_fields "$prerequis_description"`
            for f in $all_fields
            do
               case $f in
                  name|prog_test|librairies_flag|configure_flag) continue ;;
                  *) project_cfg_error $f "[prerequisite]" "name|prog_test|librairies_flag|configure_flag"
               esac
            done

            # extraction du nom du projet
            prerequis_name=`extract_field "$prerequis_description" name`
            echo $number prerequis found : $prerequis_name
            prog_test=`extract_field "$prerequis_description" prog_test`
            if [ "$prog_test" = "" ] || [ "$prerequis_name" = "" ]
            then
               echo "Error in definiton of prerequisite$number"
               exit 1
            fi

            libraires_flag=`extract_field "$prerequis_description" librairies_flag`
            configure_flag=`extract_field "$prerequis_description" configure_flag`
            export configure_flag
            includes_add="$includes_add -I${project_directory}/local/${prerequis_name}/include"
            librairies_add="$librairies_add -L${project_directory}/local/${prerequis_name}/lib/ $libraires_flag"
            export includes_add
            export librairies_add
            cmake_flags="$cmake_flags %% include_directories(${project_directory}/local/${prerequis_name}/include) "
            for lib0 in $libraires_flag
            do
               lib=`echo $lib0| sed "s?-l??"`
               libs="lib${lib}.a" # Force l'utilisation de librairie statique pour les prerequis
               [ "$lib" = "dl" ] && libs=""

               cmake_flags="$cmake_flags %% find_library( ${lib} NAMES ${libs} ${lib} PATHS ${project_directory}/local/${prerequis_name}/lib NO_DEFAULT_PATH)"
               cmake_flags="$cmake_flags %% if (${lib} STREQUAL ${lib}-NOTFOUND)%% find_library( ${lib} NAMES ${libs} ${lib} ) %% endif()"
               cmake_flags="$cmake_flags  %% set(libdeps  \${libdeps} \${${lib}} )"
            done
            export cmake_flags
   
            cd  ${project_build_directory}
            arcdir=${project_directory_dep}/share/archives
            file=${arcdir}/$prerequis_name.tar.gz
            [ ! -f ${file} ] &&  arcdir=${project_directory_dep}/archives;file=${arcdir}/$prerequis_name.tar.gz
            [ ! -f ${file} ] && echo $prerequis_name.tar.gz not found in ${project_directory_dep}/share/archives or in ${arcdir} && exit -2
            ${BALTIK_ROOT}/bin/baltik_compil_prerequis $prerequis_name ${arcdir}//$prerequis_name.tar.gz  ${arcdir}/${prog_test} ${project_directory}/local/${prerequis_name} > ${project_build_directory}/$prerequis_name.LOG 2>&1
            status=$?
            if [ $status -ne 0 ]
            then
               echo "error with prerequisite ${prerequis_name}"
               echo "see ${project_build_directory}/$prerequis_name.LOG"
               rm -f $project_makefile
               exit $status
            fi
            cd  ${project_directory}
         fi
      done

      makefile=${project_build_directory}/make.include.atelier
      add_dependencies_to_makefile $makefile

      echo "includes_add=\"$includes_add\"" > ${project_build_directory}/prerequis.sh
      echo "librairies_add=\"$librairies_add\"" >> ${project_build_directory}/prerequis.sh
   done < $dependencies_file
   echo "Done."
else
   makefile=${project_build_directory}/make.include.atelier
fi

echo "project_directory =${project_directory} " >> $makefile

echo ""
file_version=${project_directory}/src/Version_kernel
echo "Verify src/Version_kernel"
file_version_test=${project_directory}/.Version_kernel
echo $TRUST_VERSION > ${file_version_test}
diff ${file_version} ${file_version_test} 
status=$?
if [ $status -ne 0 ]
then
   echo Version_kernel mis a jour
   CHECKOUT ${file_version} 1>/dev/null 2>&1
   cat ${file_version_test} > ${file_version}
fi
rm -f ${file_version_test}
echo "Done"
echo ""
echo "Building Makefile ..."

project_executable_name=`extract_executable_name ${project_description}`
exec_optim=`pwd`"/"${project_executable_name}_opt
exec_debug=`pwd`"/"${project_executable_name}

project_makefile="${project_directory}/Makefile"
env_file=$project_directory/env_${project_name}.sh
env_file_full=$project_directory/full_env_${project_name}.sh
if [ -e $project_makefile ]
then
    rm -f $project_makefile
fi
printf "# helplist of target\n"  >> $project_makefile
printf "\n" >> $project_makefile
printf "# Parameter initialization\n" >> $project_makefile
printf "TESTLIST ?= \"\"\n" >> $project_makefile
printf "\n" >> $project_makefile
printf "default: erreur\n" >> $project_makefile
printf "# help help \t\t: to show this message\n">> $project_makefile
printf "help:\n">> $project_makefile
printf "\t@grep \"# help\" Makefile | grep -v Makefile |  sed \"s/# help//\"\n" >> $project_makefile
printf "# help \n" >> $project_makefile

printf "erreur: help\n" >> $project_makefile
printf "\t@ exit 1 \n" >> $project_makefile
printf "\n" >> $project_makefile

list_cible=`list_type`
for type in $list_cible
do
printf "# help check_$type \t: Running baltik test suite in `human_name_from_name $type` mode \n" >>$project_makefile
printf "check_$type : $type\n"                                  >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@echo \"# Running test suite in `human_name_from_name $type` mode #\"\n"     >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_check $type \$(TESTLIST)\n"               >> $project_makefile
printf "\n"                                                     >> $project_makefile

printf "# help ctest_$type \t: Running baltik test suite in `human_name_from_name $type` mode with ctest\n" >>$project_makefile
printf "ctest_$type : $type\n"                                  >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@echo \"# Running test suite in `human_name_from_name $type` mode with ctest #\"\n"     >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_ctest $type\n"               >> $project_makefile
printf "\n"                                                     >> $project_makefile

printf "# help check_deps_$type : Running dependencies test suite in `human_name_from_name $type` mode \n" >>$project_makefile
printf "check_deps_$type : $type\n"                                  >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@echo \"# Running dependencies test suite in `human_name_from_name $type` mode #\"\n"     >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_check $type deps \n"               >> $project_makefile
printf "\n"                                                     >> $project_makefile

printf "# help ctest_deps_$type \t: Running dependencies test suite in `human_name_from_name $type` mode with ctest\n" >>$project_makefile
printf "ctest_deps_$type : $type\n"                                  >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@echo \"# Running dependencies test suite in `human_name_from_name $type` mode with ctest #\"\n"     >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_ctest $type deps\n"               >> $project_makefile
printf "\n"                                                     >> $project_makefile

printf "# help check_all_$type : Running all test suite in `human_name_from_name $type` mode (all test of project = baltik test + dependencies test)\n" >>$project_makefile
printf "check_all_$type : $type\n"                                  >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@echo \"# Running all test suite in `human_name_from_name $type` mode #\"\n"     >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_check $type all \n"               >> $project_makefile
printf "\n" >> $project_makefile

printf "# help ctest_all_$type \t: Running all test suite in `human_name_from_name $type` mode (all test of project = baltik test + dependencies test) with ctest\n" >>$project_makefile
printf "ctest_all_$type : $type\n"                                  >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@echo \"# Running all test suite in `human_name_from_name $type` mode with ctest #\"\n"     >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_ctest $type all\n"               >> $project_makefile
printf "\n"                                                     >> $project_makefile

printf "# help check_trust_$type : Running TRUST test suite in `human_name_from_name $type` mode (only test of TRUST platform)\n" >>$project_makefile
printf "check_trust_$type : $type\n"                                  >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@echo \"# Running TRUST test suite in `human_name_from_name $type` mode #\"\n"     >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_check $type  trust \n"               >> $project_makefile
printf "\n" >> $project_makefile

printf "# help ctest_trust_$type \t: Running TRUST test suite in `human_name_from_name $type` mode (all test of TRUST platform) with ctest\n" >>$project_makefile
printf "ctest_trust_$type : $type\n"                                  >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@echo \"# Running TRUST test suite in `human_name_from_name $type` mode with ctest #\"\n"     >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_ctest $type trust\n"               >> $project_makefile
printf "\n"                                                     >> $project_makefile

printf "# help check_full_$type : Running full test suite in `human_name_from_name $type` mode (all test of project + all test of TRUST platform)\n" >>$project_makefile
printf "check_full_$type : $type\n"                                  >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@echo \"# Running full test suite in `human_name_from_name $type` mode #\"\n"     >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_check $type full \n"               >> $project_makefile
printf "\n" >> $project_makefile

printf "# help ctest_full_$type \t: Running full test suite in `human_name_from_name $type` mode (all test of project + all test of TRUST platform) with ctest\n" >>$project_makefile
printf "ctest_full_$type : $type\n"                                  >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@echo \"# Running full test suite in `human_name_from_name $type` mode with ctest #\"\n"     >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_ctest $type full\n"               >> $project_makefile
printf "\n"                                                     >> $project_makefile

printf "# help check_last_pb_$type : Running last pb test suite in `human_name_from_name $type` mode (see test in liste_pb.all file)\n" >>$project_makefile
printf "check_last_pb_$type : $type\n"                                  >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@echo \"# Running last pb test suite in `human_name_from_name $type` mode #\"\n"     >> $project_makefile
printf "\t@echo \"####################################\"\n"     >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_check $type  last_pb \n"               >> $project_makefile
printf "\n" >> $project_makefile

printf "# help $type \t\t: Compiling in `human_name_from_name $type` mode \n" >>  $project_makefile
printf "$type : check_sources\n"  >> $project_makefile
printf "\t@echo \"###########################\"\n"              >> $project_makefile
printf "\t@echo \"# Compiling in `human_name_from_name $type` mode #\"\n"              >> $project_makefile
printf "\t@echo \"###########################\"\n"              >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_build $type\n"               >> $project_makefile
printf "\n"                                                     >> $project_makefile

printf "# help module_$type \t: Compiling module in `human_name_from_name $type` mode \n" >>  $project_makefile
printf "module_$type :\n"  >> $project_makefile
printf "\t@echo \"###########################\"\n"              >> $project_makefile
printf "\t@echo \"# Compiling in `human_name_from_name $type` mode #\"\n"              >> $project_makefile
printf "\t@echo \"###########################\"\n"              >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_build module $type\n"               >> $project_makefile
printf "\n"                                                     >> $project_makefile

printf "# help \n" >> $project_makefile
done
printf "\n" 							>> $project_makefile
printf "# help all_validation \t: Generate validation report. Remark : if the environment variable PRM_NO_VISIT exists then reports will be generated without visit plots.\n">>$project_makefile
printf "all_validation : optim\n"    >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@echo \"# Generate validation report #\"\n"                 >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_validation \$(TESTLIST)\n"                     >> $project_makefile
printf "\n"                                                     >> $project_makefile
printf "# help check_all_validation \t: like all_validation\n">>$project_makefile
printf "check_all_validation : all_validation\n"           >> $project_makefile
printf "\n" 		
                         >> $project_makefile
printf "# help validation \t: Generate validation report with only the prm of this project\n">>$project_makefile
printf "validation : check_validation\n"  >> $project_makefile
printf "\n"       
printf "# help check_validation \t: like validation\n">>$project_makefile
printf "check_validation : optim\n"                                              >> $project_makefile
printf "\n" 

printf "\t@echo \"########################\"\n"       >> $project_makefile
printf "\t@echo \"# Generate validation report of this project only #\"\n"  >> $project_makefile
printf "\t@echo \"########################\"\n"        >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_validation reduit \$(TESTLIST)\n"                     >> $project_makefile
printf "\n"           >> $project_makefile

printf "# help check_sources_strict \t: Checking sources with new rules\n">>$project_makefile
printf "check_sources_strict :\n"                                              >> $project_makefile
printf "\t@echo \"##################################\"\n"                 >> $project_makefile
printf "\t@echo \"# check_sources with new rules   #\"\n"                 >> $project_makefile
printf "\t@echo \"##################################\"\n"                 >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_check_sources -check_file \n"                     >> $project_makefile
printf "\n"                                                     >> $project_makefile
printf "# help check_sources \t: Checking sources\n">>$project_makefile
printf "check_sources :\n"                                              >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@echo \"# check_sources        #\"\n"                 >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_check_sources || exit 0 \n"                     >> $project_makefile
printf "\n"                                                     >> $project_makefile

printf "# help clean \t\t: Cleaning environment \n">>$project_makefile
printf "clean :\n"                                              >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@echo \"# Cleaning environment #\"\n"                 >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_clean\n"                     >> $project_makefile
printf "\n"                                                     >> $project_makefile
printf "# help dist_clean \t: Cleaning completly environment (with cleaning configuration) \n">>$project_makefile
printf "dist_clean :\n"                                              >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@echo \"# Cleaning completly environment #\"\n"                 >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_clean dist\n"                     >> $project_makefile
printf "\n"   
                                                  >> $project_makefile
printf "# help distrib \t: Building distribution (*.tar.gz archive) \n">>$project_makefile
printf "distrib :\n"                                              >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@echo \"# Building distrib #\"\n"                 >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_make_distrib $distrib_path\n"                     >> $project_makefile
printf "\n"                                                     >> $project_makefile
printf "# help distrib_git \t: Building distrib from files tracked in git without .git (if .git needed, you can use git bundle command) \n">>$project_makefile
printf "distrib_git :\n"                                              >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@echo \"# Building distrib_git #\"\n"                 >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_make_distrib -git $distrib_path\n"                     >> $project_makefile
printf "\n"                                                     >> $project_makefile

printf "# help gui \t\t: Building gui (XDATA compilation) \n" >> $project_makefile
printf "gui : optim\n"                                              >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@echo \"# building gui         #\"\n"                 >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@source $env_file; env TRUST_ROOT_ORG=$TRUST_ROOT project_name=$project_name $BALTIK_ROOT/bin/baltik_make_xdata\n"                >> $project_makefile
printf "\n"                                                     >> $project_makefile

printf "# help check_gui \t: Checking gui (XDATA validation)\n" >> $project_makefile
printf "check_gui : gui\n"                                              >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@echo \"# Checking gui         #\"\n"                 >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@source $env_file; check_jdd \$(OPTIONS_GUI)\n"                       >> $project_makefile
printf "\n"                                                     >> $project_makefile


printf "# help trustify \t: Build trustify Python module for the baltik\n" >> $project_makefile
printf "trustify :\n"                                              >> $project_makefile
printf "\t@echo \"############################\"\n"                 >> $project_makefile
printf "\t@echo \"# Building trustify module #\"\n"                 >> $project_makefile
printf "\t@echo \"############################\"\n"                 >> $project_makefile
printf "\t@source $env_file; $TRUST_ROOT/Outils/trustify/install.sh \n"  >> $project_makefile
printf "\n"                                                     >> $project_makefile

printf "# help trustify_check \t: Check dataset validity using trustify generated module\n" >> $project_makefile
printf "trustify_check : trustify\n"                               >> $project_makefile
printf "\t@echo \"##########################################\"\n"  >> $project_makefile
printf "\t@echo \"# Checking datasets with trustify module #\"\n"  >> $project_makefile
printf "\t@echo \"##########################################\"\n"  >> $project_makefile
printf "\t@source $env_file; $TRUST_ROOT/Outils/trustify/check_all.sh \n" >> $project_makefile
printf "\n"                                                     >> $project_makefile

printf "# help trustify_doc \t: Build baltik keyword documentation using trustify\n" >> $project_makefile
printf "trustify_doc : trustify\n"                               >> $project_makefile
printf "\t@echo \"######################################\"\n"  >> $project_makefile
printf "\t@echo \"# Building keyword doc with trustify #\"\n"  >> $project_makefile
printf "\t@echo \"######################################\"\n"  >> $project_makefile
printf "\t@source $env_file; $TRUST_ROOT/Outils/trustify/gen_doc.sh \n" >> $project_makefile
printf "\n"                                                     >> $project_makefile


printf "# help doxygen \t: Building doxygen documentation \n" >> $project_makefile
printf "doxygen :\n"                                              >> $project_makefile
printf "\t@echo \"###################################\"\n"                 >> $project_makefile
printf "\t@echo \"# building doxygen documentation  #\"\n"                 >> $project_makefile
printf "\t@echo \"###################################\"\n"                 >> $project_makefile
printf "\t@env project_directory=${project_directory} $BALTIK_ROOT/bin/baltik_make_Doxyfile\n"                >> $project_makefile
printf "\n"                                                     >> $project_makefile

#printf "# help check_project_modularity \t: Check project modularity \n"                           >> $project_makefile
#printf "check_project_modularity :\n"                           >> $project_makefile
#printf "\t@echo \"########################\"\n"                 >> $project_makefile
#printf "\t@echo \"# Project modularity   #\"\n"                 >> $project_makefile
#printf "\t@echo \"########################\"\n"                 >> $project_makefile
#printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_check_project_modularity \n"                     >> $project_makefile
#printf "\n"    

printf "install :\n"                                              >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@echo \"# Install              #\"\n"                 >> $project_makefile
printf "\t@echo \"########################\"\n"                 >> $project_makefile
printf "\t@env TRUST_ROOT_ORG=$TRUST_ROOT $BALTIK_ROOT/bin/baltik_install `dirname $project_directory`\n"                     >> $project_makefile
printf "\n"    
                                                 >> $project_makefile
#printf "# help terminal \t: Open a xterm with TRUST_TESTS... \n" >> $project_makefile
printf "# help terminal \t: Open a xterm... \n" >> $project_makefile
printf "terminal :\n" >> $project_makefile
printf "\t source $env_file; env MAKELEVEL=0 xterm\n" >> $project_makefile

phony=""
for type in $list_cible
do
 phony="$phony check_$type $type"
done
printf ".PHONY : $phony validation clean distrib install gui terminal\n"   >> $project_makefile

echo "Done."
echo ""

echo "Creating tests/deps and tests/all"
mkdir -p ${project_directory}/build/tests/deps ${project_directory}/build/tests/all 
rm -rf  ${project_directory}/build/tests/deps/* ${project_directory}/build/tests/all/* ${project_directory}/build/tests/full  ${project_directory}/build/tests/share/*
mkdir -p ${project_directory}/build/tests/share/deps/Validation/Rapports_automatiques/
mkdir -p ${project_directory}/build/tests/share/all/Validation/Rapports_automatiques/

rm -f ${project_directory}/build/tests/share/Validation/Rapports_automatiques/*
for  path in $total_path
do
  if [ $path != $project_directory ]
      then
      for dir in `ls $path/tests/Reference/ 2>/dev/null`
	do
	mkdir -p ${project_directory}/build/tests/deps/$dir
	for cas in `ls $path/tests/Reference/$dir 2>/dev/null`
	  do
	  ln -sf $path/tests/Reference/$dir/$cas ${project_directory}/build/tests/deps/$dir/.
	done
      done
      for dir in `ls $path/share/Validation/Rapports_automatiques// 2>/dev/null`
	do
	ln -sf $path//share/Validation/Rapports_automatiques/$dir ${project_directory}/build/tests/share/deps/Validation/Rapports_automatiques/.
      done
  fi
done
for  path in $total_path 
do
  for dir in `ls $path/tests/Reference/ 2>/dev/null`
    do
    mkdir -p ${project_directory}/build/tests/all/$dir
    for cas in `ls $path/tests/Reference/$dir 2>/dev/null`
      do
      ln -sf $path/tests/Reference/$dir/$cas ${project_directory}/build/tests/all/$dir/.
    done
  done
  for dir in `ls $path/share/Validation/Rapports_automatiques// 2>/dev/null`
    do
    ln -sf $path//share/Validation/Rapports_automatiques/$dir ${project_directory}/build/tests/share/all/Validation/Rapports_automatiques/.
  done
done
cp -a ${project_directory}/build/tests/share/all  ${project_directory}/build/tests/share/full
cp -a ${project_directory}/build/tests/all ${project_directory}/build/tests/full

for  path in $TRUST_ROOT 
do
  for dir in `ls $path/tests 2>/dev/null`
    do
    [ ! -d  $path/tests/$dir ] && continue  
    mkdir -p ${project_directory}/build/tests/full/$dir
    for cas in `ls $path/tests/$dir 2>/dev/null`
      do
      ln -sf $path/tests/$dir/$cas ${project_directory}/build/tests/full/$dir/.
    done
  done
  for dir in `ls $path/Validation/Rapports_automatiques// 2>/dev/null`
    do
    ln -sf $path//Validation/Rapports_automatiques/$dir ${project_directory}/build/tests/share/full/Validation/Rapports_automatiques/.
  done
done

if [ "$convert_absolute_to_relative_links" != "" ] && [ "`which symlinks 2>/dev/null`" != "" ]
then
   (cd ${project_directory}/build/tests/; symlinks -cr . 1>/dev/null 2>&1)
fi

# Split into two parts to avoir issue with $project_directory on clusters (module issue?)
echo "Creation $env_file"
if [ `uname -s` = "Linux" ]
then
   echo "#!/bin/bash
. $TRUST_ROOT/env_TRUST.sh
export project_directory=\$(cd \"\$( dirname \"\${BASH_SOURCE[0]}\" )\" && pwd)" > $env_file
else
   echo " . $TRUST_ROOT/env_TRUST.sh
export project_directory=\$(cd \"\$( dirname \"\${BASH_SOURCE[0]:-\${(%):-%x}}\" )\" && pwd)" > $env_file
fi

echo "# Initial install performed here:
#export project_directory=${project_directory}
export ${project_name}_project_directory=\${project_directory}
export PATH=\${project_directory}/build/xdata:\$PATH
export TRUST_TESTS=\${project_directory}/build/tests/all/
export Rapports_auto_root=\${project_directory}/build/tests/share/all/ 
export exec_opt=\${project_directory}/${project_executable_name}_opt
export exec=\${project_directory}/${project_executable_name}_opt
export exec_semi_opt=\${project_directory}/${project_executable_name}_semi_opt
export exec_pg=\${project_directory}/${project_executable_name}_opt_pg
export exec_gcov=\${project_directory}/${project_executable_name}_opt_gcov
export exec_debug=\${project_directory}/${project_executable_name}" >> $env_file

# Add dependencies project directory
idx=0
list_path=($sub_projects_paths)
for name in $sub_projects_names :
do
    the_path=${list_path[$idx]}
    if [ "$the_path" != $project_directory ] && [ "$name" != ":" ]
    then
       the_relative_path=`echo $the_path | sed "s?${project_directory}?\$\{project_directory\}?"`
       echo "export "$name"_project_directory="$the_relative_path >> $env_file
    fi
    let idx++
done


sed "s/\/all\//\/full\//g"  $env_file > $env_file_full
echo "Done."
echo ""


postconfigure=$project_directory/share/bin/post_configure
if [ -f $postconfigure ]
then
    echo "Executing $postconfigure"
    $postconfigure
    [ $? -ne 0 ] && echo "Error" && exit -1
    echo "Done"
fi


#!/bin/bash
# Recuperation des rapports sur les machines distantes
[ ${#TRUST_ROOT} = 0 ] && echo "The TRUST_ROOT variable is not definied !" && exit

machine="" && [ ${#1} != 0 ] && machine=$1
[ ${#Version} = 0 ] && echo "\$Version empty !" && exit
[ ${v%beta} != $v ] && [ ${#DATE} = 0 ] && echo "\$DATE empty !" && exit
v=${Version#Version}
PORTAGE=$WORKDIR/portages/PORTAGE_$v
rm -r -f $PORTAGE
mkdir -p $PORTAGE 2>/dev/null
# Teste la connection :
. connect_ftp -no_ftp

#####################################
# Nouveau, on complete la liste avec 
# les machines trouvees dans le depot
#####################################
for HOST in `ls_ftp $SECRET/../CR/CR_* 2>/dev/null | $TRUST_Awk '{gsub("CR_","",$NF);print $NF}'`
do
   #if [ "`liste_machines | $TRUST_Awk -F. '{print $1}' | grep -w $HOST`" = "" ]
   if [ "`liste_machines | $TRUST_Awk -F. '{print $1}' | $TRUST_Awk -F"-gw" '{print $1}' | grep -w $HOST`" = "" ] # 09/2015 Modification des acces SSH au TGCC *-gw.ccc.cea.fr
   then
      CHECKOUT $TRUST_ROOT/bin/admin/liste.machines 1>/dev/null 2>&1
      adr=$HOST
      echo $ECHO_OPTS "linux\tgit_cron\tnon\t$adr\t\t\t\t# Reserve machine" >> $TRUST_ROOT/bin/admin/liste.machines
      echo "$adr added to $TRUST_ROOT/bin/admin/liste.machines"   
   fi
done

if [ ${#machine} = 0 ]
then
   # Changement PL du 24/07/04, en tete les machines cibles PUIS les autres
   machines=`liste_machines cible`" "`liste_machines get_binary`" "`liste_machines tache`" "`liste_machines non`
   liste="" # Pour avoir une liste unique:
   for machine in $machines
   do
      [ "`echo $liste | grep $machine`" = "" ] && liste=$liste" "$machine    
   done
else
   liste=$machine
fi

###############################
# Creation du rapport NUIT.html
###############################
REP_NUIT=/home/trust_trio/triou/tmptrust/tmptrust/Historique/NUIT
[ ! -d $REP_NUIT ] && mkdir -p $REP_NUIT
NUIT=$REP_NUIT/NUIT.html
echo > $NUIT
################################
# Debut boucle sur les modules #
################################
MODULES="TRUST"
for MODULE in $MODULES
do
   # Creation des repertoires
   exec=$PORTAGE/$TRUST_ARCH/$MODULE/exec
   mkdir -p $exec   
   nb_machine_total_cible=0
   portabilite=0;nb_machine_cible=0
   portabilite_baltik=0;nb_machine_baltik_cible=0   
   portabilite_atelier=0;nb_machine_atelier_cible=0 
   portabilite_assert=0;nb_machine_assert_cible=0
   echo "
<HTML>
<HEAD>
   <META NAME="ROBOTS" CONTENT=\"NOINDEX, NOFOLLOW\">
   <META NAME="ROBOTS" CONTENT=\"NOARCHIVE\">
<TITLE>$MODULE Results compilation</TITLE>
</HEAD>
<BODY>
<CENTER><B><FONT SIZE=+1>$MODULE $TRUST_VERSION build the `date '+%d/%m/%y'`</FONT></B>$vide</CENTER>
<TABLE BORDER WIDTH="100%" NOSAVE style=\"font-size:12px;\" border 1> 
<TR>
<TD>Target</TD>
<TD>Cores/Vecto</TD>
<TD>RAM</TD>
<TD>Cache</TD>
<TD>Freq</TD>
<TD>GPU</TD>
<TD>End</TD>
<TD>OS</TD>
<TD>CC</TD>
<TD>MPI</TD>
<TD>Exec</TD>
<TD>Build</TD>
<TD>Petsc</TD>
<TD>Med</TD>
<TD>MedC</TD>
<TD>lata2</TD>
<TD>plot2</TD>
<TD>ICoCo</TD>
<TD>trioxd</TD>
<TD>gnuplt</TD>
<TD>Gmsh</TD>
<TD>VisIt</TD>
<TD>fiche</TD>
<TD>Ate</TD>
<TD>Valg</TD>
<TD>assert</TD>
<TD>Baltik</TD>
<TD>Tests</TD>
<TD>CPU3D</TD>
<TD>Bench</TD>
</TR>" >> $NUIT
   
   #########################
   # Parcours chaque machine
   #########################
   rm -f /tmp/os /tmp/CC
   for adr in $liste
   do
      #version=$WORKBASE`echo $adr | awk -F'.' '{print $1}'`
      version=$WORKBASE`echo $adr | awk -F'.' '{print $1}' | awk -F"-gw" '{print $1}'` # 09/2015 Modification des acces SSH au TGCC *-gw.ccc.cea.fr
      ROOT=$version/$MODULE
      log=`awk -v adr=$adr '($2==adr) {print $4}' ~/.netrc | head -1`
      BATCHMODE=" -o BatchMode=yes "
      SSHP=""
      if [ "`liste_machines ssh_pass | grep $adr`" != "" ]
      then
         SSHPASS=`awk -v adr=$adr '($2==adr) {print $6}' ~/.netrc | head -1`
         SSHP="sshpass -p $SSHPASS "
         BATCHMODE=""
      fi
      recupere_exec=0	# C'est une machine dont on recupere les binaires
      machine_cible=0	# C'est une machine sur laquelle le code doit compiler
      # Appel pour remplir recupere_exec et ftp et TRUST_ARCH
      . liste_machines $adr recupere_exec
      . liste_machines $adr TRUST_ARCH
      . liste_machines $adr machine_cible
      [ "$machine_cible" = "" ] && machine_cible=0
      # Une machine sur laquelle on recupere un exec EST AUSSI une machine cible
      [ "$recupere_exec" = 1 ] && machine_cible=1
      [ "$machine_cible" = 1 ] && let nb_machine_total_cible=$nb_machine_total_cible+1
      # Definition de quelques variables
      HOST=${version#$WORKBASE}
      CR=CR_$HOST
      TD="<TD>"`[ "$machine_cible" = 1 ] && echo "<B>"`
      FTD=`[ "$machine_cible" = 1 ] && echo "</B>"`"</TD>"
      vide="&nbsp;"
      echo "************************************************************************"
      if [ $recupere_exec = 1 ]
      then
         echo "* Recovery on $adr ($machine_cible:get_binary) at `date`"
      else
         echo "* Recovery on $adr ($machine_cible) at `date`"
      fi
      echo "************************************************************************"
      # Recuperation des CR selon le mode
      if [ "`liste_machines git_cron | grep $adr`" != "" ]
      then
         cd $REP_NUIT
	 rm -f $CR* compile_*_$HOST.log MAKE_*_$HOST PERF_*_$HOST
	 # Bizarre wget se base sur ~/.netrc pour se logger sur public
         wget_ ftp://$TRUST_FTP/../../$SECRET/../CR/$CR 			1>/dev/null 2>&1			
         wget_ ftp://$TRUST_FTP/../../$SECRET/../CR/compile_*_$HOST.log	1>/dev/null 2>&1
         wget_ ftp://$TRUST_FTP/../../$SECRET/../CR/MAKE_*_$HOST		1>/dev/null 2>&1
         wget_ ftp://$TRUST_FTP/../../$SECRET/../CR/PERF_*_$HOST		1>/dev/null 2>&1	
	 [ ! -f $CR ] && echo "$CR not recovered KO!"
	 COMPILE_LOG=`ls compile_*_$HOST.log 2>/dev/null` && [ "$COMPILE_LOG" = "" ] && echo "No compilation report recovered KO!"
	 MAKE_LOG=`ls MAKE_*_$HOST 2>/dev/null`
	 PERF_LOG=`ls PERF_*_$HOST 2>/dev/null` && [ "$PERF_LOG" = "" ] && echo "No performance report recovered KO!"
	 
	 # On efface les rapports sur le depot
	 for file in $CR $COMPILE_LOG $MAKE_LOG $PERF_LOG
	 do
	    rm_ftp $SECRET/../CR/$file
	 done
         cd - 1>/dev/null 2>&1
      else
         if  [ "`$SSHP ssh_ -o ConnectTimeout=30 $BATCHMODE $log@$adr -n pwd 1>/dev/null 2>&1;echo $?`" != 0 ]
         then
            echo "$adr not accessible..."
            [ -f ~/$CR ] && cp ~/$CR $REP_NUIT/.
         else
            # Connection sur machine interne par ssh
            $SSHP scp -o StrictHostKeyChecking=no -o ConnectTimeout=60 $BATCHMODE $log@$adr:~/$CR $REP_NUIT/. 2>/dev/null
            $SSHP ssh_ $log@$adr -n "rm ~/$CR 2>/dev/null"
            $SSHP scp -o StrictHostKeyChecking=no -o ConnectTimeout=60 $BATCHMODE $log@$adr:$ROOT/compile_* $REP_NUIT/. 2>/dev/null
            $SSHP ssh_ $log@$adr -n "rm $ROOT/compile_* 2>/dev/null" 
            $SSHP scp -o StrictHostKeyChecking=no -o ConnectTimeout=60 $BATCHMODE $log@$adr:$ROOT/MAKE_* $REP_NUIT/. 2>/dev/null
            $SSHP ssh_ $log@$adr -n "rm $ROOT/MAKE_* 2>/dev/null" 
            $SSHP scp -o StrictHostKeyChecking=no -o ConnectTimeout=60 $BATCHMODE $log@$adr:$ROOT/PERF_* $REP_NUIT/. 2>/dev/null
            $SSHP ssh_ $log@$adr -n "rm $ROOT/PERF_* 2>/dev/null" 
            # New, mise_a_jour_TRUST_arch is killed except the Week-end:
	        if [ "`date '+%u'`" -lt 6 ]
            then
              echo "ls_arch -kill $adr" >> $REP_NUIT/$CR
              ls_arch -kill $adr >> $REP_NUIT/$CR
	        fi
         fi
      fi    	
      sleep 10s
      PERF=`ls $REP_NUIT/PERF_*_opt_"$TRUST_ARCH"_"$HOST" 2>/dev/null`
      # Test moins severe pour recuperer un executable OK ou ecarts 
      if [ ${#PERF} != 0 ] && [ -f $PERF ]
      then
         echo "Study of report: `basename $PERF` ..."
         if [ "`grep OK $PERF`" = "" ] && [ "`grep ecarts $PERF`" = "" ]
         then
            echo "  No test cases passed. Nothing is recovered !"
            echo "Empty PERF report of $MODULE on $HOST KO!"
            [ $recupere_exec = 1 ] && [ ${#binaire} = 1 ] && echo "Portage KO from $adr"
         else
            echo "  New executable for $MODULE successfully tested with $TRUST_ARCH on $HOST !"
            if [ $recupere_exec = 0 ] || [ ${#binaire} = 0 ]
            then
               echo "  But libs and executables not recovered..."
            else
               echo "  Recovery of libs and executables..."
	       (cd $exec;rm -f *)
	       if [ "`$SSHP ssh_ -o ConnectTimeout=30 $BATCHMODE $log@$adr -n pwd 1>/dev/null 2>&1;echo $?`" != 0 ]
	       then
	          echo "Portage KO: $adr not accessible..."
	       else	       
                  # Connection interne par ssh
                  log=`awk -v adr=$adr '($2==adr) {print $4}' ~/.netrc | head -1`
                  $SSHP scp -o StrictHostKeyChecking=no -o ConnectTimeout=60 $BATCHMODE $log@$adr:$ROOT/exec/exec.tar.gz $exec/.   		  		  
	          (cd $exec;gunzip -f exec.tar.gz;tar xf exec.tar;rm -f exec.tar)
	          # Si version beta on renomme avec la date et le numero de version
	          if [ ${v%beta} != $v ]
	          then
	             name_binary=`ls $exec/TRUST_mpi* 2>/dev/null`
		     mv $name_binary $name_binary"_"$v"_build_"$DATE
	          fi
	          echo "Portage OK from $adr to $exec"
	       fi
	    fi
	 fi
      else
         echo "No PERF report of $MODULE on $HOST KO!"
	 ls $REP_NUIT/PERF_*_opt_"$TRUST_ARCH"_"$HOST" 2>/dev/null
      fi
      #############################
      # Machine eteinte (pas de CR)
      #############################
      run=1
      if [ ! -f $REP_NUIT/$CR ]
      then
         run=0
         echo "The `date`, the $HOST machine if off or not accessible, or its crontab does not run or not actived KO!" > $REP_NUIT/$CR
      elif [ ! -s $REP_NUIT/$CR ]
      then
         run=0
         echo "The update does not start on $HOST KO!" > $REP_NUIT/$CR
      fi
      cd $TRUST_ROOT/../$MODULE
      NUIT2=$NUIT
      file=""
      # On ne prend que les compile opt
      logs=`cd $REP_NUIT;ls -rt compile_*_opt_$TRUST_ARCH"_"$HOST.log 2>/dev/null | grep -v _semi_opt | grep -v _gcov | grep -v _prof | grep -v _debug`
      for file in $logs
      do
	#HOST=`echo ${file%.log} | $TRUST_Awk -F"_" '{print $NF}'`
	CR=$REP_NUIT/$CR
	TRUST_ARCH_CC=`$TRUST_Awk '/TRUST_ARCH_CC=/ {sub("TRUST_ARCH_CC=","",$6);print $6;exit}' $CR`
	arch=`echo ${file%.log} | $TRUST_Awk -F"_" '{print $(NF-1)}'`
	opt=`echo $file | $TRUST_Awk -F"_" 'BEGIN {opt=""} /insure/ {opt="insure"} /opt/ {opt="opt"} END {print opt}'`
	MPI=`$TRUST_Awk '/MPI=/ {gsub("MPI=","",$0);print $0}' $CR`
	NOM=${file#compile_}
	NOM=${NOM%.log}
	PERF=$REP_NUIT/PERF_$NOM
	EXEC=${NOM%_$HOST}
	EXEC=${EXEC%_$arch}
	host="";os="";rel="";GPU="";nb_procs="";ram="";cache="";freq="";TRUST_CC=""
	executable="-";cpu="";cpu3d="<TD $BLANC>NOT</TD>";bench="<TD $BLANC>NOT</TD>";runfich="<TD $BLANC>NOT</TD>";testgrind="<TD $BLANC>NOT</TD>"
	BLANC="BGCOLOR=#FEFEFE";ROUGE="BGCOLOR=#C42111";VERT="BGCOLOR=3D\"#E47833\""
	comp="Echec";COL1=$ROUGE
	[ "`grep BUILD_EXEC=OK $CR`" != "" ] && comp="Succes" && COL1=$VERT
    TRIOXDATA="<TD $BLANC>NOT</TD>" && [ "`grep TRIOXDATA:OK $CR`" != "" ] && TRIOXDATA="<TD $VERT>OK</TD>"
	TRIOXDATA=$TRIOXDATA && [ "`grep TRIOXDATA:error $CR`" != "" ] && TRIOXDATA="<TD $ROUGE>KO</TD>"
	GNUPLOT="<TD $BLANC>NOT</TD>" && [ "`grep gnuplot:OK $CR`" != "" ] && GNUPLOT="<TD $VERT>OK</TD>"
	GNUPLOT=$GNUPLOT && [ "`grep gnuplot:error $CR`" != "" ] && GNUPLOT="<TD $ROUGE>KO</TD>"
	GPU=`grep " Device " $CR | grep -v "Device compiler exited with error" | cut -d: -f 2 | sed "s/^ //" | sed "s/\"//g"`
	[ "$GPU" = "" ] && GPU=`$TRUST_Awk -F= '/GPU =/ {print $2}' $CR`
	COL2="";taux=$vide
	ptaux=""	
	if [ ${#PERF} != 0 ] && [ -f $PERF ]
	then
	   host=`	$TRUST_Awk -F"=" '/hostname=/ {print $2}' $PERF` && [ $host != $HOST ] && echo "Problem : $host != $HOST"
	   os=`		$TRUST_Awk -F"=" '/os=/       {print $2}' $PERF`
	   rel=`	$TRUST_Awk -F"=" '/release=/  {print $2}' $PERF`
	   nb_procs=`	$TRUST_Awk -F"=" '/nb_procs=/ {print $2}' $PERF`
	   ram=`	$TRUST_Awk -F"=" '/ram=/      {print $2}' $PERF`
	   cache=`	$TRUST_Awk -F"=" '/cache=/    {print $2}' $PERF`
	   freq=`	$TRUST_Awk -F"=" '/freq=/     {print $2}' $PERF`
	   AVX_FLAG="`grep "AVX support on C/C++ code with " $CR | grep Yes 2>/dev/null | cut -f7 -d' '`"
	   nb_procs=$nb_procs"/"$AVX_FLAG

	   TRUST_CC=`echo $TRUST_ARCH_CC | $TRUST_Awk -F'_' '{print $NF}'` && CC_PERF=`cat $PERF | $TRUST_Awk '/CC / {print $2" "$3}'` && [ "$CC_PERF" != "" ] && TRUST_CC=$CC_PERF
	   #taille=`cat $PERF | $TRUST_Awk '/sizeMo/ {print $2"Mo"}'`
	   executable=`$TRUST_Awk -F":" '/Binary:/    {print $2}' $PERF` && executable=`basename $executable` && executable=${executable#TRUST_}
	   [ "`grep 'ctest valgrind tests' $PERF`" != "" ] && executable="mpi_opt_valg"
	   cpu3d=$cpu3d && [ "`grep CPU_3D=KO $CR`" != "" ] && cpu3d="<TD $ROUGE>KO</TD>"
	   cpu=`cat $CR | grep "Mo|" | $TRUST_Awk -F"|" '/cpu_3D / && !/PAR_/ && !/NP/{print $4}'`
	   cpu3d=$cpu3d && [ "`grep CPU_3D=OK $CR`" != "" ] && cpu3d="<TD $VERT>$cpu</TD>"
	   # BENCHMARK
	   bench=$bench && [ "`grep BENCHMARK=KO $CR`" != "" ] && bench="<TD $ROUGE>KO</TD>"
	   bench=$bench && [ "`grep BENCHMARK=OK $CR`" != "" ] && bench="<TD $VERT>OK</TD>"
	   # Run_fiche
	   runfich=$runfich && [ "`grep Run_fiche=KO $CR`" != "" ] && runfich="<TD $ROUGE>KO</TD>"
	   runfich=$runfich && [ "`grep Run_fiche=OK $CR`" != "" ] && runfich="<TD $VERT>OK</TD>"
	   # Test upwind valgrind
	   testgrind=$testgrind && [ "`grep KVALGRIND=KO $CR`" != "" ] && testgrind="<TD $ROUGE>KO</TD>"
	   testgrind=$testgrind && [ "`grep KVALGRIND=OK $CR`" != "" ] && testgrind="<TD $VERT>OK</TD>"
	   # Taux sequentiel:
	   staux=`cat $PERF | $TRUST_Awk '/succes/ && (NF==2) {print $2;exit}'`
	   # Taux parallele:
	   if [ "$MPI" != "" ]
	   then
	      ptaux=`cat $PERF | $TRUST_Awk '/succes/ && (NF==2) {t=$2} END {print t}'`
	      [ "`grep succes_ctest_valgrind $PERF`" != "" ] && ptaux=`cat $PERF | $TRUST_Awk '/succes_ctest_valgrind/ && (NF==2) {t=$2} END {print t}'`
	   else
	      ptaux="0/0"
	   fi
	   # Taux total
	   if [ "$staux" != "" ] && [ "$ptaux" != "" ] && [ "$ptaux" != 0 ]
	   then
	      taux=`echo $staux/$ptaux | $TRUST_Awk -F/ '{print $1+$3"/"$2+$4}'`
	      [ "`grep succes_ctest_valgrind $PERF`" != "" ] &&  taux=$ptaux
	      pourcent=`echo $ECHO_OPTS "scale=3\n$taux" | bc -l`
	      COL2="" && [ "$pourcent" = "1.000" ] && COL2=$VERT
	      [ "`echo $pourcent | $TRUST_Awk '{print $1<0.999}'`" = 1 ] && COL2=$ROUGE
	   else
	      pourcent=0
	      COL2=$ROUGE      
	   fi 
	   if [ "$machine_cible" = 1 ]
	   then
	      [ "$taux" != "$vide" ] && let nb_machine_cible=$nb_machine_cible+1
	      portabilite=`echo $ECHO_OPTS "scale=2\n($portabilite+$pourcent)/1" | bc -l`
	      echo " step $MODULE: total pourc nb file "$portabilite" "$pourcent" "$nb_machine_cible" "$PERF
	   fi
	   # Est ce que tous les tests sont passes en version optimisee simple ?
	   [ ${#comm} = 0 ] && [ ${#opt} != 0 ] && [ $opt = opt ] && [ ${#COL2} != 0 ] && [ $COL2 != $VERT ] && label_teste=0 
	fi
	STRICT="<TD`[ $comp = Succes ] && echo " $ROUGE"`>KO</TD>"
	COOL="<TD $ROUGE>KO</TD>"
	PETSC=$COOL 	 && [ "`grep PETSC=OK $CR`" != "" ] 	  && PETSC="<TD $VERT>OK</TD>"
	MED=$COOL 	 && [ "`grep MED=OK $CR`" != "" ] 	  && MED="<TD $VERT>OK</TD>"
	MEDCOUPL=$COOL   && [ "`grep MEDCOUPLING=OK $CR`" != "" ] && MEDCOUPL="<TD $VERT>OK</TD>"
	LATATOOLS=$STRICT  && [ "`grep lata_tools:OK $CR`" != "" ] 	  && LATATOOLS="<TD $VERT>OK</TD>"
	PLOT2D=$COOL 	 && [ "`grep IHM:OK $CR`" != "" ] 	  && PLOT2D="<TD $VERT>OK</TD>"
	[ "`grep IHM: $CR`" = "" ] && PLOT2D="<TD $BLANC>NOT</TD>"
	ICOCO=$COOL 	 && [ "`grep ICoCo:OK $CR`" != "" ] 	  && ICOCO="<TD $VERT>OK</TD>"
	GMSH=$COOL 	 && [ "`grep Gmsh:OK $CR`" != "" ] 	  && GMSH="<TD $VERT>OK</TD>" && RUN=`$TRUST_Awk -F= '/Gmsh=/ {print $2}' $CR` && GMSH="<TD $VERT>$RUN</TD>"
	VISIT=$COOL 	 && [ "`grep VisIt:OK $CR`" != "" ] 	  && RUN=`$TRUST_Awk -F= '/VisIt=/ {print $2}' $CR` && VISIT="<TD `[ ${RUN#PAR} != $RUN ] && echo $VERT`>$RUN</TD>"
	ATELIER=$STRICT  && [ "`grep ATELIER=OK $CR`" != "" ] 	  && ATELIER="<TD $VERT>OK</TD>" && [ "$machine_cible" = 1 ] && let portabilite_atelier=$portabilite_atelier+1
	ASSERT=$STRICT   && [ "`grep ASSERT=OK $CR`" != "" ] 	  && ASSERT="<TD $VERT>OK</TD>"	 && [ "$machine_cible" = 1 ] && let portabilite_assert=$portabilite_assert+1
	BALTIK=$STRICT 	 && [ "`grep BALTIK=OK $CR`" != "" ] 	  && BALTIK="<TD $VERT>OK</TD>"  && [ "$machine_cible" = 1 ] && let portabilite_baltik=$portabilite_baltik+1
	[ "`grep BALTIK=NOT $CR`" != "" ] && BALTIK="<TD $BLANC>NOT</TD>"
	# Si certains elements sont disabled au configure:
	NOT="<TD $BLANC>NOT</TD>"
	[ "`grep 'Disabling PETSC' $CR`" != "" ] 	&& [ "`grep PETSC=KO $CR`" != "" ] 	 && PETSC=$NOT
	[ "`grep 'configure called with options' $CR | grep ' -disable-petsc'`" != "" ] 	&& [ "`grep PETSC=KO $CR`" != "" ] 	 && PETSC=$NOT
	[ "`grep 'Disabling MPI' $CR`" != "" ] 		&& [ "`grep ICoCo:OK $CR`" = "" ] 	 && ICOCO=$NOT	
	[ "`grep 'configure called with options' $CR | grep ' -disable-mpi'`" != "" ] 		&& [ "`grep ICoCo:OK $CR`" = "" ] 	 && ICOCO=$NOT	
	[ "`grep 'Disabling GMSH' $CR`" != "" ]         && [ "`grep Gmsh:OK $CR`" = "" ] 	 && GMSH=$NOT	
	[ "`grep 'configure called with options' $CR | grep ' -disable-gmsh'`" != "" ]         && [ "`grep Gmsh:OK $CR`" = "" ] 	 && GMSH=$NOT
	[ "`grep 'Disabling VISIT' $CR`" != "" ]        && [ "`grep VisIt:OK $CR`" = "" ] 	 && VISIT=$NOT
	[ "`grep 'configure called with options' $CR | grep ' -without-visit'`" != "" ]	&& [ "`grep VisIt:OK $CR`" = "" ] 	 && VISIT=$NOT
	[ "`grep 'Disabling PLOT2D' $CR`" != "" ]       && [ "`grep IHM:OK $CR`" = "" ] 	 && PLOT2D=$NOT	
	[ "`grep 'configure called with options' $CR | grep ' -disable-plot2d'`" != "" ]       && [ "`grep IHM:OK $CR`" = "" ] 	 && PLOT2D=$NOT
	# On compte le nombre de machines cibles selon le type de tests
	if [ "$machine_cible" = 1 ]
	then
	   [ "`grep BALTIK= $CR`" != "" ]  && let nb_machine_baltik_cible=$nb_machine_baltik_cible+1
	   echo " step Baltik: total nb file "$portabilite_baltik" "$nb_machine_baltik_cible" "$CR
	   [ "`grep ATELIER= $CR`" != "" ] && let nb_machine_atelier_cible=$nb_machine_atelier_cible+1
	   echo " step atelier: total nb file "$portabilite_atelier" "$nb_machine_atelier_cible" "$CR
	   [ "`grep ASSERT= $CR`" != "" ] && let nb_machine_assert_cible=$nb_machine_assert_cible+1
	   echo " step assert: total nb file "$portabilite_assert" "$nb_machine_assert_cible" "$CR
	fi
	FIN="`$TRUST_Awk -v rouge=$ROUGE 'BEGIN {date="<TD>empty CR</TD>"} /Start the update/ {date="<TD "rouge">killed?</TD>"} /End of update script/ {date="<TD>"$NF"</TD>"} END {print date}' $CR`"	
	tests_html=$TRUST_ROOT/../$MODULE/exec/.tests_$EXEC.html
	[ $HOST != $TRUST_HOST_ADMIN ] && tests_html=$PERF
	CR=`basename $CR`
        echo "
<TR>
$TD<A HREF="$CR">$HOST</A>$FTD
$TD$nb_procs$FTD
$TD$ram$FTD
$TD$cache$FTD
$TD$freq$FTD
$TD$GPU$FTD
$FIN
$TD$os$FTD
$TD$TRUST_CC$FTD
$TD$MPI$FTD
$TD$executable$FTD
<TD $COL1><A HREF="compile_$NOM.log">$comp</A>$FTD
$PETSC
$MED
$MEDCOUPL
$LATATOOLS
$PLOT2D
$ICOCO
$TRIOXDATA
$GNUPLOT
$GMSH
$VISIT
$runfich
$ATELIER
$testgrind
$ASSERT
$BALTIK
<TD $COL2><A HREF="`basename $tests_html`">$taux</A>$FTD
$cpu3d$FTD
$bench
</TR>" >> $NUIT2
      [ "$os" != "" ] && echo "<BR><LI>"$os >> /tmp/os
      [ "$TRUST_CC" != "" ] && echo "<BR><LI>"$TRUST_CC >> /tmp/CC
      done
      if [ ${#file} = 0 ]
      then
        # CR non vide et pas de logs -> le configure a echoue
        TD_CR=$TD && [ $run = 1 ] && TD_CR="<TD $ROUGE>"
        echo "
<TR>
$TD_CR<A HREF="$CR">$HOST</A>$FTD
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
<TD>$vide</TD>
</TR>" >> $NUIT2
     fi
   done
   sort -u /tmp/os > $REP_NUIT/os
   sort -u /tmp/CC > $REP_NUIT/CC
   rm -f /tmp/os /tmp/CC
   echo "
</TABLE>
<TD></TD>
</TR>
</TABLE>" >> $NUIT2
   ###############################################
   # Calcul de la portabilite du code et affichage
   ###############################################
   port_cible_all=0
   port_atelier=0
   port_baltik=0
   port_assert=0
   port_trust=0
   [ "$nb_machine_cible" == "$nb_machine_total_cible" ] && port_cible_all=1
   [ "$nb_machine_atelier_cible" != 0 ] && port_atelier=`echo $ECHO_OPTS "scale=3\n$portabilite_atelier/$nb_machine_atelier_cible" | bc -l`
   [ "$nb_machine_baltik_cible"  != 0 ] && port_baltik=` echo $ECHO_OPTS "scale=3\n$portabilite_baltik/$nb_machine_baltik_cible" | bc -l`
   [ "$nb_machine_assert_cible"  != 0 ] && port_assert=`echo $ECHO_OPTS "scale=3\n$portabilite_assert/$nb_machine_assert_cible" | bc -l`
   [ "$nb_machine_cible" != 0 ]         && port_trust=`echo $ECHO_OPTS "scale=3\n$portabilite/$nb_machine_cible" | bc -l`
   
   #limite=`echo $ECHO_OPTS "scale=3\n1-1/2/$nb_machine_cible" | bc -l`
   limite=0.99
   mes=`echo $port_trust | $TRUST_Awk -v limite=$limite '{if ($1>limite) print "Portable version that can be livery if it is stable"}'`
   [ "$port_cible_all" = 0 ] && mes=""

   echo "Portability Components for $TRUST_VERSION version:<BR>" >> $NUIT2
   echo "<A HREF="nuit_Test_Baltik.html">TRUST</A> : TRUST test baltik portability<BR>" >> $NUIT2
   #echo "<A HREF="nuit_basic.html">Template</A> : basic baltik compilation portability<BR>" >> $NUIT2
   echo "<A HREF="nuit_equation_convection_diffusion.html">Tuto</A> : equation_convection_diffusion baltik compilation portability<BR>" >> $NUIT2
   echo "<A HREF="nuit_ICoCo.html">ICoCo</A> : ICoCo baltik compilation portability<BR>" >> $NUIT2
   echo "<A HREF="nuit_triocfd.html">TrioCFD</A> : TrioCFD baltik compilation portability<BR>" >> $NUIT2
   echo "<A HREF="nuit_triomc.html">TrioMC</A> : TrioMC baltik compilation portability<BR>" >> $NUIT2
   echo "<A HREF="Maintenance/nuit_triomc.html">TrioMC-master</A> : TrioMC baltik compilation portability with TRUST-1.9.5<BR>" >> $NUIT2
   echo "<A HREF="nuit_mathys.html">MATHYS</A> : MATHYS baltik compilation portability<BR>" >> $NUIT2
   echo "<A HREF="nuit_mpcube.html">MPCube</A> : MPCube baltik compilation portability<BR>" >> $NUIT2
   echo "<A HREF="nuit_genepi3.html">GENEPI3</A> : GENEPI3 baltik compilation portability<BR>" >> $NUIT2
   #echo "<A HREF="nuit_pxp.html">PAREX+</A> : PAREX+ baltik compilation portability<BR>" >> $NUIT2
   echo "<A HREF="nuit_flica5.html">FLICA5</A> : FLICA5 baltik compilation portability<BR>" >> $NUIT2
   echo "<A HREF="Maintenance/nuit_flica5.html">FLICA5-master</A> : FLICA5-master baltik compilation portability with TRUST-1.9.5<BR>" >> $NUIT2
   echo "<A HREF="nuit_module3D.html">C3D</A> : cathare3/module3D baltik compilation portability<BR>" >> $NUIT2
   echo "<A HREF="Maintenance/nuit_module3D.html">C3D-advance</A> : cathare3/module3D advance baltik compilation portability with TRUST-1.9.5<BR>" >> $NUIT2
   echo "<A HREF="nuit_sides.html">SIDES</A> : SIDES baltik compilation portability<BR>" >> $NUIT2
   echo "<A HREF="nuit_scorpio.html">SCORPIO</A> : SCORPIO baltik compilation portability<BR>" >> $NUIT2
   echo "<A HREF="nuit_sympy_to_TRUST.html">STT</A> : sympy_to_TRUST baltik compilation portability<BR>" >> $NUIT2
   echo "<A HREF="nuit_pemfc.html">PEMFC</A> : PEMFC baltik compilation portability<BR>" >> $NUIT2
   echo "<A HREF="nuit_TRUST_NK.html">TRUST_NK</A> : TRUST_NK baltik compilation portability<BR>" >> $NUIT2
   #echo "Release criteria of the $TRUST_VERSION version:<BR>" >> $NUIT2
   echo "$port_cible_all : Total number portability ( $nb_machine_cible = $nb_machine_total_cible )<BR>" >> $NUIT2
   echo "$port_trust : $MODULE portability ( $portabilite/$nb_machine_cible > $limite ) $mes<BR>" >> $NUIT2
   echo "$port_atelier : $MODULE atelier compilation ( $portabilite_atelier/$nb_machine_atelier_cible )<BR>" >> $NUIT2
   echo "$port_baltik : Baltik portability with $MODULE ( $portabilite_baltik/$nb_machine_baltik_cible )<BR>" >> $NUIT2
   echo "$port_assert : Compilation assert test ( $portabilite_assert/$nb_machine_assert_cible )<BR>" >> $NUIT2
done
echo "*********************************************************************"

echo "</CENTER>
</BODY>
</HTML>" >> $NUIT2
#########################
# Copie sur $TRUST_FTP #
#########################
[ "$1" != "" ] && exit
# Deplacer dans envoie_ftp_cea_fr pour ne pas bloquer lance_test_nuit
#. connect_ftp
#cd $REP_NUIT
#cp_ftp $NUIT $SECRET/NUIT
#cd $TRUST_ROOT/exec
#cp_ftp .tests* $SECRET/NUIT
#cd $REP_NUIT
#cp_ftp compile_* PERF_* CR_* $SECRET/NUIT
#
NUIT=ftp://$TRUST_FTP/$SECRET/NUIT/`basename $NUIT`
cd $TRUST_ROOT 
##############################
# Fin boucle sur les modules #
##############################
[ ${#binaire} = 0 ] && $TRUST_WEBBROWSER $NUIT

#!/bin/bash
# Test d'installation d'une version specifie par parametre
echo "Usage: `basename $0` package.tar.gz [-remote hostname]"
if [ ${#1} != 0 ] && [ -f $1 ]
then
   if [ ${1#/} != $1 ]
   then
      version_arch=$1		# Chemin absolu
   else
      version_arch=`pwd`/$1	# Chemin relatif
   fi
   paquet=`basename $version_arch`
   version=`echo $paquet | sed 's/TRUST-//' | sed 's/.tar.gz//'` # version stable ou beta
   version=`echo ${version%-*}` # si version extraite
   echo "package: "$paquet
   echo "version: "$version
else
   echo "Installation KO! cannot access $1: No such file"
   exit -1
fi

machine=localhost && [ "$2" = "-remote" ] && [ "$3" != "" ] && machine=$3
WORKDIR=`ssh_ -o BatchMode=yes $machine -n 'if [ "\$WORKDIR" = "" ]; then echo \$HOME;else echo \$WORKDIR;fi'`
cible=$WORKDIR/simule_install_${paquet%.tar.gz}
install_log=$cible/../Installer_TRUST.log
ssh_ $machine -n pwd 1>/dev/null 2>&1
if [ $? = 0 ]
then
  echo "Begin of the installation simulation of $version_arch at "`date '+%H:%M:%S'` on $machine:$cible
  # Add -X to ssh ?
  ssh -o ConnectTimeout=10 -o BatchMode=yes $machine -n 'rm -r -f '$cible';mkdir '$cible''
  scp -o ConnectTimeout=10 -o BatchMode=yes $version_arch $machine:$cible/.
  ssh -o ConnectTimeout=10 -o BatchMode=yes $machine -n '
  cd '$cible';
  tar xfz '$paquet';
  rm -f '$paquet';
  export TRUST_VERSION='$version';
  ./TRUST-'$version'/bin/Installer_TRUST 1>'$install_log' 2>&1;
  if [ $? = 0 ] && [ "`grep "^BUILD_EXEC" '$install_log' | grep "KO" 2>/dev/null`" = "" ] && [ "`grep "^BUILD_TOOLS" '$install_log' | grep "KO" 2>/dev/null`" = "" ]
  then
     echo "Installation OK!"
     echo " "
     cat '$install_log'
     rm -r -f '$cible'
     exit 0
  else
     echo "Installation KO! See '$install_log'"
     echo " "
     cat '$install_log'
     exit 1
  fi;
'
  erreur=$?
  echo " "
  echo "End of the installation simulation of $version_arch at "`date '+%H:%M:%S'` on $machine:$cible
else
  echo "Installation KO! $machine not accessible for the installation simulation of $version_arch..."
  exit 1
fi
exit $erreur

#!/bin/bash
# TRUST installation script

########################################################
check_prerequis()
{
###########################################################
# Les outils indispensables parfois pas installes sur Linux
###########################################################
# Archive linux_install_tools_`uname -m`.tgz contains binaries for bc, ed, uuencode and uudecode commands.
if [ "`uname -s`" = Linux ] && [ -f $TRUST_ROOT/bin/linux_install_tools_`uname -m`.tgz ]
then
    mkdir -p $TRUST_ROOT/exec/utils
    cd $TRUST_ROOT/exec/utils/
    mkdir -p bin 2>/dev/null
    (cd bin;tar xfz $TRUST_ROOT/bin/linux_install_tools_`uname -m`.tgz)
    touch makefile
    for command in `cd bin;\ls`
    do
       $command --help 1>/dev/null 2>&1
       [ $? = 0 ] && [ "`whereis $command | cut -d' ' -f 2`" != "$TRUST_ROOT/exec/utils/bin/$command" ] && rm -f bin/$command
    done
    rm -f makefile
    # Si toutes les commandes existent on efface le repertoire
    # sinon on l'ajoute au PATH
    if [ "`\ls bin`" = "" ]
    then
       rmdir bin
    else
       export PATH=$PATH:$TRUST_ROOT/exec/utils/bin
    fi
fi
# Command patch
patch -version 1>/dev/null 2>&1
[ $? != 0 ] && echo "Command patch non available, you should install it." | tee -a $TRUST_ROOT/NON_INSTALLED

# The previous test checks if 'ed' and 'bc' commands exist. if it doesn't, we add its binary to path. Is it still necessay to keep both in list_prerequis?
list_prerequis="bc ed sed awk unzip"
[ `uname -s` = Darwin ] && list_prerequis="bc sed awk unzip"
export PATH=$PATH:$TRUST_ROOT/exec/utils/bin
for p in $list_prerequis
do
  pp=""
  opt="--help"
  [ "$p" = "awk" ] && opt="'BEGIN { print "ok" }'"
  cmd="$p "$opt
  if  [ "`eval $cmd 1>/dev/null 2>&1;echo $?`" != 0 ] || [ "$force_utils" = "1" ]
  then
    echo "You need $p installed. Try to install it"
    if [ "$p" = "ed" ] ; then # lzip is only needed to unzip ed package. if we do not need ed, we will not install lzip
      if  [ "`lzip --help 1>/dev/null 2>&1;echo $?`" != 0 ]
      then
        pp="lzip"
        echo "You need $pp installed before installing the provided $p. Try to install it"
        dest2=$TRUST_ROOT/tmp_$pp
        q=$pp
        rm -rf $dest2
        mkdir $dest2
        cd $dest2
        archive="$TRUST_ROOT/externalpackages/utils/$q*.tar.*"
        arch=`basename $archive`
        tar zxf $TRUST_ROOT/externalpackages/utils/$arch
        cd *$q*
        ./configure --prefix=$TRUST_ROOT/exec/utils >config.log 2>&1  && make >make.log 2>&1  && make install > install.log 2>&1
        [ $? -eq 0 ] && echo "lzip install completed"
        export PATH=$PATH:$TRUST_ROOT/exec/utils/bin
        if [ "`lzip --help 1>/dev/null 2>&1;echo $?`" != 0 ]
        then
           echo "Error while installing lzip. See informations in $dest2 directory."
           echo "Error while installing lzip." >> $TRUST_ROOT/NON_INSTALLED
           echo "See logfile in $dest2" >> $TRUST_ROOT/NON_INSTALLED
           echo "---" >> $TRUST_ROOT/NON_INSTALLED
        else
          rm -rf $dest2
        fi
      fi
    fi
    dest=$TRUST_ROOT/tmp_$p
    q=$p
    [ "$p" = "awk" ] && q=gawk
    rm -rf $dest
    mkdir $dest
    cd $dest
    archive="$TRUST_ROOT/externalpackages/utils/$q*.tar.*"
    arch=`basename $archive`
    if [ ${arch##*.} == 'gz' ] 
    then
        tar zxf $TRUST_ROOT/externalpackages/utils/$arch
    elif [ ${arch##*.} == 'lz' ] 
    then
        tar --lzip -xf $TRUST_ROOT/externalpackages/utils/$arch
    elif [ ${arch##*.} == 'xz' ] 
    then
        tar Jxf $TRUST_ROOT/externalpackages/utils/$arch
    else
        echo "Error about extension of the archive $archive"
    fi
    cd *$q*
    ./configure --prefix=$TRUST_ROOT/exec/utils >config.log 2>&1  && make >make.log 2>&1  && make install > install.log 2>&1
    [ $? -eq 0 ] && echo "$p install completed"
    export PATH=$PATH:$TRUST_ROOT/exec/utils/bin
    if [ "`$p --help 1>/dev/null 2>&1;echo $?`" != 0 ]
    then
       echo "Error while installing $p. See informations in $dest directory."
       echo "Error while installing $p." >> $TRUST_ROOT/NON_INSTALLED
       echo "See logfile in $dest/" >> $TRUST_ROOT/NON_INSTALLED
       echo "---" >> $TRUST_ROOT/NON_INSTALLED
    else
      rm -rf $dest
    fi
  fi
  opt=""
done
}

########################################################
OK()
{
   if [ $1 = 0 ]
   then
      echo $ECHO_OPTS "OK!"
   else
      echo $ECHO_OPTS "Error !"
      at=$TRUST_MAIL && [ ${#at} = 0 ] && at=trust@cea.fr
      echo $ECHO_OPTS "See $LOG and contact support at $at"
      export error_exit=1
   fi 
}

########################################################
gunzip_()
{
   gunzip -c $1 > ${1%.gz}
   rm -f $1
}

########################################################
# Fonction pour activer les droits d'utilisation/lecture
change_droits()
{
  # On donne les droits d'ecriture a user
  # On donne les droits de lecture a toute le monde sauf hors intra CEA
  if [ "`grep intra.cea.fr /etc/* 2>/dev/null`" != "" ]
  then
     chmod -R u+w,gou+r . 1>/dev/null 2>&1
  else
     chmod -R u+w,gu+r,o-rwx . 1>/dev/null 2>&1
  fi
}

########################################################
teste_binaries()
{
   echo $ECHO_OPTS "\nTest of running binary $exec ..." | tee -a $LOG
   if [ -f $TRUST_TESTS/Reference/Kernel/Kernel.data ]
   then
      echo Kernel | lance_test -nomail 1>>$LOG 2>&1
      err=$?
      if [ "$1" = -print ]
      then
	 OK $err | tee -a $LOG
      else
	 echo "Kernel test: $err" | tee -a $LOG
      fi
   else
      # Teste les binaires en sequentiel et parallele
      cd $TRUST_TMP
      echo $ECHO_OPTS "DoubleVect bidon" > test.data
      if [ ${#Mpirun} != 0 ] && [ -f $Mpirun ]
      then
	 ############################
	 # Test de $exec en parallele
	 ############################
	 echo $ECHO_OPTS "Parallel run of $exec ...\c" | tee -a $LOG
	 trust test 2 1>>$LOG 2>&1
      fi
      err=$?
      if [ "$1" = -print ]
      then
	 OK $err | tee -a $LOG
      else
	 echo "Parallel test: $err" | tee -a $LOG
      fi
      #############################
      # Test de $exec en sequentiel
      #############################
      echo $ECHO_OPTS "Sequential run of $exec ...\c" | tee -a $LOG
      trust test 1>>$LOG 2>&1
      err=$?
      if [ "$1" = -print ]
      then
	 OK $err | tee -a $LOG
      else
	 echo "Sequential test: $err" | tee -a $LOG
      fi
   fi
   echo $ECHO_OPTS "End of test of running binary." | tee -a $LOG
}

########################################################
teste_atelier()
{
   if [ -f $TRUST_ROOT/src/MAIN/MAIN.cpp ]
   then
      echo $ECHO_OPTS "\nTesting TRUST development capacities..." | tee -a $LOG
      export rep_dev=$TRUST_TMP/atelier_test
      rm -r -f $rep_dev
      mkdir $rep_dev
      cp $TRUST_ROOT/src/MAIN/MAIN.cpp $rep_dev/.
      echo >> $rep_dev/MAIN.cpp
      Makeatelier.sccs -2 1>>atelier.log 2>&1
      [ ! -f $rep_dev/exec_opt/TRUST$COMM"_opt" ] && err=1
      if [ "$1" = -print ]
      then
	 OK $err | tee -a $LOG
      else
	 echo "Test: $err" | tee -a $LOG
      fi
      echo $ECHO_OPTS "End of testing TRUST development capacities." | tee -a $LOG
   fi
}
#
#
#
########################################################
# First lines used by configure (call with bin/Installer_TRUST -check_prerequis)
# The check of prerequisites is coded once at the top of Installer_TRUST
if [ "$1" = -check_prerequis ]
then
   check_prerequis
   exit 0
fi

ROOT=`pwd`
export ROOT
LOG=$ROOT/LOG_TRUST
cat /dev/null > $LOG
[ "$TRUST_VERSION" = "" ] && echo TRUST_VERSION must be defined | tee -a $LOG && exit 1
############################################
# Debut du script d'installation de TRUST #
############################################
echo "Usage: `basename $0` [options]" | tee -a $LOG 
echo "Options:" | tee -a $LOG
   echo "  -help                 List options" | tee -a $LOG
if [ -f KSH/wget_ ] || [ -f TRUST-$TRUST_VERSION/bin/KSH/wget_ ]
then
   # Version already installed
   echo "  -configure-options \"OPT1 OPT2 ..\"           (For advanced users) The installation is made with ./configure OPT1 OPT2 " | tee -a $LOG
else
   # First install
   echo "  -configure            (For advanced users) The installation will stop at one moment and should be finished by configure/make" | tee -a $LOG  
fi
echo "====================================================================="

# Verification immediate des prerequis:
TRUST_ROOT=""
if [ -d $ROOT/TRUST-$TRUST_VERSION ]
then
   TRUST_ROOT=$ROOT/TRUST-$TRUST_VERSION && export TRUST_ROOT
else
   echo "The TRUST-$TRUST_VERSION directory must exist on $ROOT!" | tee -a $LOG
   exit -1
fi
check_prerequis
#
configure=0
opt=""
export error_exit=0
while [ "$1" != "" ]
do
   [ "$1" = -help ] && exit 6 # error not installed
   [ "$1" = -configure ] && configure=1 && shift && continue
   [ "$1" = -configure-options ] && opt="$2" && shift && shift && continue
   
   if [ "$1" = -patch ]
   then
      echo>$LOG
      if [ -d $TRUST_ROOT ]
      then
         source $TRUST_ROOT/env_TRUST.sh 1>/dev/null
      else
         echo "TRUST environment not initialized." && exit -1
      fi
      # Connect to ftp
      . connect_ftp -no_ftp 1>/dev/null 2>&1
      # Try to download the patch
      cd `dirname $TRUST_ROOT`
      patch=Patch-$TRUST_VERSION.tar.gz
      echo "Try to download or find the patch $patch..." | tee -a $LOG
      wget_ ftp://$TRUST_FTP/$PUBLIC/patch/$patch 1>/dev/null 2>&1
      if [ ! -f $patch ]
      then
         echo "No connection to Internet detected. Please download the patch $patch from ftp://$TRUST_FTP/$PUBLIC/patch" | tee -a $LOG
	 echo "and put it there: `pwd`" | tee -a $LOG
	 echo "Then run again, $0 -patch" | tee -a $LOG
	 exit -1
      fi
      # If found apply it
      echo "Applying the patch:" | tee -a $LOG
      patch=`pwd`/$patch
      cd $TRUST_ROOT
      tar tvf $patch && tar xvfz $patch | xargs chmod +w
      ./configure && source env_TRUST.sh 1>/dev/null && make
      change_droits
      cd `dirname $TRUST_ROOT`
      rm -f $patch
      echo>$LOG
      exit $?
   fi
   echo "Unknown option : $1"  | tee -a $LOG && exit -1
done

###########
# ECHO_OPTS
###########
[ "`echo -e`" != "-e" ] && ECHO_OPTS="-e"

###########################################################
# Les outils indispensables parfois pas installes sur Linux
###########################################################
if [ "`uname -s`" = Linux ] && [ -f linux_install_tools_`uname -m`.tgz ]
then
   mkdir -p bin 2>/dev/null
   (cd bin;tar xfz ../linux_install_tools_`uname -m`.tgz)
   touch makefile
   for command in `cd bin;\ls`
   do
      $command --help 1>/dev/null 2>&1
      [ $? = 0 ] && rm -f bin/$command
   done
   rm -f makefile
   # Si toutes les commandes existent on efface le repertoire
   # sinon on l'ajoute au PATH
   if [ "`\ls bin`" = "" ]
   then
      rmdir bin
   else
      export PATH=$PATH:`pwd`/bin
   fi
fi

[ "`id -u 2>/dev/null`" = 0 ] && echo "TRUST install as root is not recommended." | tee -a $LOG && exit -1

# Quelques verifications
# On arrete si la variable $HOME n'existe pas
if [ ${#HOME} = 0 ] || [ ! -d $HOME ]
then
   echo "The \$HOME variable is not defined or the \$HOME=$HOME directory does not exist." | tee -a $LOG
   echo "Please correct." | tee -a $LOG
   exit -1
fi
# Existence d'une version
if [ -f $TRUST_ROOT/TRUST.tar.gz ]
then
   if [ -f .DATE ] || [ -f $TRUST_ROOT/.DATE ]
   then
      echo "Warning, a version is already installed under $TRUST_ROOT." | tee -a $LOG
      echo "Install aborted." | tee -a $LOG
      exit -1
   fi
fi

echo "If install fails, please send the $LOG file to TRUST support." | tee -a $LOG


#########################################
# Regarde la place disponible et previent
#########################################
cd $TRUST_ROOT
if [ "$TRUST_DISABLE_CHECKS" = 0 ]
then
   echo | tee -a $LOG
   echo "The disc is checked:" | tee -a $LOG
   # Check disk space:
   export LANG=C
   chmod +w $TRUST_ROOT/bin/KSH/dd.ksh
   $TRUST_ROOT/bin/KSH/dd.ksh -space
   if [ $? != 0 ]
   then
      $TRUST_ROOT/bin/KSH/dd.ksh -space 1>>$LOG 2>&1
      exit -1
   fi
   # Check disk speed:
   $TRUST_ROOT/bin/KSH/dd.ksh -speed
   if [ $? != 0 ]
   then
      $TRUST_ROOT/bin/KSH/dd.ksh -speed 1>>$LOG 2>&1
      # Disc too slow on SESI /soft so we bypass:
      [ "`echo $HOME | grep /soft/`" = "" ] && exit -1
   fi
fi

#####################
# Installe les autres
# modules du Noyau
#####################
liste=`ls *.tar.gz 2>/dev/null | grep -v exec | grep -v lib 2>/dev/null`
if [ ${#liste} != 0 ]
then
   echo | tee -a $LOG
   for rep in $liste
   do
         rep=${rep%.tar.gz}
         echo $ECHO_OPTS "Installation of $rep ...\c" | tee -a $LOG
         gunzip_ $rep.tar.gz
         tar xf $rep.tar 1>>$LOG 2>&1
         OK $? | tee -a $LOG
         rm -f $rep.tar
   done
fi
cd $TRUST_ROOT
  
##################################################
# Regarde s'il y'a un patch disponible a appliquer
##################################################
if [ -f ../patch ]  # A revoir... avec TRUST ???
then
   echo | tee -a $LOG
   # On met en ecriture tous les fichiers avant d'appliquer le patch:
   chmod -R u+w . 1>/dev/null 2>&1
   echo "Patch detected and applied..." | tee -a $LOG
   tar xvf ../patch
fi
change_droits

###############################
# Fin installation si -configure
###############################
if [ "$configure" = 1 ]
then
   echo | tee -a $LOG
   echo "The installation is now stopped and should be finished:" | tee -a $LOG
   echo "Look at the configure options:" | tee -a $LOG
   echo "cd TRUST-$TRUST_VERSION" | tee -a $LOG
   echo "./configure -help" | tee -a $LOG
   echo "Run the configure and add desired options:" | tee -a $LOG
   echo "./configure ..." | tee -a $LOG
   echo "Then check/modify the environment values in the \$TRUST_ROOT/env/machine.env created." | tee -a $LOG
   echo "Initialize the environment:" | tee -a $LOG
   echo "source env_TRUST.sh" | tee -a $LOG
   echo "Compile the code:" | tee -a $LOG
   echo "make" | tee -a $LOG
   exit 0
fi 

########################
# Configuration du Noyau
########################
if [ ! -f .rep ]
then
   echo $ECHO_OPTS "\nConfigure the environment. Please wait..." | tee -a $LOG
   cd $TRUST_ROOT
   set -o pipefail
   if  [ -f configure.log ] &&  [ "$opt" = "" ]
       then
       echo "re-configure with old options" | tee -a $LOG
       cat configure.log >> $LOG
       chmod +x configure.log
       
       ./configure.log $opt >> $LOG 2>&1
      configure_err=$?
   else
       ./configure $opt >> $LOG 2>&1
       configure_err=$?
   fi
   OK $configure_err | tee -a $LOG
   [ $configure_err != 0 ] && exit -1
   cd $TRUST_ROOT
fi
echo | tee -a $LOG
source $TRUST_ROOT/env_TRUST.sh

# Message de detection :
[ ${#TRUST_CC} = 0 ] && echo "Warning : this script did not find C++ compiler : you CANNOT compile TRUST" | tee -a $LOG
[ ${#TRUST_F77} = 0 ] && echo "Warning : this script did not find fortran compiler : you CANNOT compile TRUST" | tee -a $LOG

################################################
# Tests des executables TRUST livres #
################################################
echo | tee -a $LOG
codes="$TRUST_ROOT/exec/TRUST"

for code in $codes
do
   #####################################
   # Installe les binaires et librairies
   #####################################
   cd `dirname $code`/..
   liste=`ls exec.$TRUST_ARCH.tar.gz 2>/dev/null`
   if [ ${#liste} != 0 ]
   then
      for rep in $liste
      do 
         rep=${rep%.tar.gz}
         echo $ECHO_OPTS "Installation of $rep ...\c" | tee -a $LOG
         gunzip_ $rep.tar.gz
         tar xf $rep.tar 1>>$LOG 2>&1
         OK $? | tee -a $LOG
         echo | tee -a $LOG
         rm -f $rep.tar
      done
   fi
   # Efface les autres binaires
   rm -f exec.*.tar.gz
   # Initialise le code
   cd `dirname $code`/..
   [ -f env_TRUST.sh ] && source ./env_TRUST.sh 1>>$LOG 2>&1
   cd `dirname $code`/../bin
   exec=`ls $code*opt* 2>/dev/null`
   if [ ${#exec} = 0 ]
   then
      err=1
      echo $ECHO_OPTS "\n$code binary is not included in the package." | tee -a $LOG
   else
      teste_binaries
   fi
   
   ##############################################
   # Test des librairies livrees par un atelier #
   ############################################## 
   teste_atelier
      
   ########################################################
   # Recompilation eventuelle si la version a des sources #
   ########################################################
   if [ $err != 0 ] && [ -f $TRUST_ROOT/src/MAIN/MAIN.cpp ]
   then
      echo $ECHO_OPTS "\nCode recompilation..." | tee -a $LOG
      echo $ECHO_OPTS "`basename $code` application must be recompiled according to the previous tests." | tee -a $LOG
      
      [ ${#TRUST_CC} = 0 ] && echo "Warning : this script did not find C++ compiler : you CANNOT compile TRUST. Please install a C++ compiler." | tee -a $LOG && exit -1
      [ ${#TRUST_F77} = 0 ] && echo "Warning : this script did not find fortran compiler : you CANNOT compile TRUST. Please install a F77 compiler." | tee -a $LOG && exit -1
      OPT="_opt"
      # Important de faire menage car certaines librairies ne seront pas recompilees sinon (pb Linux-Intel->Linux-Compaq)!
      cd `dirname $code`/..
      echo "make clean in TRUST directories..." | tee -a $LOG
     # provisoire  make clean | tee -a $LOG
      echo $ECHO_OPTS "Compilation could take between 1 and 2 hours." | tee -a $LOG
      make >> $LOG 2>&1
      err=$?
      # Pour recuperer $exec
      cd `dirname $code`/..
      source ./env_TRUST.sh
      if [ $err != 0 ] || [ ! -f $exec ]
      then
          echo $ECHO_OPTS "It seems that the compilation failed..." | tee -a $LOG
          echo $ECHO_OPTS "Please contact TRUST support at $TRUST_MAIL" | tee -a $LOG
      else
          err=0
          teste_binaries -print         
          teste_atelier -print
      fi
      echo | tee -a $LOG
      cat `dirname $code`/../compile*.log>>$LOG
      echo $ECHO_OPTS "End of code recompilation." | tee -a $LOG
   else
      ##################################################################
      # Nettoyage et recompilation des outils pour meilleure portabilite
      ##################################################################
      cd $TRUST_ROOT
      echo $ECHO_OPTS "\nRecompilation..." | tee -a $LOG
     
      make  >> $LOG  2>&1
      echo $ECHO_OPTS "End of recompilation." | tee -a $LOG
   fi
done

##################
# End of install #
##################
clear 
echo | tee -a $LOG
grep BUILD_EXEC $LOG
grep BUILD_TOOLS $LOG
echo "***************" | tee -a $LOG
echo "END OF INSTALL." | tee -a $LOG
echo "***************" | tee -a $LOG
echo | tee -a $LOG
echo "**************************" | tee -a $LOG
echo "HOW TO INITIALIZE TRUST ?:" | tee -a $LOG
echo "**************************" | tee -a $LOG
echo "source $TRUST_ROOT/env_TRUST.sh" | tee -a $LOG
cd $ROOT
echo  | tee -a $LOG
echo "********************" | tee -a $LOG
echo "HOW TO TEST TRUST ?" | tee -a $LOG
echo "********************" | tee -a $LOG
#echo $ECHO_OPTS "[Fast] Run the command 'trust -check VAHL_DAVIS', if you want to check the TRUST binary on a single test.\n" | tee -a $LOG
echo $ECHO_OPTS "[Fast] Run the command 'trust -check Kernel', if you want to check the TRUST binary on a single test.\n" | tee -a $LOG
echo $ECHO_OPTS "[Long] Run the command 'trust -check all', if you want to check the TRUST binary on test cases. It may take several hours.\n" | tee -a $LOG
echo $ECHO_OPTS "[Fast using ctest] Run the command 'trust -ctest all', if you want to check the TRUST binary using ctest (not adapted for clusters)." | tee -a $LOG
echo  | tee -a $LOG
echo "************************" | tee -a $LOG
echo "HOW TO RE-BUILD TRUST ?" | tee -a $LOG
echo "************************" | tee -a $LOG
echo $ECHO_OPTS "If you want to build again TRUST, run:" | tee -a $LOG
echo $ECHO_OPTS "cd $TRUST_ROOT" | tee -a $LOG
echo $ECHO_OPTS "cat configure.log # To see previously used configure options" | tee -a $LOG
echo $ECHO_OPTS "./configure -help   # Then check and/or change the detected values into the $TRUST_ROOT/env/machine.env file" | tee -a $LOG
echo $ECHO_OPTS "./configure \$OPTIONS" | tee -a $LOG
echo $ECHO_OPTS "source env_TRUST.sh # Initialize the new environment" | tee -a $LOG
echo $ECHO_OPTS "make     # rebuild TRUST" | tee -a $LOG
echo | tee -a $LOG
echo "*******************" | tee -a $LOG
echo "HOW TO USE TRUST ?" | tee -a $LOG
echo "*******************" | tee -a $LOG
echo "Initialize TRUST environment with:" | tee -a $LOG
echo "source $TRUST_ROOT/env_TRUST.sh" | tee -a $LOG
[ -f $TRUST_ROOT/doc/TRUST/TRUST_tutorial.pdf ] && echo "And follow the tutorial $TRUST_ROOT/doc/TRUST/TRUST_tutorial.pdf" | tee -a $LOG
echo "You can contact us at $TRUST_MAIL for a training session of 2 days." | tee -a $LOG
echo " " | tee -a $LOG

###################################
# Efface des fichiers temporaires :
###################################
rm -f .path .rep .file
exit $error_exit

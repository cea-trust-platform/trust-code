#!/bin/bash
# Exit immediately if a pipeline returns non zero return code
set -e
# Compilation multi-repertoire et multi-plateforme de TRUST
# OK
find_()
{
   (
   find . -maxdepth 1 -name '*'.$1 2>/dev/null
   if [ $? != 0 ] # maxdepth non supporte
   then
      \ls [A-N]*.$1 2>/dev/null
      \ls [O-Z]*.$1 2>/dev/null
      \ls [a-z]*.$1 2>/dev/null
   fi
   ) | sed s/\\\.\\\///g
}
OK()
{
   new_time=`date "+%s"`
   e="error" && [ $1 = 0 ] && e="OK"
   echo $e" "`echo $new_time $time| awk '// {time=$1-$2;mn=int(time/60);s=time%60;if (time>0) print "in "mn"mn"s"s"}'`
   time=$new_time
}

CHOIX_MAKE()
{
   # Partition de compilation
   BATCH="" #&& [ "${HOST#jean-zay}" != $HOST ] && BATCH="srun -p compil -A fej@cpu -t 10:00:00 -c 10 --hint=nomultithread "
   #MAKE=$BATCH"make VERBOSE=1 "
   MAKE=$BATCH"make"
   if [ ${#CLEAN} = 0 ] && [ $1 = "multiple" ]
   then
      [ "$MAKE_NB_CPUS" != 0 ] && MAKE=$BATCH$TRUST_MAKE
   fi
}

make_tools()
{
   CHOIX_MAKE simple
   echo "==========================="
   echo "$MESSAGE tools and plugins:"
   echo "==========================="
   reps="Outils/lance_test_seq_par"
   reps=$reps" Outils/lata_tools"
   [ "$TRUST_DISABLE_MPI" = 0 ] && reps=$reps" Outils/ICoCo"
   [ "$TRUST_DISABLE_VALGRIND" != 1 ] && reps=$reps" Outils/valgrind"
   [ "$TRUST_DISABLE_TRUSTPY" != 1 ] && reps=$reps" Outils/trustpy"
   reps=$reps" Outils/TRIOXDATA"
   [ "$TRUST_DISABLE_DOXYGEN" != 1 ] && reps=$reps" Outils/doxygen"
   [ "$TRUST_WITHOUT_DOC" != 1 ] && reps=$reps" doc"
   [ "$TRUST_DISABLE_GNUPLOT" != 1 ] && reps=$reps" Outils/gnuplot"
   [ "$TRUST_DISABLE_GMSH" != 1 ] && reps=$reps" Outils/Gmsh"
   [ "$TRUST_WITHOUT_VISIT" != 1 ] && reps=$reps" Outils/VisIt"
   [ "$TRUST_INT64" = 0 ] && [ "$TRUST_DISABLE_PLOT2D" != 1 ] && reps=$reps" Outils/IHM"
   err_tool=0
   for rep in $reps
   do
      if [ -d $TRUST_ROOT/$rep ] && [ "`ls $TRUST_ROOT/$rep/*akefile 2>/dev/null`" != "" ]
      then
         echo>>$COMPILE
         echo "$MESSAGE tool: $rep" 1>>$COMPILE 2>&1
         \cd $TRUST_ROOT/$rep && echo $ECHO_OPTS $rep":\c " && $MAKE $CLEAN 1>>$COMPILE 2>&1
         err=$?
         OK $err
         [ $rep = Outils/IHM ] && [ $err != 0 ] && err=0 && echo "IHM is in experimetal state, so ..."
         if [ $rep = doc ] && [ $err != 0 ] ; then
            err=0
            echo "doc failed to build probably due to a missing latex package. All TRUST documentation is provided with the package you downloaded."
         fi
         if [ $err != 0 ]
         then
            if [ $rep = Outils/TRIOXDATA ] && [ "$CLEAN" = clean ]
            then
               # Pour les exceptions
               err_tool=$err_tool
            else
               err_tool=1
            fi
         fi
      fi
   done
   if [ "$err_tool" = 1 ]
   then
      echo "A tool failed to build. Contact TRUST support by sending $COMPILE and $TRUST_ENV/machine.env files." && echo "BUILD_TOOLS=KO" | tee -a $COMPILE && exit -1
   else
      echo "END"
      echo >>$COMPILE
      echo "BUILD_TOOLS=OK" | tee -a $COMPILE
      echo >>$COMPILE
   fi
}

###################
# DEBUT DU SCRIPT #
###################
[ "$TRUST_ROOT" = "" ] && echo "Error. TRUST_ROOT is empty. Initialize TRUST environment." && echo "BUILD_EXEC=KO" && exit -1

if [ ! -d "$TRUST_ROOT/env" ]
then
   echo ""
   echo "Fatal error: You should configure trust before make using:"
   Num_opts_configure=`tail -1 configure.log | awk '{print NF-1}'`
   opts_configure=`tail -1 configure.log | cut -d ' ' -f 2-$Num_opts_configure`
   echo "./configure \$OPTIONS && make # where your previous configure options are OPTIONS=$opts_configure"
   echo ""
   exit -1
fi

# if trust is configured with -enable-petsc-debug option and the user needs only $exec_debug (via make debug)
# uncomment the following two lines and lines containing only_make_debug_with_petsc_debug in $TRUST_ROOT/ThirdPart/src/LIBPETSC/install
# Caution: if the user do: "make debug gcov" for example, this cannot work since the optimized build of petsc is not constructed.
# only_make_debug_with_petsc_debug=0
# [ "`echo $cibles | grep opt`" = "" ] && [ "`echo $cibles | grep debug`" != "" ] && export only_make_debug_with_petsc_debug=1

# Options
depend=0
[ $# = 1 ] && [ $1 = "depend" ] && depend=1
[ $# = 2 ] && [ $2 = "depend" ] && depend=1
monodir=0 && [ $# -gt 0 ] && [ $1 = "monodir" ] && monodir=2
[ $# -gt 0 ] && [ $1 = "monodir_cmake" ] && monodir=2
# OPT="_semi_opt" if using an SCM <=> Developer version
COMPIL_DYN=OFF
# [ $monodir = 0 ] && [ "$TRUST_SCM" = 1 ] && OPT="_semi_opt" &&  COMPIL_DYN=ON
[ $monodir = 0 ] && [ "$TRUST_SCM" = 1 ] && COMPIL_DYN=ON
monodir=2

rm -f $CCACHE_LOGFILE
CLEAN="" && MESSAGE="Building" && [ "${1%clean}" != "$1" ] && CLEAN=clean && MESSAGE="Cleaning" && shift

# Creation eventuelle des repertoires exec et lib :
[ ! -d $TRUST_ROOT/exec ] && mkdir $TRUST_ROOT/exec
[ ! -d $TRUST_ROOT/lib ] && mkdir $TRUST_ROOT/lib
[ ! -d $TRUST_ROOT/build ] && mkdir $TRUST_ROOT/build

COMPILE=$TRUST_ROOT/compile_TRUST$COMM$OPT"_"$TRUST_ARCH"_"$HOST_BUILD".log"
if [ -f $COMPILE ]
then
   # on recupere la date du dernier COMPILE
   year=`head -1 $COMPILE | tr -s ' ' | cut -d ' ' -f 11`
   month=`head -1 $COMPILE | tr -s ' ' | cut -d ' ' -f 7`
   day=`head -1 $COMPILE | tr -s ' ' | cut -d ' ' -f 8`
   Hh=`head -1 $COMPILE | tr -s ' ' | cut -d ' ' -f 9 | cut -d ':' -f 1`
   Mm=`head -1 $COMPILE | tr -s ' ' | cut -d ' ' -f 9 | cut -d ':' -f 2`
   Ss=`head -1 $COMPILE | tr -s ' ' | cut -d ' ' -f 9 | cut -d ':' -f 3`
   DATE=$year"_"$month"_"$day"_"$Hh"_"$Mm"_"$Ss
   # on renome le dernier fichier COMPILE existant
   mv $COMPILE $TRUST_ROOT/compile_TRUST$COMM$OPT"_"$TRUST_ARCH"_"$HOST_BUILD"_"$DATE".log"
   # Et on ne garde que les derniers:
   ls -t $TRUST_ROOT/compile_TRUST$COMM$OPT"_"$TRUST_ARCH*.log | tail -n+4 | xargs rm -f
fi
echo "TRUST compilation on $HOST the `date` ...">$COMPILE

# Creation des fichiers License pour check_license_in_file.sh
LICENSE_SRC=$TRUST_ROOT/License.txt
LICENSE=$TRUST_ROOT/build/License.txt
cp $LICENSE_SRC $LICENSE
if  [ ! -f ${LICENSE}_c  ] || [  ${LICENSE}_c -ot  ${LICENSE} ]
then
awk 'BEGIN {print ("/****************************************************************************")}
    { if ($0=="") {print ("*") } else {print ("* "$0) }}
    END    {print ("*****************************************************************************/")}' ${LICENSE}  >  ${LICENSE}_c

awk 'BEGIN {print ("#****************************************************************************")}
    { print ("# "$0)}
    END    {print ("#*****************************************************************************")}' ${LICENSE}  >  ${LICENSE}_py
fi

# Nettoyage/Reconstruction des outils uniquement
if [ "$1" = tools ]
then
   MESSAGE="Cleaning"
   CLEAN=clean
   make_tools
   MESSAGE="Compiling"
   CLEAN=""
   make_tools
   exit 0
fi

# On verifie qu'un fichier d'environnement existe
if [ ! -f $TRUST_ENV/make.$TRUST_ARCH_CC$OPT ]
then
   cd $TRUST_ENV
   new_file=make.$TRUST_ARCH_CC$OPT
   echo "Warning ! OPT=$OPT is first used."
   echo "You should change/validate a new environment file $new_file"
   echo "Then save and exit to build the code."
   for file in `ls make.$TRUST_ARCH_CC* | sort -nr`
   do
      if [ "${new_file#$file}" != "$new_file" ]
      then
          cp $file $new_file
          echo "$file seems the good template for $new_file"
          break
      fi
   done
   $TRUST_EDITOR $new_file
   cd -
fi
\cd $TRUST_ROOT

[ ${#TRUST_F77} = 0 ] && echo "No fortran compiler defined in $TRUST_F77 variable." && echo "BUILD_EXEC=KO" | tee -a $COMPILE && exit -1
[ ${#TRUST_CC} = 0 ] && echo "No C++ compiler defined in $TRUST_CC variable." && echo "BUILD_EXEC=KO" | tee -a $COMPILE && exit -1
echo "$MESSAGE of version : $TRUST_ROOT"
echo "For arch : $TRUST_ARCH_CC"
echo "\$OPT=$OPT"
echo "\$COMM=$COMM"

################################
# Creation des librairies LIB...
################################
# 13/05/05 : encore des pbs pour faire make -j 2 dans MED, Makefile mal faits ?
CHOIX_MAKE simple
echo "==================="
echo "$MESSAGE libraries:"
echo "==================="
LIBS=$TRUST_ROOT/ThirdPart/src
if [ -d $LIBS ]
then
   \cd $LIBS
   err=0
   # On compile METIS si PETSC desactive
   if [ "$TRUST_DISABLE_PETSC" = 1 ]
   then
      LIBMETIS=LIBMETIS
   else
      LIBMETIS=""
   fi
   # A chaque ajout d'une librairie pour TRUST, modifier plusieurs fichiers importants:
   # bin/mklibs pour le link
   # bin/KSH/Createcmakefile.py pour les includes de la librairie
   # env_src/make.all_includes.TRUST pour les includes aussi
   LIBLAPACK="" && [ ${#TRUST_BLAS_LAPACK} = 0 ] && LIBLAPACK="LIBLAPACK"
   LIBAMGX="" && [ "$TRUST_USE_CUDA" = 1 ] && LIBAMGX=LIBAMGX
   LIBROCALUTION="" && [ "$TRUST_ROCALUTION" = $TRUST_ROOT/lib/src/LIBROCALUTION ] && LIBROCALUTION=LIBROCALUTION
   LIBCGNS="LIBCGNS" && [ "$TRUST_DISABLE_CGNS" = 1 ] && LIBCGNS=""
   LIBPETSC="LIBPETSC" && [ "$TRUST_DISABLE_PETSC" = 1 ] && LIBPETSC=""
   LIBVC="LIBVC" && [ "$TRUST_DISABLE_VC" = 1 ] && LIBVC=""
   reps="LIBMFFT LIBMFFT_C LIBSKIT LIBKOKKOS LIBLATAFILTER LIBICOCOAPI $LIBMETIS $LIBLAPACK LIBMED LIBMEDCOUPLING  $LIBPETSC $LIBAMGX $LIBROCALUTION LIBOSQP $LIBVC $LIBCGNS"
   time=`date "+%s"`
   for rep in $reps
   do
      if [ -d $rep ]
      then
         # On compile TOUTES les librairies en optimise, sauf si flags debug pour PETSc
         \cd $rep
         echo>>$COMPILE
         echo "$MESSAGE library: $rep" 1>>$COMPILE 2>&1
         echo $ECHO_OPTS $rep":\c "
         OLD_OPT=$OPT
         OPT="_opt"
         [ "$TRUST_ENABLE_PETSC_DEBUG" = 1 ] && [ "$rep" = LIBPETSC ] && OPT=""
         $MAKE $CLEAN 1>>$COMPILE 2>&1
         err=$?
         OPT=$OLD_OPT
         OK $err
         if [ $err != 0 ]
         then
            echo "A library failed to build. Contact TRUST support by sending $COMPILE and $TRUST_ENV/machine.env files."
            echo "BUILD_EXEC=KO" | tee -a $COMPILE && rm -f $exec && exit -1
         fi
         \cd ..
      fi
   done
   # Pas tres propre (MED 2.3.6 n'a plus les memes includes or le make depend des sources TRUST
   # est fait avant l'installation de MED). En toute rigueur, toutes les librairies devraient etre
   # construites dans le configure avant le make depend). Ou bien le compile devrait faire make
   # depend systematiquement
   #if [ "`grep med_win_dll.h $TRUST_ROOT/src/Kernel/MEDimpl/makefile`" != "" ]
   #then
   #   (cd $TRUST_ROOT/src/Kernel/MEDimpl;make depend)
   #fi
fi
echo>>$COMPILE

#####
# EOS
#####
if [ "$TRUST_USE_EOS" = 1 ]
then
  LEOS=$TRUST_EOS_HOME_DIR/lib/libeos.a
  if [ -f $LEOS ]
  then
    echo "LIBEOS:OK" | tee -a $COMPILE
  else
    echo "LIBEOS:KO !!!" | tee -a $COMPILE
    echo "BUILD_EXEC=KO" | tee -a $COMPILE
    exit -1
  fi
fi

##########
# CoolProp
##########
if [ "$TRUST_USE_COOLPROP" = 1 ]
then
  LCOOLPROP=$TRUST_COOLPROP_HOME_DIR/build/libCoolProp.a
  if [ -f $LCOOLPROP ]
  then
    echo "LIBCOOLPROP:OK" | tee -a $COMPILE
  else
    echo "LIBCOOLPROP:KO !!!" | tee -a $COMPILE
    echo "BUILD_EXEC=KO" | tee -a $COMPILE
    exit -1
  fi
fi

if [ "$monodir" != "2" ]
then
   echo "You are using monodir=$monodir when building TRUST" | tee -a $COMPILE
   echo "Old building mode (autotools) not supported anymore." | tee -a $COMPILE
   echo "contact TRUST support team" | tee -a $COMPILE
   exit -1
fi

if [ "$CLEAN" == "" ]
then
#####################
# Compilation monodir
#####################
   echo>>$COMPILE
   echo "Compiling sources" 1>>$COMPILE 2>&1
   # On fait le mklibs
   mklibs=`ls $TRUST_ROOT/bin/mklibs* 2>/dev/null` && $mklibs
   [ ${#MonoDir} = 0 ] && MonoDir=$TRUST_ROOT/MonoDir$COMM$OPT
   echo "Build with COMM=\"$COMM\" and OPT=\"$OPT\" under the directory $MonoDir"
   [ ${#TRUST_ROOT} = 0 ] && echo "TRUST_ROOT variable is not defined !" && echo "BUILD_EXEC=KO" | tee -a $COMPILE && exit

   # Creation de ce qui n'existe peut etre pas :
   [ ! -d $TRUST_ROOT/exec ] && mkdir $TRUST_ROOT/exec
   [ ! -d $TRUST_LIB ] && mkdir $TRUST_LIB
   # Creation des repertoires si necessaire
   [ ! -d $MonoDir ] && mkdir $MonoDir
   \cd $MonoDir
   [ ! -d src ] && mkdir src

   ########################
   # compile avec cmake ...
   ########################
   \cd $TRUST_ROOT
   cree_include=0
   ##########################################
   # On met a jour les fichiers CMakelist.txt
   ##########################################
   python $TRUST_ROOT/bin/KSH/Createcmakefile.py || exit -1
   MonoDir_base=${MonoDir%$OPT}
   opt=$OPT
   compile_opt=0
   [ "$opt" = "" ] && opt="_debug"
   [ "${cibles}" = "" ] && cibles=$opt
   for opt in ${cibles}
   do
      MODE_SPECIAL=""
      opt2=${opt#standard_kernel}
      [ $opt2 != $opt ] && MODE_SPECIAL=-Dkernel=standard && opt=$opt2
      opt2=${opt#micro_kernel}
      [ $opt2 != $opt ] && MODE_SPECIAL=-Dkernel=micro && opt=$opt2
      opt2=${opt#numeric_kernel}
      [ $opt2 != $opt ] && MODE_SPECIAL=-Dkernel=numeric && opt=$opt2
      # on regarde si opt commence par _ sinon on le rajoute
      opt2=${opt#_}
      [ "${opt2}" = "$opt" ] && opt="_"$opt
      MonoDir=${MonoDir_base}$opt
      [ "$opt" = "_debug" ] && MonoDir=${MonoDir_base}
      mkdir -p $MonoDir/src
      \cd $MonoDir/src || (echo "BUILD_EXEC=KO" | tee -a $COMPILE && exit -1)
      case $opt in
          _opt) build_type="Release"; compile_opt=1 ;;
          _debug) build_type="Debug" ;;
          _prof) build_type="Profil" ;;
          _gcov)  build_type="Coverage" ;;
          _semi_opt) build_type="semi_opt";;
          _custom) build_type="custom";;
          _opt_avx)  build_type="Release_avx";;
          *) echo $opt not for cmake in $0; echo "BUILD_EXEC=KO" | tee -a $COMPILE; exit -1 ;;
      esac;

      CHOIX_MAKE multiple
      [ $depend = 1 ] && rm -f CMakeCache.txt

      cmake $TRUST_ROOT/src -DCMAKE_INSTALL_PREFIX=$TRUST_ROOT -DCMAKE_BUILD_TYPE=$build_type -Ukernel $MODE_SPECIAL -DCOMPIL_DYN=${COMPIL_DYN}

      [ $? != 0 ] && echo 'Problem of configuring.' && echo "BUILD_EXEC=KO" | tee -a $COMPILE && rm -f $exec_debug$opt && exit -1
      # GF pour eviter message
      export MAKELEVEL=0

      $MAKE 2>&1 | tee -a $COMPILE
      status=${PIPESTATUS[0]}
      if [ $status != 0 ]
      then
         echo 'Problem of compiling, contact TRUST support team'
         echo "BUILD_EXEC=KO" | tee -a $COMPILE
         rm -f $exec_debug$opt
         exit -1
      fi
   done

   echo "END"
   echo >>$COMPILE
   echo "cibles="$cibles | tee -a $COMPILE
   echo "BUILD_EXEC=OK" | tee -a $COMPILE
   [ $compile_opt -eq 0 ] && echo "No opt compilation, so stop"  | tee -a $COMPILE && exit 0
   echo >>$COMPILE
fi
# Do not exit immediately if a pipeline returns non zero return code
# This will allow carrying on tools build even if a tool fails
set +e

############################
# Creation des outils TRUST
############################
make_tools

################################
# Nettoyage MonoDir et atelier #
################################
if [ "$CLEAN" != "" ]
then
   \cd $TRUST_ROOT
   echo>>$COMPILE
   echo "Cleaning sources" 1>>$COMPILE 2>&1
   # GF il ne faut pas effacer exec ici, sinon le configure risque de planter
   # il ne faut pas effacer lib/src/LIBMPI ici, sinon l'installation Installer_TRUST plante, idem pour include/backward
   rm -rf MonoDir* build
   rm -f include/*.h
   rm -f lib/*.a
   for rep_lib in `ls lib/src | grep -v LIBMPI`
   do
      rm -rf lib/src/$rep_lib
   done
   # Le travail est deja fait mais on en profite pour rappeler le configure clean possible
   echo "---------------------------------------------------------------------------------"
   echo "To do a complete make clean, you should also clean all the the programs installed"
   echo "during the configure task (OpenMPI, ccache,...). So run: ./configure -clean"
   echo "You would then run ./configure before the build with the make command."
fi

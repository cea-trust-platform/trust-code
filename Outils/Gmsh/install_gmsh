#!/bin/bash

# Setup build directory and cd to it
BUILD_DIR=$TRUST_ROOT/build/Outils/Gmsh
mkdir -p $BUILD_DIR
cd $BUILD_DIR

# Link to sources:
for file in `ls $TRUST_ROOT/externalpackages/Gmsh/*`; do
  ln -sf $file .
done
      
########
# FLTK #
########
FLTK_ROOT=$TRUST_ROOT/Outils/Gmsh/fltk
if [ ! -d "$FLTK_ROOT" ]
then
   fltk_version=a5f28b39842af9ceb20c85a2d75870eb556a2cc3 #1.3.5
   fltk=fltk-$fltk_version".tar.gz"
   if [ ! -f $fltk ]
   then
      echo "Downloading $fltk..." 
      wget_ https://github.com/fltk/fltk/archive/$fltk_version.tar.gz -O $fltk
      if [ $? != 0 ]
      then
         echo "No Internet access. Install yourself Gmsh."
	 exit 0
      fi
   fi
   echo "#########################"
   echo "Installing $fltk..." 
   echo "#########################"
   tar xfz $fltk
   cd ${fltk%.tar.gz}

   mkdir -p fltk-build
   cd fltk-build

   CXX=$TRUST_CC
   CC=$TRUST_cc
   if [ "$TRUST_CC_BASE_EXTP" != "" ]
   then
      export OMPI_CXX=$TRUST_CC_BASE_EXTP
      export OMPI_CC=$TRUST_cc_BASE_EXTP
      export MPICH_CXX=$OMPI_CXX
      export MPICH_CC=$OMPI_CC
   fi
   # -DFLTK_BACKEND_WAYLAND=OFF avoids build error on Ubuntu 22/24 if pangocairo package not installed
   cmake -DCMAKE_CXX_FLAGS="-fPIC" -DCMAKE_C_FLAGS="-fPIC" -DFLTK_BACKEND_WAYLAND=OFF -DCMAKE_SYSTEM_IGNORE_PATH=$TRUST_ROOT/exec/python/lib -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_INSTALL_PREFIX=$FLTK_ROOT ..  2>&1 || exit -1
   $TRUST_MAKE || exit -1
   make install || exit -1 
   cd ../..
   rm -r -f fltk*
fi

########
# GMSH #
########   
gmsh_version=4.13.1
gmsh=gmsh-$gmsh_version"-source.tgz"
if [ ! -f $gmsh ]
then
   echo "Downloading $gmsh..." 
   wget_ http://geuz.org/gmsh/src/$gmsh
   if [ $? != 0 ]
   then
      echo "No Internet access. Install yourself Gmsh."
      exit 0
   fi      
fi
rm -r -f ${gmsh%.tgz}
echo "Install $gmsh..." 
tar mxfz $gmsh
GMSH_SRC=${gmsh%.tgz}
# Patch Gmsh pour MPI lorsque HDF est compile avec -enable-parallel:
sed -i "1,$ s?#include <sstream>?#define OMPI_SKIP_MPICXX\n#define MPICH_SKIP_MPICXX\n#include <sstream>?" $GMSH_SRC/Fltk/helpWindow.cpp

#echo Patching ratio.c for clang
#sed "s?if ( abs(mesh->info.imprim) < 5 )  return;?if ( abs(mesh->info.imprim) < 5 )  return 1;?" -i ./contrib/mmg3d/build/sources/ratio.c
mkdir -p gmsh-build
cd gmsh-build

CXX=$TRUST_CC
CC=$TRUST_cc
FC=$TRUST_F77_BASE
if [ "$TRUST_CC_BASE_EXTP" != "" ]
then
   export OMPI_CXX=$TRUST_CC_BASE_EXTP
   export OMPI_CC=$TRUST_cc_BASE_EXTP
   export OMPI_FC=$TRUST_F77_BASE_EXTP
   export MPICH_CXX=$OMPI_CXX
   export MPICH_CC=$OMPI_CC
   export MPICH_FC=$OMPI_FC
fi  

options=""
if [ "${TRUST_F77_BASE%gfortran}" != $TRUST_F77_BASE ]
then
   # Vu sur 2 machines de Saclay dont is213120:
   # gfortran non trouve au link de Gmsh
   options="-DCMAKE_CXX_LINK_FLAGS=-lgfortran"
fi

# By default, all plugins off, except for FLTK GUI (which requires Mesh, Post, Plugins and ONELAB), MED and (since v184) NETGEN.
plugins="-DDEFAULT=OFF -DENABLE_MED=ON -DENABLE_FLTK=ON -DENABLE_MESH=ON -DENABLE_POST=ON -DENABLE_PLUGINS=ON -DENABLE_ONELAB=ON -DENABLE_PARSER=ON -DENABLE_NETGEN=ON"

# seen on Ub19/20: Adding LIBLAPACK to LD_LIBARY_PATH, otherwise TRUST_lapack not found during install
export LD_LIBRARY_PATH=$TRUST_ROOT/lib/src/LIBLAPACK:$LD_LIBRARY_PATH

# Important: pour utiliser le cmake Python sans l'environnement Python:
# Specifier CMAKE_SYSTEM_IGNORE_PATH=$TRUST_ROOT/exec/python/lib
cmake $options $plugins  \
-DCMAKE_SYSTEM_IGNORE_PATH=$TRUST_ROOT/exec/python/lib \
-DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX \
-DCMAKE_INSTALL_PREFIX=$TRUST_ROOT/exec/gmsh \
-DCMAKE_PREFIX_PATH="$TRUST_MED_ROOT;$FLTK_ROOT" \
-DCMAKE_BUILD_TYPE=Release \
-DHDF5_ROOT="$TRUST_MED_ROOT" ../$GMSH_SRC 2>&1 || exit -1

# Si OpenGL non detecte sur Fedora: sudo dnf install mesa-libGLU-devel

# Check that FLTK has been found correctly:
grep "define HAVE_FLTK" src/common/GmshConfig.h
if ! [ $? -eq 0 ]; then
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  echo Error: FLTK not correctly detected by GMSH CMake !!
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  exit -1
fi

# Check that MED has been found correctly
grep "define HAVE_MED" src/common/GmshConfig.h
if ! [ $? -eq 0 ]; then
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  echo Error: MED file not correctly detected by GMSH CMake !!
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  exit -1
fi

# Build and install
#VERBOSE="VERBOSE=1"
$TRUST_MAKE $VERBOSE || exit -1
make install || exit -1
cd ../..
rm -rf Gmsh


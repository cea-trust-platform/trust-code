#!/usr/bin/env python
# -*- coding: utf-8 -*-

# %% LICENSE_SALOME_CEA_BEGIN
# see trustpy/LICENCE file
# %% LICENSE_END

"""
Testing loading of various dataset examples taken from GENEPI
"""

import os
import glob
import unittest

# import setenv_trustpy   # as PATH set to TRUSTPY_ROOT_DIR

from trustpy.unittest_custom_methods_trust import UnittestCustomMethodsTrust
from reference_data import *
import trustpy.baseTru as BTRU
import trustpy.trust_utilities as TRUU
import xyzpy.classFactoryXyz as CLFX
import xyzpy.loggingXyz as LOG

from trustpy.trust_parser import TRUSTParser, TRUSTStream

timeout = 10

verbose = False

def printAdrien(value):
  msg = str(value)
  if '\n' not in msg:
    msg = "ADRIEN: %s" % msg
  else:
    msg = "ADRIEN:\n  %s" % LOG.indent(msg)
  # print(LOG.toColor("<yellow>") + msg + LOG.toColor("<reset>"))
  print(msg)

########################################################################################
class TestCase(unittest.TestCase, UnittestCustomMethodsTrust):
  """
  Testing loading of various complete dataset examples into the datamodel generated by trustpy.
  """

  _test_dir = os.path.abspath(os.path.dirname(__file__))
  _models = []

  def generic_test_800(self, data_ex):
    """ Generic test method taking a (piece of) dataset and testing it. """
    # Generate if needed - the full thing here!!
    self.generate_python_and_import_GENEPI()
    # Parse the TRUST data set provided in arg
    tp = TRUSTParser()
    tp.tokenize(data_ex)
    stream = TRUSTStream(tp)
    tds_cls = CLFX.getXyzClassFromName("DataSet" + BTRU._TRIOU_SUFFIX)
    # import cProfile
    # cProfile.runctx("tds_cls.ReadFromTokens(stream)", globals=globals(), locals=locals())
    ds = tds_cls.ReadFromTokens(stream)
    return ds

  def load_file(self, fName):
    """ Open a test file located in subfolder 'datasets' and return its content as a string. """
    dr = self._test_dir + "/datasets"
    with open(dr + "/" + fName) as f:
      # rstrip() to get rid of any end of line, blanks, etc ... after the 'end' keyword
      return f.read().rstrip()

  def reinitClasses(self):
    CLFX.resetDefaults()
    # BTRU.initXyzClasses()

  #########################################################
  def test_000(self):
    """ Done first to set stdout verbosity tests redirection"""
    if not verbose:
      self.redirect_stdout()
    self.print_begin_test()
    self.reinitClasses()

  def test_999(self):
    """ Done last to set stdout verbosity tests redirection"""
    self.print_begin_test()
    CLFX.resetDefaults()  # reset classFactoryXyz for next tests suites
    self.restore_stdout()

  def test_200(self):
    """ Dataset:  cas_genepi_fiche-644 """
    # self.__class__._do_not_regenerate = True
    self.print_begin_test()
    data_ex = self.load_file("cas_genepi_fiche-644.data")
    res = self.generic_test_800(data_ex)
    if not LOG.isAdrien():
      # 32 is pb_melange in this file data
      # self.display_treeview(res[32], title=self.caller_method_name(), timeout=timeout)
      # or ... (new improvment)
      items = res.findChildItemsOnClassName("pb_melange")
      # choose first item if some
      item = items[0].navier_stokes_melange.modelisation
      self.display_treeview(item,title=self.caller_method_name(), timeout=timeout)
    # Test write out:
    s = ''.join(res.toDatasetTokens())
    # print(s)
    self.assertTrue(self.check_str_equality(s, data_ex).ok)
    # Test changing one bit:
    # print(res.get("metal").rugosite)
    # res.get("metal").rugosite = 0.3
    # s = ''.join(res.toDatasetTokens())
    # print(s)

if __name__ == '__main__':
  verbose = True  # verbose if in main
  TRUU._log_debug = False
  timeout = 200
  unittest.main()

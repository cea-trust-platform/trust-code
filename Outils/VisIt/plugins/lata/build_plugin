#!/bin/bash

prepsrc=0
# On initialise l'environnement
source $TRUST_ROOT/env_TRUST.sh 1>/dev/null 2>&1

set -e  # Exit on error - after TRUST source!

LATASRC=Outils/lata_tools/src
local=$TRUST_ROOT/exec/VisIt/bin
DIR=`dirname $0`
DIR=`(cd $DIR;pwd)`
plugin=lata

Build=$TRUST_ROOT/build/Outils/VisIt/plugins/lata/build

#################
# Clean if needed
#################
if [ $0 -nt ${Build} ] || [ src/generate_lata_xml.sh -nt ${Build} ]; then
    echo "CLEANING: removing ${Build}"
    rm -rf ${Build}
fi

#################
# Generate CMake
#################
if [ ! -d ${Build} ]; then
    mkdir -p ${Build}
    cd ${Build}
    ln -sf $DIR/src/avtlataFileFormat.* . 2>/dev/null
    all_srcs=""    # List of all sources for the LATA plugin
    # Start with lata_tools sources
    for i in `cd $TRUST_ROOT/$LATASRC;ls trust_commun/*.cpp 2>/dev/null`; do
      nam=`basename $i .cpp`.C
      ln -sf $TRUST_ROOT/$LATASRC/$i $nam
      all_srcs=$all_srcs" "$nam
    done
    # Make sure templates and headers are there too
    for i in `cd $TRUST_ROOT/$LATASRC;ls trust_commun/*.h 2>/dev/null`; do
      ln -sf $TRUST_ROOT/$LATASRC/$i `basename $i`
    done
    # Extra sources from TRUST:
    cd $TRUST_ROOT/Outils/lata_tools; env OUTFILE=${Build}/extra_src make write_extra_src;  cd $Build
    for i in `cat extra_src`; do
      nam=`basename $i .cpp`.C
      ln -sf $i $nam
      all_srcs=$all_srcs" "$nam
    done

    echo "# Compiling $plugin plugin..."
    # Regroupement des sources du plugin depuis le Kernel:
    MED="-with_med"
    [ ! -f $TRUST_MED_ROOT/lib/libmed.a ] || [ ! -f $TRUST_MEDCOUPLING_ROOT/${TRUST_ARCH}_opt/lib/libmedloader.a ] && MED=""
    $DIR/src/generate_lata_xml.sh "$all_srcs" $MED

   env LD_LIBRARY_PATH=$TRUST_ROOT/exec/python/lib:$LD_LIBRARY_PATH $local/xml2info lata.xml 

   if [ $prepsrc -eq 1 ]; then
       env LD_LIBRARY_PATH=$TRUST_ROOT/exec/python/lib:$LD_LIBRARY_PATH $local/xml2cmake lata.xml -dv
       echo "   end of preparation, makefile not modified" && exit 0
   fi

   env LD_LIBRARY_PATH=$TRUST_ROOT/exec/python/lib:$LD_LIBRARY_PATH $local/xml2cmake  lata.xml
   dlocal=`dirname $local`
   # Puree VisIt pas capable de proposer de fixer VISIT_PLUGIN_DIR...
   # CMakeLists.txt should be updated to build plugins in visit install directory, otherwise plugins will be
   # installed in $HOME/.visit/version/...
   # Dans VisIt 3.4.1, il faut mettre VISIT_BINARY_DIR au lieu de VISIT_PLUGIN_DIR sinon plugins pas installes au bon endroit
   sed -i "s?$HOME/.visit?$dlocal?" CMakeLists.txt
   PLUGIN_INSTALL_DIR="`grep VISIT_PLUGIN_DIR CMakeLists.txt | sed 's?x86_64/plugins?x86_64?' | sed 's?VISIT_PLUGIN_DIR?VISIT_BINARY_DIR?'`"
   # Switch to c++14
   sed -i "s?PROJECT(lata_database)?PROJECT(lata_database) \nset(CMAKE_CXX_STANDARD 14)\n$PLUGIN_INSTALL_DIR?" CMakeLists.txt

   if [ "$TRUST_CC_BASE_EXTP" != "" ]
   then
      export OMPI_CXX=$TRUST_CC_BASE_EXTP
      export OMPI_CC=$TRUST_cc_BASE_EXTP
      export MPICH_CXX=$OMPI_CXX
      export MPICH_CC=$OMPI_CC
   fi
   
   ## To compile VisIt plugin in Debug, use:
   #cmake . -DCMAKE_CXX_COMPILER=$TRUST_CC  -DCMAKE_C_COMPILER=$TRUST_cc -DCMAKE_CXX_STANDARD=14 -DCMAKE_BUILD_TYPE=Debug
   cmake . -DCMAKE_CXX_COMPILER=$TRUST_CC  -DCMAKE_C_COMPILER=$TRUST_cc -DCMAKE_CXX_STANDARD=14
   
   [ ! -f Makefile ] && echo "Echec du construction du Makefile par CMake dans ${Build}_plugin" && exit -1

   cd ..

fi
cd ${Build}

#######################
# Compilation du plugin
# ######################
$TRUST_MAKE

echo "-> Done: $plugin plugin is up to date under VisIt!"
cd ../../../
rm -rf plugins

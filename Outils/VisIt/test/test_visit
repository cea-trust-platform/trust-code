#!/bin/bash
test_visit=0 # Too much problems now for 1.7.0...
test_visit=1 # Reactivation for 1.7.2...
[ `uname -s` = Darwin ] && test_visit=0 # for Darwin, we deactivate the test at present
if [ "$test_visit" = 1 ]
then
   # Teste que le format Visit+Lata fonctionne
   # Initialisation environnement TRUST pour mise a jour de PYTHON_PATH sinon probleme avec ALLIANCES
   source $TRUST_ROOT/env_TRUST.sh 1>/dev/null 2>&1
   new=1 && [ -d $TRUST_ROOT/exec/VisIt/2.12.1 ] && new=0

   tmp_visit=`mktemp_ -d`
   cd $tmp_visit
   [ ! -f $TRUST_ROOT/Outils/VisIt/test/test.tar.gz ] && echo "test.tar.gz not found!" && exit -1
   cp -f $TRUST_ROOT/Outils/VisIt/test/*.med .
   gunzip -f -c $TRUST_ROOT/Outils/VisIt/test/test.tar.gz | tar -xf -
   lata=`ls -rt *.lata`
   echo -e "OpenDatabase(\"$lata\", 0)\nAddPlot(\"Mesh\", \"dom\", 1, 1)\nDrawPlots()\nSaveWindow()\nquit()" > quit.py
   cp -f quit.py LATA.py
   echo -e "OpenDatabase(\"mesh.med\", 0)\nAddPlot(\"Mesh\", \"dom\", 1, 1)\nDrawPlots()\nSaveWindow()\nquit()" > MED.py
   visit=$TRUST_ROOT/exec/VisIt/bin/visit

   # Pour eviter un blocage avec Alliances
   traceback=`ls $TRUST_ROOT/exec/VisIt/*/*/lib/python/lib/python*/traceback.py 2>/dev/null | head -1`
   [ "$traceback" != "" ] && export PYTHONPATH=`dirname $traceback`:$PYTHONPATH

   #####################################################
   # Loop: sequential test than parallel test of VisIt #
   #####################################################
   tests=sequential
   if [ "${MPI_ROOT#$TRUST_ROOT}" != "$MPI_ROOT" ] && [ "`ls $TRUST_ROOT/exec/VisIt/current/*/bin/engine_par 2>/dev/null`" != "" ]
   then
      tests=$tests" parallel"
   fi
   if [ "${HOST#irene}" != $HOST ] || [ "${HOST#topaze}" != $HOST ] || [ "${HOST#orcus}" != $HOST ]
   then
      tests=$tests" parallel" # sur CCRT, visit doit s'installer en parallel aussi car gros calculs int64
   fi
   for test in $tests
   do
      timeout=120
      np="" && [ $test = parallel ] && np="-np 2"
      # -noconfig evite de charger le fichier de configuration du login
      # et permet ainsi d'eviter un blocage potentiel si le fichier est mal configure 
      # Filtrage des problemes de display
      rm -f visit0000.png;echo 1 > err
      ($visit $np -debug 5 -cli -nowin -noconfig -s quit.py 1>visit.log 2>&1;[ -f visit0000.png ] && echo 0 > err) &
      wait_for $! $timeout
      if [ $? != 0 ]
      then
	 echo "VisIt has blocked on the test and has been killed after $timeout seconds. See `pwd`/visit.log" 
	 echo "You may give a try with: export HWLOC_COMPONENTS=-pci"
	 # test // bloque sur qq pc Ub20 (carte graphique?), contournement possible: export HWLOC_COMPONENTS=-pci
	 # cf https://lists.mpich.org/pipermail/discuss/2020-September/006035.html
	 exit -1
      elif [ "`cat err 2>/dev/null`" = 0 ] && [ "`grep abnormally visit.log`" = "" ] && [ "`grep -i error visit.log`" = "" ]
      then
	 echo "VisIt $test installation is OK."
      else
	 echo "Problem when running VisIt. See $tmp_visit/visit.log"	 
	 echo "and VisIt debug files *.vlog under $tmp_visit." 
	 if [ "`grep SIGSEGV $tmp_visit/*.5.vlog 2>/dev/null`" != "" ] && [ "$test" = parallel ]
	 then
            echo "It seems that on some platforms, parallel VisIt built with OpenMPI crashes."
	    echo "It you REALLY need a parallel version of VisIt then contact"
	    echo "TRUST support and consider rebuilding TRUST with MPICH." 
	 fi
	 cat $tmp_visit/visit.log
	 exit -1
      fi
   done

   #########################################
   # Test of VisIt reading a LATA/MED file #
   #########################################
   # check_visit is important to know if DISPLAY is available !
   # If it fails, -win CAN'T be used and the test of VisIt fails
   options=-nowin && $TRUST_ROOT/Outils/VisIt/check_visit 1>/dev/null 2>&1 && options=$options" -win"
   for option in $options
   do
      for FORMAT in LATA `[ "$new" = 1 ] && echo MED`
      do
      rm -f visit0000.png;echo 1 > err
      ($visit -debug 5 -cli `[ "$option" = -nowin ] && echo $option` -noconfig -s $FORMAT.py 1>$FORMAT.log 2>&1;[ -f visit0000.png ] && echo 0 > err) &
      wait_for $! $timeout
      if [ $? != 0 ]
      then
	 echo "VisIt has blocked on the $FORMAT test with $option option and has been killed after $timeout seconds. See `pwd`/$FORMAT.log" 
	 exit -1
      elif [ "`cat err 2>/dev/null`" != 0 ] || [ "`grep 'invalid file' $FORMAT.log 2>/dev/null`" != "" ] || [ "`grep abnormally $FORMAT.log 2>/dev/null`" != "" ]
      then
	 echo "VisIt does not read a $FORMAT file with $option option for the plateform:"
	 uname -a
	 echo "Compiler used for the $FORMAT plugin: "`$TRUST_cc -v 2>&1 | grep version`
	 echo "Compiler used to build VisIt: "
	 #find $TRUST_ROOT/exec/VisIt -follow -name '*'lataDatabase'*'.so | xargs rm -f
	 echo "See $tmp_visit/$FORMAT.log"
	 echo "and VisIt debug files *.vlog under $tmp_visit." 
	 cat $tmp_visit/visit.log
	 exit -1
      else
	 echo "VisIt + $FORMAT plugin are OK with $option option."
      fi
      done
   done
   rm -r -f $tmp_visit
fi
Build=$TRUST_ROOT/build/Outils/VisIt/test
[ ! -d ${Build} ] && echo Creating ${Build} directory && mkdir -p ${Build}
echo > $Build/ok
exit 0

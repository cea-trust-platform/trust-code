CMAKE_MINIMUM_REQUIRED(VERSION 3.18)
INCLUDE(CMakeDependentOption)

PROJECT(SalomeTRUST_PLOT2D C CXX)

# Versioning
# ===========
# Project name, upper case
STRING(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UC)

SET(${PROJECT_NAME_UC}_MAJOR_VERSION 7)
SET(${PROJECT_NAME_UC}_MINOR_VERSION 7)
SET(${PROJECT_NAME_UC}_PATCH_VERSION 0)
SET(${PROJECT_NAME_UC}_VERSION
  ${${PROJECT_NAME_UC}_MAJOR_VERSION}.${${PROJECT_NAME_UC}_MINOR_VERSION}.${${PROJECT_NAME_UC}_PATCH_VERSION})

# User options
# ============
OPTION(SALOME_BUILD_DOC "Generate SALOME TRUST_PLOT2D documentation" ON)
OPTION(SALOME_BUILD_TESTS "Generate SALOME TRUST_PLOT2D tests" ON)

# Common CMake macros
# ===================
SET(CONFIGURATION_ROOT_DIR $ENV{CONFIGURATION_ROOT_DIR} CACHE PATH "Path to the Salome CMake configuration files")
IF(EXISTS ${CONFIGURATION_ROOT_DIR})
  LIST(APPEND CMAKE_MODULE_PATH "${CONFIGURATION_ROOT_DIR}/cmake")
  INCLUDE(SalomeMacros)
ELSE()
  MESSAGE(FATAL_ERROR "We absolutely need the Salome CMake configuration files, please define CONFIGURATION_ROOT_DIR !")
ENDIF()

# Find CURVEPLOT
# ==============
SET(CURVEPLOT_ROOT_DIR $ENV{CURVEPLOT_ROOT_DIR} CACHE PATH "Path to the Salome CURVEPLOT")
IF( EXISTS ${CURVEPLOT_ROOT_DIR} )
  LIST(APPEND CMAKE_MODULE_PATH "${CURVEPLOT_ROOT_DIR}/adm_local/cmake_files")
  FIND_PACKAGE(SalomeCURVEPLOT REQUIRED)
ELSE()
  MESSAGE(FATAL_ERROR "We absolutely need Salome CURVEPLOT, please define CURVEPLOT_ROOT_DIR!")
ENDIF()
    
# Prerequisites
# =============

# Mandatory products
FIND_PACKAGE(SalomePythonInterp    REQUIRED)
FIND_PACKAGE(SalomePythonLibs    REQUIRED)

# Necessary to set these two variables to be able to set
# python version in env.sh when calling:
# configure_file(env.sh.in env.sh @ONLY
SET(PYTHON_VERSION_MAJOR "${PYTHON_VERSION_MAJOR}")
SET(PYTHON_VERSION_MINOR "${PYTHON_VERSION_MINOR}")

# Qt5
FIND_PACKAGE(SalomeQt5 REQUIRED COMPONENTS QtCore QtGui)

IF(SALOME_BUILD_DOC)
#  FIND_PACKAGE(SalomeDoxygen)
#  FIND_PACKAGE(SalomeSphinx)
#  SALOME_LOG_OPTIONAL_PACKAGE(Doxygen SALOME_BUILD_DOC)
#  SALOME_LOG_OPTIONAL_PACKAGE(Sphinx SALOME_BUILD_DOC)
#  ADD_DEFINITIONS(-DDOXYGEN_IS_OK)
ENDIF()

IF(SALOME_BUILD_TESTS)
  ENABLE_TESTING()
ENDIF()

# Detection summary:
SALOME_PACKAGE_REPORT_AND_CHECK()

# Directories
# ===========
SET(SALOME_INSTALL_LIBS "${SALOME_INSTALL_LIBS}" CACHE PATH "Install path: SALOME libs")
SET(SALOME_INSTALL_PYTHON "${SALOME_INSTALL_PYTHON}" CACHE PATH 
    "Install path: SALOME Python scripts")
SET(SALOME_INSTALL_SCRIPT_PYTHON "${SALOME_INSTALL_SCRIPT_PYTHON}" CACHE PATH 
    "Install path: SALOME Python scripts")
SET(SALOME_INSTALL_CMAKE_LOCAL ${SALOME_INSTALL_CMAKE_LOCAL} CACHE PATH 
    "Install path: local SALOME CMake files") 
SET(SALOME_INSTALL_RES "${SALOME_INSTALL_RES}" CACHE PATH "Install path: SALOME resources")
SET(SALOME_INSTALL_DOC "${SALOME_INSTALL_DOC}" CACHE PATH "Install path: SALOME documentation")
SET(SALOME_INSTALL_HEADERS ${SALOME_INSTALL_HEADERS} CACHE PATH "Install path: SALOME headers")
 
# Specific to TRUST_PLOT2D:   
SET(SALOME_TRUST_PLOT2D_INSTALL_RES_DATA ${SALOME_INSTALL_RES}/trust_plot2d CACHE PATH "Install path: SALOME TRUST_PLOT2D specific resources")

# Sources 
# ========
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(resources)
IF(SALOME_BUILD_DOC)
#   ADD_SUBDIRECTORY(doc)
ENDIF()
configure_file(env.sh.in env.sh @ONLY)
configure_file(Plot2d.sh.in Plot2d.sh @ONLY)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/env.sh  ${CMAKE_CURRENT_BINARY_DIR}/Plot2d.sh DESTINATION . )




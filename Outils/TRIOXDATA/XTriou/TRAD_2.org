comment objet_u # 0 Comments in a data file.
  attr comm chaine comm 0 Text to be commented.
bloc_comment objet_u /* 0 bloc of Comment in a data file.
  attr comm chaine comm 0 Text to be commented.
listobj listobj_impl listobj -1 List of objects.
objet_lecture objet_u objet_lecture -1 Auxiliary class for reading.
bloc_lecture objet_lecture nul 0 to read between two braces
  attr bloc_lecture chaine bloc_lecture 0 not_set
deuxmots objet_lecture nul 0 Two words.
  attr mot_1 chaine mot_1 0 First word.
  attr mot_2 chaine mot_2 0 Second word.
troismots objet_lecture nul 0 Three words.
  attr mot_1 chaine mot_1 0 First word.
  attr mot_2 chaine mot_2 0 Snd word.
  attr mot_3 chaine mot_3 0 Third word.
format_file objet_lecture nul 0 File formatted.
  attr format chaine(into=["binaire","formatte","xyz","single_hdf"]) format 1 Type of file (the file format).
  attr name_file chaine name_file 0 Name of file.
deuxentiers objet_lecture nul 0 Two integers.
  attr int1 entier int1 0 First integer.
  attr int2 entier int2 0 Second integer.
floatfloat objet_lecture nul 0 Two reals.
  attr a floattant a 0 First real.
  attr b floattant b 0 Second real.
entierfloat objet_lecture nul 0 An integer and a real.
  attr the_int entier the_int 0 Integer.
  attr the_float floattant the_float 0 Real.
champ_a_post objet_lecture nul 0 Field to be post-processed.
  attr champ chaine champ 0 Name of the post-processed field.
  attr localisation chaine(into=["elem","som","faces"]) localisation 1 Localisation of post-processed field values: The two available values are elem, som, or faces (LATA format only) used respectively to select field values at mesh centres (CHAMPMAILLE type field in the lml file) or at mesh nodes (CHAMPPOINT type field in the lml file). If no selection is made, localisation is set to som by default.
champs_a_post listobj nul -1 champ_a_post 0 Fields to be post-processed.
champs_posts objet_lecture nul 0 Field\'s write mode.
  attr format chaine(into=["binaire","formatte"]) format 1 Type of file.
  attr mot chaine(into=["dt_post","nb_pas_dt_post"]) mot 0 Keyword to set the kind of the field\'s write frequency. Either a time period or a time step period.
  attr period chaine period 0 Value of the period which can be like (2.*t).
  attr champs|fields champs_a_post champs 0 Post-processed fields.
stat_post_deriv objet_lecture stat_post_deriv 0 not_set
stat_post_t_deb stat_post_deriv t_deb 0 not_set
  attr val floattant val 0 not_set
stat_post_t_fin stat_post_deriv t_fin 0 not_set
  attr val floattant val 0 not_set
stat_post_moyenne stat_post_deriv moyenne 0 not_set
  attr field chaine field 0 not_set
  attr localisation chaine(into=["elem","som","faces"]) localisation 1 Localisation of post-processed field value
stat_post_ecart_type stat_post_deriv ecart_type 0 not_set
  attr field chaine field 0 not_set
  attr localisation chaine(into=["elem","som","faces"]) localisation 1 Localisation of post-processed field value
stat_post_correlation stat_post_deriv correlation 0 not_set
  attr first_field chaine first_field 0 not_set
  attr second_field chaine second_field 0 not_set
  attr localisation chaine(into=["elem","som","faces"]) localisation 1 Localisation of post-processed field value
list_stat_post listobj nul -1 stat_post_deriv 0 Post-processing for statistics
stats_posts objet_lecture nul 0 Field\'s write mode. \input{{statistiques}}
  attr mot chaine(into=["dt_post","nb_pas_dt_post"]) mot 0 Keyword to set the kind of the field\'s write frequency. Either a time period or a time step period.
  attr period chaine period 0 Value of the period which can be like (2.*t).
  attr champs|fields list_stat_post champs 0 Post-processed fields.
stats_serie_posts objet_lecture nul 0 Post-processing for statistics. \input{{statistiquesseries}}
  attr mot chaine(into=["dt_integr"]) mot 0 Keyword is used to set the statistics period of integration and write period.
  attr dt_integr floattant dt_integr 0 Average on dt_integr time interval is post-processed every dt_integr seconds.
  attr stat list_stat_post stat 0 not_set
sonde_base objet_lecture sonde_base 0 Basic probe. Probes refer to sensors that allow a value or several points of the domain to be monitored over time. The probes may be a set of points defined one by one (keyword Points) or a set of points evenly distributed over a straight segment (keyword Segment) or arranged according to a layout (keyword Plan) or according to a parallelepiped (keyword Volume). The fields allow all the values of a physical value on the domain to be known at several moments in time.
un_point objet_lecture nul 0 A point.
  attr pos listf pos 0 Point coordinates.
listpoints listobj nul 0 un_point 0 Points.
points sonde_base points 0 Keyword to define the number of probe points. The file is arranged in columns.
  attr points listpoints points 0 Probe points.
numero_elem_sur_maitre sonde_base numero_elem_sur_maitre 0 Keyword to define a probe at the special element. Useful for min/max sonde.
  attr numero entier numero 0 element number
segmentpoints points segmentpoints 0 This keyword is used to define a probe segment from specifics points. The nom_champ field is sampled at ns specifics points.
position_like sonde_base position_like 0 Keyword to define a probe at the same position of another probe named autre_sonde.
  attr autre_sonde chaine autre_sonde 0 Name of the other probe.
plan sonde_base plan 0 Keyword to set the number of probe layout points. The file format is type .lml
  attr nbr entier nbr 0 Number of probes in the first direction.
  attr nbr2 entier nbr2 0 Number of probes in the second direction.
  attr point_deb un_point point_deb 0 First point defining the angle. This angle should be positive.
  attr point_fin un_point point_fin 0 Second point defining the angle. This angle should be positive.
  attr point_fin_2 un_point point_fin_2 0 Third point defining the angle. This angle should be positive.
volume sonde_base volume 0 Keyword to define the probe volume in a parallelepiped passing through 4 points and the number of probes in each direction.
  attr nbr entier nbr 0 Number of probes in the first direction.
  attr nbr2 entier nbr2 0 Number of probes in the second direction.
  attr nbr3 entier nbr3 0 Number of probes in the third direction.
  attr point_deb un_point point_deb 0 Point of origin.
  attr point_fin un_point point_fin 0 Point defining the first direction (from point of origin).
  attr point_fin_2 un_point point_fin_2 0 Point defining the second direction (from point of origin).
  attr point_fin_3 un_point point_fin_3 0 Point defining the third direction (from point of origin).
circle sonde_base circle 0 Keyword to define several probes located on a circle.
  attr nbr entier nbr 0 Number of probes between teta1 and teta2 (angles given in degrees).
  attr point_deb un_point point_deb 0 Center of the circle.
  attr direction entier(into=[0,1,2]) direction 1 Axis normal to the circle plane (0:x axis, 1:y axis, 2:z axis).
  attr radius floattant radius 0 Radius of the circle.
  attr theta1 floattant theta1 0 First angle.
  attr theta2 floattant theta2 0 Second angle.
circle_3 sonde_base circle_3 0 Keyword to define several probes located on a circle (in 3-D space).
  attr nbr entier nbr 0 Number of probes between teta1 and teta2 (angles given in degrees).
  attr point_deb un_point point_deb 0 Center of the circle.
  attr direction entier(into=[0,1,2]) direction 0 Axis normal to the circle plane (0:x axis, 1:y axis, 2:z axis).
  attr radius floattant radius 0 Radius of the circle.
  attr theta1 floattant theta1 0 First angle.
  attr theta2 floattant theta2 0 Second angle.
listchamp_generique listobj nul 1 champ_generique_base 1 XXX
champ_post_de_champs_post champ_generique_base champ_post_de_champs_post -1 not_set
  attr source champ_generique_base source 1 the source field.
  attr nom_source chaine nom_source 1 To name a source field with the nom_source keyword
  attr source_reference chaine source_reference 1 not_set
  attr sources_reference list_nom_virgule sources_reference 1 not_set
  attr sources listchamp_generique sources 1 sources { Champ_Post.... { ... } Champ_Post.. { ... }}
champ_post_operateur_base champ_post_de_champs_post champ_post_operateur_base -1 not_set
champ_post_statistiques_base champ_post_de_champs_post champ_post_statistiques_base -1 not_set
  attr t_deb floattant t_deb 0 Start of integration time
  attr t_fin floattant t_fin 0 End of integration time
definition_champ objet_lecture nul 0 Keyword to create new complex field for advanced postprocessing.
  attr name chaine name 0 The name of the new created field.
  attr champ_generique champ_generique_base champ_generique 0 not_set
definition_champs listobj nul 1 definition_champ 0 List of definition champ
corps_postraitement postraitement nul -1 not_set
un_postraitement objet_lecture nul 0 An object of post-processing (with name).
  attr nom chaine nom 0 Name of the post-processing.
  attr post corps_postraitement post 0 Definition of the post-processing.
type_un_post objet_lecture nul 0 not_set
  attr type chaine(into=["postraitement","post_processing"]) type 0 not_set
  attr post un_postraitement post 0 not_set
type_postraitement_ft_lata objet_lecture nul 0 not_set
  attr type chaine(into=["postraitement_ft_lata","postraitement_lata"]) type 0 not_set
  attr nom chaine nom 0 Name of the post-processing.
  attr bloc chaine bloc 0 not_set
un_postraitement_spec objet_lecture nul 0 An object of post-processing (with type +name).
  attr type_un_post type_un_post type_un_post 1 not_set
  attr type_postraitement_ft_lata type_postraitement_ft_lata type_postraitement_ft_lata 1 not_set
liste_post listobj liste_post -1 un_postraitement_spec 0 Keyword to use several results files. List of objects of post-processing (with name)
nom_postraitement objet_lecture nul 0 not_set
  attr nom chaine nom 0 Name of the post-processing.
  attr post postraitement_base post 0 the post
liste_post_ok listobj liste_post_ok -1 nom_postraitement 0 Keyword to use several results files. List of objects of post-processing (with name)
pb_gen_base objet_u pb_gen_base -1 Basic class for problems.
condinit objet_lecture nul 0 Initial condition.
  attr nom chaine nom 0 Name of initial condition field.
  attr ch field_base ch 0 Type field and the initial values.
condinits listobj condinits -1 condinit 0 Initial conditions.
nom_anonyme nom nul -1 not_set
vect_nom listobj vect_nom 0 nom_anonyme 0 Vect of name.
list_nom listobj list_nom 1 nom_anonyme 0 List of name.
list_nom_virgule listobj list_nom_virgule 1 nom_anonyme 1 List of name.
mailler_base objet_lecture mailler_base -1 Basic class to mesh.
defbord objet_lecture nul 0 Class to define an edge.
defbord_2 defbord nul -1 1-D edge (straight line) in the 2-D space.
  attr dir chaine(into=["X","Y"]) dir 0 Edge is perpendicular to this direction.
  attr eq chaine(into=["="]) eq 0 Equality sign.
  attr pos floattant pos 0 Position value.
  attr pos2_min floattant pos2_min 0 Minimal value.
  attr inf1 chaine(into=["<="]) inf1 0 Less than or equal to sign.
  attr dir2 chaine(into=["X","Y"]) dir2 0 Edge is parallel to this direction.
  attr inf2 chaine(into=["<="]) inf2 0 Less than or equal to sign.
  attr pos2_max floattant pos2_max 0 Maximal value.
defbord_3 defbord nul -1 2-D edge (plane) in the 3-D space.
  attr dir chaine(into=["X","Y","Z"]) dir 0 Edge is perpendicular to this direction.
  attr eq chaine(into=["="]) eq 0 Equality sign.
  attr pos floattant pos 0 Position value.
  attr pos2_min floattant pos2_min 0 Minimal value.
  attr inf1 chaine(into=["<="]) inf1 0 Less than or equal to sign.
  attr dir2 chaine(into=["X","Y"]) dir2 0 Edge is parallel to this direction.
  attr inf2 chaine(into=["<="]) inf2 0 Less than or equal to sign.
  attr pos2_max floattant pos2_max 0 Maximal value.
  attr pos3_min floattant pos3_min 0 Minimal value.
  attr inf3 chaine(into=["<="]) inf3 0 Less than or equal to sign.
  attr dir3 chaine(into=["Y","Z"]) dir3 0 Edge is parallel to this direction.
  attr inf4 chaine(into=["<="]) inf4 0 Less than or equal to sign.
  attr pos3_max floattant pos3_max 0 Maximal value.
internes bord_base internes 0 To indicate that the block has a set of internal faces (these faces will be duplicated automatically by the program and will be processed in a manner similar to edge faces). NL2 Two boundaries with the same boundary conditions may have the same name (whether or not they belong to the same block). NL2 The keyword Internes (Internal) must be used to execute a calculation with plates, followed by the equation of the surface area covered by the plates.
  attr nom chaine nom 0 Name of block side.
  attr defbord defbord defbord 0 Definition of block side.
epsilon mailler_base epsilon 0 Two points will be confused if the distance between them is less than eps. By default, eps is set to 1e-12. The keyword Epsilon allows an alternative value to be assigned to eps.
  attr eps floattant eps 0 New value of precision.
domain mailler_base domain 0 Class to reuse a domain.
  attr domain_name ref_domaine domain_name 0 Name of domain.
list_bloc_mailler listobj list_bloc_mailler 1 mailler_base 1 List of block mesh.
write_file interprete ecrire_fichier -1 Keyword to write the object of name name_obj to a file filename. Since the v1.6.3, the default format is now binary format file.
  attr name_obj chaine name_obj 0 Name of the object to be written.
  attr filename chaine filename 0 Name of the file.
write interprete ecrire -1 Keyword to write the object of name name_obj to a standard outlet.
  attr name_obj chaine name_obj 0 Name of the object to be written.
fin interprete fin -1 Keyword which must complete the data file. The execution of the data file stops when reaching this keyword.
class_generic objet_u class_generic -1 not_set
dt_start class_generic dt_start 0 not_set
dt_calc_dt_calc dt_start dt_calc 0 The time step at first iteration is calculated in agreement with CFL condition.
dt_calc_dt_min dt_start dt_min 0 The first iteration is based on dt_min.
dt_calc_dt_fixe dt_start dt_fixe 0 The first time step is fixed by the user (recommended when resuming calculation with Crank Nicholson temporal scheme to ensure continuity).
  attr value floattant value 0 first time step.
euler_scheme schema_temps_base schema_euler_explicite -1 This is the Euler explicit scheme.
solveur_sys_base class_generic solveur_sys_base -1 Basic class to solve the linear system.
un_pb objet_lecture nul 0 pour les groupes
  attr mot ref_Pb_base mot 0 the string
list_un_pb listobj nul 1 un_pb 1 pour les groupes
list_list_nom listobj nul 1 list_un_pb 1 pour les groupes
raffiner_isotrope interprete raffiner_isotrope -1 For VDF and VEF discretizations, allows to cut triangles/quadrangles or tetrahedral/hexaedras elements respectively in 4 or 8 new ones by defining new summits located at the middle of edges (and center of faces and elements for quadrangles and hexaedra). Such a cut preserves the shape of original elements (isotropic). For 2D elements: \includetabfig{{raffinerisotri.pdf}}{{4}}{{raffinerisorect.pdf}}{{4}} For 3D elements: \includetabfig{{raffinerisotetra.jpeg}}{{6}}{{raffinerisohexa.jpeg}}{{5}}.
  attr domain_name ref_domaine domain_name 0 Name of domain.
triangulate interprete trianguler -1 To achieve a triangular mesh from a mesh comprising rectangles (2 triangles per rectangle). Should be used in VEF discretization. Principle: NL2 \includepng{{trianguler.pdf}}{{10}}
  attr domain_name ref_domaine domain_name 0 Name of domain.
bloc_lecture_poro objet_lecture nul 1 Surface and volume porosity values.
  attr volumique floattant volumique 0 Volume porosity value.
  attr surfacique list surfacique 0 Surface porosity values (in X, Y, Z directions).
bloc_lec_champ_init_canal_sinal objet_lecture nul 1 Parameters for the class champ_init_canal_sinal. NL2 in 2D: NL2 U=ucent*y(2h-y)/h/h NL2 V=ampli_bruit*rand+ampli_sin*sin(omega*x) NL2 rand: unpredictable value between -1 and 1. NL2 in 3D: NL2 U=ucent*y(2h-y)/h/h NL2 V=ampli_bruit*rand1+ampli_sin*sin(omega*x) NL2 W=ampli_bruit*rand2 NL2 rand1 and rand2: unpredictables values between -1 and 1.
  attr ucent floattant ucent 0 Velocity value at the center of the channel.
  attr h floattant h 0 Half hength of the channel.
  attr ampli_bruit floattant ampli_bruit 0 Amplitude for the disturbance.
  attr ampli_sin floattant ampli_sin 1 Amplitude for the sinusoidal disturbance (by default equals to ucent/10).
  attr omega floattant omega 0 Value of pulsation for the of the sinusoidal disturbance.
  attr dir_flow entier(into=[0,1,2]) dir_flow 1 Flow direction for the initialization of the flow in a channel. NL2 - if dir_flow=0, the flow direction is X NL2 - if dir_flow=1, the flow direction is Y NL2 - if dir_flow=2, the flow direction is Z NL2 Default value for dir_flow is 0
  attr dir_wall entier(into=[0,1,2]) dir_wall 1 Wall direction for the initialization of the flow in a channel. NL2 - if dir_wall=0, the normal to the wall is in X direction NL2 - if dir_wall=1, the normal to the wall is in Y direction NL2 - if dir_wall=2, the normal to the wall is in Z direction NL2 Default value for dir_flow is 1
  attr min_dir_flow floattant min_dir_flow 1 Value of the minimum coordinate in the flow direction for the initialization of the flow in a channel. Default value for dir_flow is 0.
  attr min_dir_wall floattant min_dir_wall 1 Value of the minimum coordinate in the wall direction for the initialization of the flow in a channel. Default value for dir_flow is 0.
acceleration source_base acceleration 1 Momentum source term to take in account the forces due to rotation or translation of a non Galilean referential R\' (centre 0\') into the Galilean referential R (centre 0).
  attr vitesse field_base vitesse 1 Keyword for the velocity of the referential R\' into the R referential (dOO\'/dt term [m.s-1]). The velocity is mandatory when you want to print the total cinetic energy into the non-mobile Galilean referential R (see Ec_dans_repere_fixe keyword).
  attr acceleration field_base acceleration 1 Keyword for the acceleration of the referential R\' into the R referential (d2OO\'/dt2 term [m.s-2]). field_base is a time dependant field (eg: Champ_Fonc_t).
  attr omega field_base omega 1 Keyword for a rotation of the referential R\' into the R referential [rad.s-1]. field_base is a 3D time dependant field specified for example by a Champ_Fonc_t keyword. The time_field field should have 3 components even in 2D (In 2D: 0 0 omega).
  attr domegadt field_base domegadt 1 Keyword to define the time derivative of the previous rotation [rad.s-2]. Should be zero if the rotation is constant. The time_field field should have 3 components even in 2D (In 2D: 0 0 domegadt).
  attr centre_rotation field_base centre_rotation 1 Keyword to specify the centre of rotation (expressed in R\' coordinates) of R\' into R (if the domain rotates with the R\' referential, the centre of rotation is 0\'=(0,0,0)). The time_field should have 2 or 3 components according the dimension 2 or 3.
  attr option chaine(into=["terme_complet","coriolis_seul","entrainement_seul"]) option 1 Keyword to specify the kind of calculation: terme_complet (default option) will calculate both the Coriolis and centrifugal forces, coriolis_seul will calculate the first one only, entrainement_seul will calculate the second one only.
coriolis source_base coriolis 0 Keyword for a Coriolis term in hydraulic equation. Warning: Only available in VDF.
  attr omega chaine omega 0 Value of omega.
fonction_champ_reprise objet_lecture nul 0 not_set
  attr mot chaine(into=["fonction"]) mot 0 not_set
  attr fonction listchaine fonction 0 n f1(val) f2(val) ... fn(val)] time
source_qdm source_base source_qdm 0 Momentum source term in the Navier-Stokes equations.
  attr ch field_base champ 0 Field type.
perte_charge_singuliere source_base perte_charge_singuliere 1 Source term that is used to model a pressure loss over a surface area (transition through a grid, sudden enlargement) defined by the faces of elements located on the intersection of a subzone named subzone_name and a X,Y, or Z plane located at X,Y or Z = location.
  attr dir chaine(into=["kx","ky","kz","K"]) dir 0 KX, KY or KZ designate directional pressure loss coefficients for respectively X, Y or Z direction. Or in the case where you chose a target flow rate with regul. Use K for isotropic pressure loss coefficient
  attr coeff floattant coeff 1 Value (float) of friction coefficient (KX, KY, KZ).
  attr regul bloc_lecture regul 1 option to have adjustable K with flowrate target  NL2 { K0 valeur_initiale_de_k deb debit_cible eps intervalle_variation_mutiplicatif}.
  attr surface bloc_lecture surface 0 Three syntaxes are possible for the surface definition block: NL2 For VDF and VEF: { X|Y|Z = location subzone_name } NL2 Only for VEF: { Surface surface_name }. NL2 For polymac { Surface surface_name Orientation champ_uniforme }
perte_charge_directionnelle source_base perte_charge_directionnelle 1 Directional pressure loss.
  attr lambda chaine lambda_u 0 Function for loss coefficient which may be Reynolds dependant (Ex: 64/Re).
  attr diam_hydr champ_don_base diam_hydr 0 Hydraulic diameter value.
  attr direction champ_don_base direction 0 Field which indicates the direction of the pressure loss.
  attr sous_zone chaine sous_zone 1 Optional sub-area where pressure loss applies.
perte_charge_isotrope source_base perte_charge_isotrope 1 Isotropic pressure loss.
  attr lambda chaine lambda_u 0 Function for loss coefficient which may be Reynolds dependant (Ex: 64/Re).
  attr diam_hydr champ_don_base diam_hydr 0 Hydraulic diameter value.
  attr sous_zone chaine sous_zone 1 Optional sub-area where pressure loss applies.
perte_charge_anisotrope source_base perte_charge_anisotrope 1 Anisotropic pressure loss.
  attr lambda chaine lambda_u 0 Function for loss coefficient which may be Reynolds dependant (Ex: 64/Re).
  attr lambda_ortho chaine lambda_ortho 0 Function for loss coefficient in transverse direction which may be Reynolds dependant (Ex: 64/Re).
  attr diam_hydr champ_don_base diam_hydr 0 Hydraulic diameter value.
  attr direction champ_don_base direction 0 Field which indicates the direction of the pressure loss.
  attr sous_zone chaine sous_zone 1 Optional sub-area where pressure loss applies.
perte_charge_circulaire source_base perte_charge_circulaire 1 New pressure loss.
  attr lambda chaine lambda_u 0 Function f(Re_tot, Re_long, t, x, y, z) for loss coefficient in the longitudinal direction
  attr lambda_ortho chaine lambda_ortho 0 function: Function f(Re_tot, Re_ortho, t, x, y, z) for loss coefficient in transverse direction
  attr diam_hydr champ_don_base diam_hydr 0 Hydraulic diameter value.
  attr diam_hydr_ortho champ_don_base diam_hydr_ortho 0 Transverse hydraulic diameter value.
  attr direction champ_don_base direction 0 Field which indicates the direction of the pressure loss.
  attr sous_zone chaine sous_zone 1 Optional sub-area where pressure loss applies.
darcy source_base darcy 0 Class for calculation in a porous media with source term of Darcy -nu/K*V. This keyword must be used with a permeability model. For the moment there are two models : permeability constant or Ergun\'s law. Darcy source term is available for quasi compressible calculation. A new keyword is aded for porosity (porosite).
  attr bloc bloc_lecture bloc 0 Description.
forchheimer source_base forchheimer 0 Class to add the source term of Forchheimer -Cf/sqrt(K)*V2 in the Navier-Stokes equations. We must precise a permeability model : constant or Ergun\'s law. Moreover we can give the constant Cf : by default its value is 1. Forchheimer source term is available also for quasi compressible calculation. A new keyword is aded for porosity (porosite).
  attr bloc bloc_lecture bloc 0 Description.
debut_bloc interprete { 0 Block\'s beginning.
fin_bloc interprete } 0 Block\'s end.
export interprete export 0 Class to make the object have a global range, if not its range will apply to the block only (the associated object will be destroyed on exiting the block).
champ_input_base field_base champ_input_base 1 not_set
  attr nb_comp entier nb_comp 0 not_set
  attr nom chaine nom 0 not_set
  attr initial_value list initial_value 1 not_set
  attr probleme chaine probleme 0 not_set
  attr sous_zone ref_sous_zone sous_zone 1 not_set
listdeuxmots_sacc listobj nul 0 deuxmots 0 List of groups of two words (without curly brackets).
partitionneur_deriv objet_u partitionneur_deriv -1 not_set
  attr nb_parts entier nb_parts 1 The number of non empty parts that must be generated (generally equal to the number of processors in the parallel run).
partitionneur_sous_zones partitionneur_deriv sous_zones -1 This algorithm will create one part for each specified subzone. All elements contained in the first subzone are put in the first part, all remaining elements contained in the second subzone in the second part, etc... NL2 If all elements of the domain are contained in the specified subzones, then N parts are created, otherwise, a supplemental part is created with the remaining elements. NL2 If no subzone is specified, all subzones defined in the domain are used to split the mesh.
  attr sous_zones listchaine sous_zones 0 N SUBZONE_NAME_1 SUBZONE_NAME_2 ...
troisf objet_lecture nul 0 Auxiliary class to extrude.
  attr lx floattant lx 0 X direction of the extrude operation.
  attr ly floattant ly 0 Y direction of the extrude operation.
  attr lz floattant lz 0 Z direction of the extrude operation.
spec_pdcr_base objet_lecture spec_pdcr_base 0 Class to read the source term modelling the presence of a bundle of tubes in a flow. Cf=A Re-B.
  attr ch_a chaine(into=["a","cf"]) ch_a 0 Keyword to be used to set law coefficient values for the coefficient of regular pressure losses.
  attr a floattant a 0 Value of a law coefficient for regular pressure losses.
  attr ch_b chaine(into=["b"]) ch_b 1 Keyword to be used to set law coefficient values for regular pressure losses.
  attr b floattant b 1 Value of a law coefficient for regular pressure losses.
longitudinale spec_pdcr_base longitudinale 0 Class to define the pressure loss in the direction of the tube bundle.
  attr dir chaine(into=["x","y","z"]) dir 0 Direction.
  attr dd floattant dd 0 Tube bundle hydraulic diameter value. This value is expressed in m.
transversale spec_pdcr_base transversale 0 Class to define the pressure loss in the direction perpendicular to the tube bundle.
  attr dir chaine(into=["x","y","z"]) dir 0 Direction.
  attr dd floattant dd 0 Value of the tube bundle step.
  attr chaine_d chaine(into=["d"]) chaine_d 0 Keyword to be used to set the value of the tube external diameter.
  attr d floattant d 0 Value of the tube external diameter.
perte_charge_reguliere source_base perte_charge_reguliere 0 Source term modelling the presence of a bundle of tubes in a flow.
  attr spec spec_pdcr_base spec 0 Description of longitudinale or transversale type.
  attr zone_name chaine name_of_zone 0 Name of the sub-area occupied by the tube bundle. A Sous_Zone (Sub-area) type object called zone_name should have been previously created.
methode_transport_deriv objet_lecture methode_transport_deriv 0 Basic class for method of transport of interface.
methode_loi_horaire methode_transport_deriv loi_horaire -1 not_set
  attr nom_loi ref_loi_horaire nom_loi 0 not_set
problem_read_generic Pb_base problem_read_generic -1 The probleme_read_generic differs rom the rest of the TRUST code : The problem does not state the number of equations that are enclosed in the problem. As the list of equations to be solved in the generic read problem is declared in the data file and not pre-defined in the structure of the problem, each equation has to be distinctively associated with the problem with the Associate keyword.
  ref eqn1 eqn_base
  ref eqn2 eqn_base
  ref eqn3 eqn_base
  ref eqn4 eqn_base
  ref eqn5 eqn_base
  ref eqn6 eqn_base
  ref eqn7 eqn_base
  ref eqn8 eqn_base
  ref eqn9 eqn_base
  ref eqn10 eqn_base
temperature traitement_particulier_base temperature -1 not_set
  attr bord chaine bord 0 not_set
  attr direction entier direction 0 not_set
canal traitement_particulier_base canal -1 Keyword for statistics on a periodic plane channel.
  attr dt_impr_moy_spat floattant dt_impr_moy_spat 1 Period to print the spatial average (default value is 1e6).
  attr dt_impr_moy_temp floattant dt_impr_moy_temp 1 Period to print the temporal average (default value is 1e6).
  attr debut_stat floattant debut_stat 1 Time to start the temporal averaging (default value is 1e6).
  attr fin_stat floattant fin_stat 1 Time to end the temporal averaging (default value is 1e6).
  attr pulsation_w floattant pulsation_w 1 Pulsation for phase averaging (in case of pulsating forcing term) (no default value).
  attr nb_points_par_phase entier nb_points_par_phase 1 Number of samples to represent phase average all along a period (no default value).
  attr reprise chaine reprise 1 val_moy_temp_xxxxxx.sauv : Keyword to resume a calculation with previous averaged quantities. NL2 Note that for thermal and turbulent problems, averages on temperature and turbulent viscosity are automatically calculated. To resume a calculation with phase averaging, val_moy_temp_xxxxxx.sauv_phase file is required on the directory where the job is submitted (this last file will be then automatically loaded by TRUST).
ec traitement_particulier_base ec -1 Keyword to print total kinetic energy into the referential linked to the domain (keyword Ec). In the case where the domain is moving into a Galilean referential, the keyword Ec_dans_repere_fixe will print total kinetic energy in the Galilean referential whereas Ec will print the value calculated into the moving referential linked to the domain
  attr Ec rien Ec 1 not_set
  attr Ec_dans_repere_fixe rien Ec_dans_repere_fixe 1 not_set
  attr periode floattant periode 1 periode is the keyword to set the period of printing into the file datafile_Ec.son or datafile_Ec_dans_repere_fixe.son.
thi traitement_particulier_base thi -1 Keyword for a THI (Homogeneous Isotropic Turbulence) calculation.
  attr init_Ec entier init_Ec 0 Keyword to renormalize initial velocity so that kinetic energy equals to the value given by keyword val_Ec.
  attr val_Ec floattant val_Ec 1 Keyword to impose a value for kinetic energy by velocity renormalizated if init_Ec value is 1.
  attr facon_init entier(into=["0","1"]) facon_init 1 Keyword to specify how kinetic energy is computed (0 or 1).
  attr calc_spectre entier(into=["0","1"]) calc_spectre 1 Calculate or not the spectrum of kinetic energy. NL2 Files called Sorties_THI are written with inside four columns : NL2 time:t global_kinetic_energy:Ec enstrophy:D skewness:S NL2 If calc_spectre is set to 1, a file Sorties_THI2_2 is written with three columns : NL2 time:t kinetic_energy_at_kc=32 enstrophy_at_kc=32 NL2 If calc_spectre is set to 1, a file spectre_xxxxx is written with two columns at each time xxxxx : NL2 frequency:k energy:E(k).
  attr periode_calc_spectre floattant periode_calc_spectre 1 Period for calculating spectrum of kinetic energy
  attr spectre_3D entier(into=["0","1"]) Spectre_3D 1 Calculate or not the 3D spectrum
  attr spectre_1D entier(into=["0","1"]) Spectre_1D 1 Calculate or not the 1D spectrum
  attr conservation_Ec rien conservation_Ec 1 If set to 1, velocity field will be changed as to have a constant kinetic energy (default 0)
  attr longueur_boite floattant longueur_boite 1 Length of the calculation domain
chmoy_faceperio traitement_particulier_base chmoy_faceperio 0 non documente
  attr bloc bloc_lecture bloc 0 not_set
convection_amont convection_deriv amont 0 Keyword for upwind scheme for VDF or VEF discretizations. In VEF discretization equivalent to generic amont for TRUST version 1.5 or later. The previous upwind scheme can be used with the obsolete in future amont_old keyword.
convection_amont_old convection_deriv amont_old 0 Only for VEF discretization, obsolete keyword, see amont.
convection_centre convection_deriv centre 0 For VDF and VEF discretizations.
convection_centre4 convection_deriv centre4 0 For VDF and VEF discretizations.
convection_centre_old convection_deriv centre_old 0 Only for VEF discretization.
convection_di_l2 convection_deriv di_l2 0 Only for VEF discretization.
bloc_ef objet_lecture nul 0 not_set
  attr mot1 chaine(into=["transportant_bar","transporte_bar","filtrer_resu","antisym"]) mot1 0 not_set
  attr val1 entier(into=[0,1]) val1 0 not_set
  attr mot2 chaine(into=["transportant_bar","transporte_bar","filtrer_resu","antisym"]) mot2 0 not_set
  attr val2 entier(into=[0,1]) val2 0 not_set
  attr mot3 chaine(into=["transportant_bar","transporte_bar","filtrer_resu","antisym"]) mot3 0 not_set
  attr val3 entier(into=[0,1]) val3 0 not_set
  attr mot4 chaine(into=["transportant_bar","transporte_bar","filtrer_resu","antisym"]) mot4 0 not_set
  attr val4 entier(into=[0,1]) val4 0 not_set
convection_ef convection_deriv ef 0 For VEF calculations, a centred convective scheme based on Finite Elements formulation can be called through the following data:NL2 NL2 Convection { EF transportant_bar val transporte_bar val antisym val filtrer_resu val }NL2 NL2 This scheme is 2nd order accuracy (and get better the property of kinetic energy conservation). Due to possible problems of instabilities phenomena, this scheme has to be coupled with stabilisation process (see Source_Qdm_lambdaup).These two last data are equivalent from a theoretical point of view in variationnal writing to : div(( u. grad ub , vb) - (u. grad vb, ub)), where vb corresponds to the filtered reference test functions.NL2 NL2 Remark:NL2 This class requires to define a filtering operator : see solveur_bar
  attr mot1 chaine(into=["defaut_bar"]) mot1 1 equivalent to transportant_bar 0 transporte_bar 1 filtrer_resu 1 antisym 1
  attr bloc_ef bloc_ef bloc_ef 1 not_set
convection_muscl3 convection_deriv muscl3 1 Keyword for a scheme using a ponderation between muscl and center schemes in VEF.
  attr alpha floattant alpha 1 To weight the scheme centering with the factor double (between 0 (full centered) and 1 (muscl), by default 1).
sous_zone_valeur objet_lecture nul 0 Two words.
  attr sous_zone ref_sous_zone sous_zone 0 sous zone
  attr valeur floattant valeur 0 value
listsous_zone_valeur listobj nul 0 sous_zone_valeur 0 List of groups of two words.
convection_ef_stab convection_deriv ef_stab 1 Keyword for a VEF convective scheme.
  attr alpha floattant alpha 1 To weight the scheme centering with the factor double (between 0 (full centered) and 1 (mix between upwind and centered), by default 1). For scalar equation, it is adviced to use alpha=1 and for the momentum equation, alpha=0.2 is adviced.
  attr test entier test 1 Developer option to compare old and new version of EF_stab
  attr tdivu rien tdivu 1 To have the convective operator calculated as div(TU)-TdivU(=UgradT).
  attr old rien old 1 To use old version of EF_stab scheme (default no).
  attr volumes_etendus rien volumes_etendus 1 Option for the scheme to use the extended volumes (default, yes).
  attr volumes_non_etendus rien volumes_non_etendus 1 Option for the scheme to not use the extended volumes (default, no).
  attr amont_sous_zone ref_sous_zone amont_sous_zone 1 Option to degenerate EF_stab scheme into Amont (upwind) scheme in the sub zone of name sz_name. The sub zone may be located arbitrarily in the domain but the more often this option will be activated in a zone where EF_stab scheme generates instabilities as for free outlet for example.
  attr alpha_sous_zone listsous_zone_valeur alpha_sous_zone 1 Option to change locally the alpha value on N sub-zones named sub_zone_name_I. Generally, it is used to prevent from a local divergence by increasing locally the alpha parameter.
convection_generic convection_deriv generic 0 Keyword for generic calling of upwind and muscl convective scheme in VEF discretization. For muscl scheme, limiters and order for fluxes calculations have to be specified. The available limiters are : minmod - vanleer -vanalbada - chakravarthy - superbee, and the order of accuracy is 1 or 2. Note that chakravarthy is a non-symmetric limiter and superbee may engender results out of physical limits. By consequence, these two limiters are not recommended. NL2 Examples: NL2 convection { generic amont }NL2 convection { generic muscl minmod 1 }NL2 convection { generic muscl vanleer 2 }NL2 NL2 In case of results out of physical limits with muscl scheme (due for instance to strong non-conformal velocity flow field), user can redefine in data file a lower order and a smoother limiter, as : convection { generic muscl minmod 1 }
  attr type chaine(into=["amont","muscl","centre"]) type 0 type of scheme
  attr limiteur chaine(into=["minmod","vanleer","vanalbada","chakravarthy","superbee"]) limiteur 1 type of limiter
  attr ordre entier(into=[1,2,3]) ordre 1 order of accuracy
  attr alpha floattant alpha 1 alpha
convection_kquick convection_deriv kquick 0 Only for VEF discretization.
convection_muscl convection_deriv muscl 0 Keyword for muscl scheme in VEF discretization equivalent to generic muscl vanleer 2 for the 1.5 version or later. The previous muscl scheme can be used with the obsolete in future muscl_old keyword.
convection_muscl_old convection_deriv muscl_old 0 Only for VEF discretization.
convection_muscl_new convection_deriv muscl_new 0 Only for VEF discretization.
convection_negligeable convection_deriv negligeable 0 For VDF and VEF discretizations. Suppresses the convection operator.
convection_quick convection_deriv quick 0 Only for VDF discretization.
diffusion_negligeable diffusion_deriv negligeable 0 the diffusivity will not taken in count
bloc_diffusion_standard objet_lecture nul 0 grad_Ubar 1 makes the gradient calculated through the filtered values of velocity (P1-conform).NL2 nu 1 (respectively nut 1) takes the molecular viscosity (eddy viscosity) into account in the velocity gradient part of the diffusion expression. NL2 nu_transp 1 (respectively nut_transp 1) takes the molecular viscosity (eddy viscosity) into account according in the TRANSPOSED velocity gradient part of the diffusion expression.NL2 filtrer_resu 1 allows to filter the resulting diffusive fluxes contribution.
  attr mot1 chaine(into=["grad_Ubar","nu","nut","nu_transp","nut_transp","filtrer_resu"]) mot1 0 not_set
  attr val1 entier(into=[0,1]) val1 0 not_set
  attr mot2 chaine(into=["grad_Ubar","nu","nut","nu_transp","nut_transp","filtrer_resu"]) mot2 0 not_set
  attr val2 entier(into=[0,1]) val2 0 not_set
  attr mot3 chaine(into=["grad_Ubar","nu","nut","nu_transp","nut_transp","filtrer_resu"]) mot3 0 not_set
  attr val3 entier(into=[0,1]) val3 0 not_set
  attr mot4 chaine(into=["grad_Ubar","nu","nut","nu_transp","nut_transp","filtrer_resu"]) mot4 0 not_set
  attr val4 entier(into=[0,1]) val4 0 not_set
  attr mot5 chaine(into=["grad_Ubar","nu","nut","nu_transp","nut_transp","filtrer_resu"]) mot5 0 not_set
  attr val5 entier(into=[0,1]) val5 0 not_set
  attr mot6 chaine(into=["grad_Ubar","nu","nut","nu_transp","nut_transp","filtrer_resu"]) mot6 0 not_set
  attr val6 entier(into=[0,1]) val6 0 not_set
difusion_p1b diffusion_deriv p1b 0 not_set
diffusion_p1ncp1b diffusion_deriv p1ncp1b 1 not_set
diffusion_stab diffusion_deriv stab 1 keyword allowing consistent and stable calculations even in case of obtuse angle meshes.
  attr standard entier standard 1 to recover the same results as calculations made by standard laminar diffusion operator. However, no stabilization technique is used and calculations may be unstable when working with obtuse angle meshes (by default 0)
  attr info entier info 1 developer option to get the stabilizing ratio (by default 0)
  attr new_jacobian entier new_jacobian 1 when implicit time schemes are used, this option defines a new jacobian that may be more suitable to get stationary solutions (by default 0)
  attr nu entier nu 1 (respectively nut 1) takes the molecular viscosity (resp. eddy viscosity) into account in the velocity gradient part of the diffusion expression (by default nu=1 and nut=1)
  attr nut entier nut 1 not_set
  attr nu_transp entier nu_transp 1 (respectively nut_transp 1) takes the molecular viscosity (resp. eddy viscosity) into account in the transposed velocity gradient part of the diffusion expression (by default nu_transp=0 and nut_transp=1)
  attr nut_transp entier nut_transp 1 not_set
diffusion_standard diffusion_deriv standard 0 A new keyword, intended for LES calculations, has been developed to optimise and parameterise each term of the diffusion operator. Remark:NL2 NL2 1. This class requires to define a filtering operator : see solveur_barNL2 2. The former (original) version: diffusion { } -which omitted some of the term of the diffusion operator- can be recovered by using the following parameters in the new class :NL2 diffusion { standard grad_Ubar 0 nu 1 nut 1 nu_transp 0 nut_transp 1 filtrer_resu 0}.
  attr mot1 chaine(into=["defaut_bar"]) mot1 1 equivalent to grad_Ubar 1 nu 1 nut 1 nu_transp 1 nut_transp 1 filtrer_resu 1
  attr bloc_diffusion_standard bloc_diffusion_standard bloc_diffusion_standard 1 not_set
reactions listobj nul 1 reaction 1 list of reactions
diffusion_option diffusion_deriv option 0 not_set
  attr bloc_lecture bloc_lecture bloc_lecture 0 not_set

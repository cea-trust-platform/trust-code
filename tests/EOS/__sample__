#include "EOS/API/EOS.hxx"
#include "EOS/API/EOS_Fields.hxx"
#include "EOS/API/EOS_Error_Field.hxx"
#include "EOS/API/EOS_Std_Error_Handler.hxx"
#include "span.hpp"
#include "vector"
#include "map"
// #include "TPPI_tools.h" // avoid kokkos includes ...

using MRange = std::map<std::string, std::array<double, 2>>;
using MSpanD = std::map<std::string, tcb::span<double>>;
using PairCharArray = std::array<const char*, 2>;
using ArrayD = std::array<double,1>;
using VectorD = std::vector<double>;
using SpanD = tcb::span<double>;

// convert Temp span to kelvin ...
inline SpanD Tk_(const SpanD& T)
{
  for (auto& itr : T) itr += 273.15;
  return T;
}

// convert Temp span to Celsius ...
inline SpanD Tc_(const SpanD& T)
{
  for (auto& itr : T) itr -= 273.15;
  return T;
}

// XXX : Elie Saikali : ATTENTION A L'ORDRE SINON RIEN VA MARCHER
enum class Loi_en_T
{
  RHO, RHO_DP, RHO_DT,
  H, H_DP, H_DT,
  CP, CP_DP, CP_DT,
  MU, MU_DP, MU_DT,
  LAMBDA, LAMBDA_DP, LAMBDA_DT,
  SIGMA, SIGMA_DP, SIGMA_DT,
  BETA /* pour l'incompressible si besoin */
};

static constexpr std::array<PairCharArray, 19> EOS_prop_en_T =
{
  {
    { "rho", "rho" }, { "drhodp", "d_rho_d_p_T" }, { "drhodT", "d_rho_d_T_p" },
    { "enthalpie", "h" }, { "dhdp", "d_h_d_p_T" }, { "dhdT", "d_h_d_T_p" },
    { "cp", "cp" }, { "dcpdp", "d_cp_d_p_T" }, { "dcpdT", "d_cp_d_T_p" },
    { "mu", "mu" }, { "dmudp", "d_mu_d_p_T" }, { "dmudT", "d_mu_d_T_p" },
    { "lambda", "lambda" }, { "dlambdadp", "d_lambda_d_p_T" }, { "dlambdadT", "d_lambda_d_T_p" },
    { "sigma", "sigma" }, { "dsigmadp", "d_sigma_d_p_T" }, { "dsigmadT", "d_sigma_d_T_p" },
    { "beta", "beta" }
  }
};

enum class Loi_en_h
{
  RHO, RHO_DP, RHO_DH,
  T, T_DP, T_DH,
  CP, CP_DP, CP_DH,
  MU, MU_DP, MU_DH,
  LAMBDA, LAMBDA_DP, LAMBDA_DH,
  SIGMA, SIGMA_DP, SIGMA_DH,
  BETA /* pour l'incompressible si besoin */
};

static constexpr std::array<PairCharArray, 19> EOS_prop_en_h =
{
  {
    { "rho", "rho" }, { "drhodp", "d_rho_d_p_h" }, { "drhodh", "d_rho_d_h_p" },
    { "temperature", "T" }, { "dTdp", "d_T_d_p_h" }, { "dTdh", "d_T_d_h_p" },
    { "cp", "cp" }, { "dcpdp", "d_cp_d_p_h" }, { "dcpdh", "d_cp_d_h_p" },
    { "mu", "mu" }, { "dmudp", "d_mu_d_p_h" }, { "dmudh", "d_mu_d_h_p" },
    { "lambda", "lambda" }, { "dlambdadp", "d_lambda_d_p_h" }, { "dlambdadh", "d_lambda_d_h_p" },
    { "sigma", "sigma" }, { "dsigmadp", "d_sigma_d_p_h" }, { "dsigmadh", "d_sigma_d_h_p" },
    { "beta", "beta" }
  }
};

enum class SAT
{
  T_SAT, T_SAT_DP,
  P_SAT, P_SAT_DT,
  HL_SAT, HL_SAT_DP,
  HV_SAT, HV_SAT_DP,
  RHOL_SAT, RHOL_SAT_DP,
  RHOV_SAT, RHOV_SAT_DP,
  CPL_SAT, CPL_SAT_DP,
  CPV_SAT, CPV_SAT_DP,
  SIGMA, SIGMA_DP, /* pour coco seulement */
  LV_SAT, LV_SAT_DP,
  LAMBDA, MU
};

static constexpr std::array<PairCharArray, 18> EOS_prop_sat =
{
  {
    { "tsat", "T_sat" }, { "dtsatdp", "d_T_sat_d_p" },
    { "psat", "P_sat" }, { "dpsatdt", "d_P_sat_d_T" },
    { "hlsat", "h_l_sat" }, { "dhlsatdp", "d_h_l_sat_d_p" },
    { "hvsat", "h_v_sat" }, { "dhvsatdp", "d_h_v_sat_d_p" },
    { "rholsat", "rho_l_sat" }, { "drholsatdp", "d_rho_l_sat_d_p" },
    { "rhovsat", "rho_v_sat" }, { "drhovsatdp", "d_rho_v_sat_d_p" },
    { "cplsat", "cp_l_sat" }, { "dcplsatdp", "d_cp_l_sat_d_p" },
    { "cpvsat", "cp_v_sat" }, {  "dcpvsatdp", "d_cp_v_sat_d_p" },
    { "sigma", "sigma" }, { "dsigmadp", "d_sigma_d_p_h" } /* on utilise h la */
  }
};

using MLoiSpanD_h = std::map<Loi_en_h, tcb::span<double>>;
using MLoiSpanD_T = std::map<Loi_en_T, tcb::span<double>>;
using MLoiSpanD = std::map<Loi_en_T, tcb::span<double>>;
using MSatSpanD = std::map<SAT, tcb::span<double>>;

using namespace NEPTUNE; 

int main(int argc, char const *argv[])
{
  EOS_Std_Error_Handler handler;
  handler.set_exit_on_error(EOS_Std_Error_Handler::disable_feature);
  handler.set_throw_on_error(EOS_Std_Error_Handler::disable_feature);
  handler.set_dump_on_error(EOS_Std_Error_Handler::disable_feature);
 // handler.set_dump_on_error(ok);
 // handler.set_dump_stream(cerr);

  EOS liquid("__MODEL__", "__FLUID__");
  liquid.set_error_handler(handler);

  EOS steam("__MODEL__", "__FLUID__");
  steam.set_error_handler(handler);

  int n = 2;

  VectorD p(n), h(n), rhol(n), drhol_dp(n), drhol_dhl(n),
      Cpl(n), dCpl_dp(n), dCpl_dhl(n),
      Tl(n), dTl_dp(n), dTl_dhl(n),
      mul(n), dmul_dp(n), dmul_dhl(n),
      lambdal(n), dlambdal_dp(n), dlambdal_dhl(n),
      sigma(n), dsigmap_dp(n);

  for (int i = 0; i < n; i++)
    {
      p[i] = 1.35e7;
      h[i] = 7.e5;
    }

  MLoiSpanD_h spans_liq = { { Loi_en_h::RHO, SpanD(rhol) }, { Loi_en_h::RHO_DP, SpanD(drhol_dp) }, { Loi_en_h::RHO_DH, SpanD(drhol_dhl) },
    { Loi_en_h::CP, SpanD(Cpl) }, { Loi_en_h::CP_DP, SpanD(dCpl_dp) }, { Loi_en_h::CP_DH, SpanD(dCpl_dhl) },
    { Loi_en_h::T, SpanD(Tl) }, { Loi_en_h::T_DP, SpanD(dTl_dp) }, { Loi_en_h::T_DH, SpanD(dTl_dhl) },
    { Loi_en_h::MU, SpanD(mul) }, {Loi_en_h::MU_DP, SpanD(dmul_dp) }, { Loi_en_h::MU_DH, SpanD(dmul_dhl) },
    { Loi_en_h::LAMBDA, SpanD(lambdal) }, { Loi_en_h::LAMBDA_DP, SpanD(dlambdal_dp) }, { Loi_en_h::LAMBDA_DH, SpanD(dlambdal_dhl) },
    { Loi_en_h::SIGMA, SpanD(sigma) }, { Loi_en_h::SIGMA_DP, SpanD(dsigmap_dp) } };

  const SpanD P = SpanD(p), H = SpanD(h);

  int i_out = 0, nb_out = (int) spans_liq.size();
  ArrOfInt tmp(n);
  EOS_Error_Field ferr(tmp);

  EOS_Field H_fld("Enthalpy", "h", (int) H.size(), (double*) H.begin()), P_fld("Pressure", "P", (int) P.size(), (double*) P.begin());

  // test liquid
  cout << "------------ TEST LIQUID -------------" << endl;
  for (auto &itr : spans_liq)
    {
      Loi_en_h prop_ = itr.first;
      SpanD span_ = itr.second;
      EOS_Field z_fld(EOS_prop_en_h[(int) prop_][0], EOS_prop_en_h[(int) prop_][1], (int) span_.size(), (double*) span_.begin());
      EOS_Error cr = liquid.compute(P_fld, H_fld, z_fld, ferr);
      cout << "Property of LIQUID ENUM " << (int) prop_ << endl;
      for (auto &itr2 : span_)
        cout << "Value :  " << itr2 << " : ERROR : " << (int) cr << endl;
      cout << "--------------------------------------" << endl;
    }

  // test steam
  cout << "------------ TEST STEAM -------------" << endl;
  for (int i = 0; i < n; i++)
    {
      p[i] = 15.e6;
      h[i] = 3.0e6;
    }

  for (auto &itr : spans_liq)
    {
      Loi_en_h prop_ = itr.first;
      SpanD span_ = itr.second;
      EOS_Field z_fld(EOS_prop_en_h[(int) prop_][0], EOS_prop_en_h[(int) prop_][1], (int) span_.size(), (double*) span_.begin());
      EOS_Error cr = steam.compute(P_fld, H_fld, z_fld, ferr);
      cout << "Property of STEAM ENUM " << (int) prop_ << endl;
      for (auto &itr2 : span_)
        cout << "Value :  " << itr2 << " : ERROR : " << (int) cr << endl;
      cout << "--------------------------------------" << endl;
    }

  // test saturation
  cout << "------------ TEST SAT -------------" << endl;
  VectorD Tsatp(n), dTsatp_dp(n), hlsatp(n), dhlsatp_dp(n), hvsatp(n), dhvsatp_dp(n),
      rholsatp(n), drholsatp_dp(n), rhovsatp(n), drhovsatp_dp(n),
      Cplsatp(n), dCplsatp_dp(n), Cpvsatp(n), dCpvsatp_dp(n);

  MSatSpanD spans_sat = { { SAT::T_SAT, SpanD(Tsatp) }, { SAT::T_SAT_DP, SpanD(dTsatp_dp) },
    { SAT::HL_SAT, SpanD(hlsatp) }, { SAT::HL_SAT_DP, SpanD(dhlsatp_dp) },
    { SAT::RHOL_SAT, SpanD(rholsatp) },{ SAT::RHOL_SAT_DP, SpanD(drholsatp_dp) },
    { SAT::CPL_SAT, SpanD(Cplsatp) }, { SAT::CPL_SAT_DP, SpanD(dCplsatp_dp) } };

  for (auto &itr : spans_sat)
    {
      SAT prop_ = itr.first;
      SpanD span_ = itr.second;
      EOS_Field z_fld(EOS_prop_sat[(int) prop_][0], EOS_prop_sat[(int) prop_][1], (int) span_.size(), (double*) span_.begin());
      EOS_Error cr = liquid.compute(P_fld, z_fld, ferr);
      cout << "Property of LIQUID SAT ENUM " << (int) prop_ << endl;
      for (auto &itr2 : span_)
        cout << "Value :  " << itr2 << " : ERROR : " << (int) cr << endl;
      cout << "--------------------------------------" << endl;
    }

  MSatSpanD spans_sat_v = { { SAT::T_SAT, SpanD(Tsatp) }, { SAT::T_SAT_DP, SpanD(dTsatp_dp) },
    { SAT::HV_SAT, SpanD(hvsatp) }, { SAT::HV_SAT_DP, SpanD(dhvsatp_dp) },
    { SAT::RHOV_SAT, SpanD(rhovsatp) }, { SAT::RHOV_SAT_DP, SpanD(drhovsatp_dp) },
    { SAT::CPV_SAT, SpanD(Cpvsatp) }, { SAT::CPV_SAT_DP, SpanD(dCpvsatp_dp) } };

  for (auto &itr : spans_sat_v)
    {
      SAT prop_ = itr.first;
      SpanD span_ = itr.second;
      EOS_Field z_fld(EOS_prop_sat[(int) prop_][0], EOS_prop_sat[(int) prop_][1], (int) span_.size(), (double*) span_.begin());
      EOS_Error cr = steam.compute(P_fld, z_fld, ferr);
      cout << "Property of STEAM SAT ENUM " << (int) prop_ << endl;
      for (auto &itr2 : span_)
        cout << "Value :  " << itr2 << " : ERROR : " << (int) cr << endl;
      cout << "--------------------------------------" << endl;
    }
    
  // test all
  cout << "------------ TEST ALL -------------" << endl;
  EOS_Fields flds_out(nb_out);

  for (auto &itr : spans_liq)
    {
      Loi_en_h prop_ = itr.first;
      SpanD span_ = itr.second;
      flds_out[i_out++] = EOS_Field(EOS_prop_en_h[(int) prop_][0], EOS_prop_en_h[(int) prop_][1], (int) span_.size(), (double*) span_.begin());
    }

  EOS_Error cr = liquid.compute(P_fld, H_fld, flds_out, ferr);

  for (auto &itr : spans_liq)
    {
      Loi_en_h prop_ = itr.first;
      SpanD span_ = itr.second;
      cout << "Property of ENUM " << (int) prop_ << endl;

      for (auto &itr2 : span_)
        cout << "Value :  " << itr2 << " : ERROR : " << (int) cr << endl;
      cout << "--------------------------------------" << endl;
    }

  return 0;
}

####################
# Recherche des Copy from device uniquement en optimise (car des copies en plus en debug pour assert_echange_espace_virtuel())
if [ "$TRUST_USE_GPU" = 1 ] && [ ${exec%mpi_opt} != $exec ]
then
   NP=1 && [ ${1#PAR} != $1 ] && NP=2
   TRUST_CLOCK_ON=1 trust $1 $NP 1>$1.out_err 2>&1 
   limit=`awk '/copyToDevice/ {print $3}' $1.data`
   # On compte uniquement les copies de tableaux (pas le buffer_base en // lors des echange espaces virtuels) entre les pas de temps 2 et 3...
   awk -v NP=$NP -v limit=$limit '/time step number 2/ {n=0} /Copy to device array/ && /Bytes/ && ($(NF-3)>80) {n+=1} /time step number 3/ {copy=n/NP;print copy"<="limit" copyToDevice per time step.";exit (copy<=limit)}' $1.out_err
   OK=$?
   [ $OK = 0 ] && echo "See `pwd`/$1.out_err" && exit -1
fi

#####################################
# Comparaison non regression des .out
#####################################
message()
{
   [ $1 != $2 ] && echo $ECHO_OPTS "Error ($1!=$2) when checking:\n $msg" && err=1
   #echo $msg
}
err=0
for file in `ls *.ref 2>/dev/null`
do
   msg="compare_sonde $file ${file%.ref}"
   eval $msg 1>verifie.log 2>&1
   message $? 0
done
exit $err 

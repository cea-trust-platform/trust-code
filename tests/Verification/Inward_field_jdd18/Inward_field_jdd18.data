# Test for Champ_front_normal fields #
# PARALLEL OK #
dimension 3
Pb_Hydraulique pb
Domaine dom
# BEGIN MESH #
Mailler dom
{
    Pave dom
    {
        Origine 0. 0. 0.
        Nombre_de_Noeuds 4 4 4
        Longueurs 1 1 1
    }
    {
        Bord Back      X = 0.0    0.00 <= Y <= 1.0     0.00 <= Z <= 1.0
        Bord Front     X = 1.0    0.00 <= Y <= 1.0     0.00 <= Z <= 1.0
        Bord Top       Y = 1.0    0.00 <= X <= 1.0     0.00 <= Z <= 1.0
        Bord Bottom    Y = 0.0    0.00 <= X <= 1.0     0.00 <= Z <= 1.0
        Bord Right     Z = 1.0    0.00 <= X <= 1.0     0.00 <= Y <= 1.0
        Bord Left      Z = 0.0    0.00 <= X <= 1.0     0.00 <= Y <= 1.0
    }
}
 tetraedriser_homogene_compact dom
/* rotation of angle theta : */
/* x ->  x cos(theta) + y sin (theta) */
/* y -> -x sin(theta) + y cos (theta) */
Transformer dom (x*cos(pi/4)+y*sin(pi/4)) (-x*sin(pi/4)+y*cos(pi/4)) z
Transformer dom (x*cos(pi/4)+z*sin(pi/4)) y (-x*sin(pi/4)+z*cos(pi/4))

# END MESH #

# BEGIN PARTITION
Partition dom
{
    Partition_tool metis { nb_parts 2 }
    zones_name DOM
    Larg_joint 2
}
End
END PARTITION #

# BEGIN SCATTER
Scatter DOM.Zones dom
END SCATTER #

 VEFPreP1B dis


Domaine boundary_Left

Scheme_euler_explicit sch
Read sch
{
    tinit 0.0
	nb_pas_dt_max 0
    seuil_statio -1
}

Associate pb dom
Associate pb sch
Discretize pb dis

Read pb
{

    fluide_incompressible {
        mu Champ_Uniforme 1 0.05
        rho Champ_Uniforme 1 1.2
    }


    Navier_Stokes_standard
    {
        solveur_pression petsc cholesky { }
        convection { negligeable }
        diffusion { }
        initial_conditions { vitesse champ_uniforme 3 0. 0. 0. }
        boundary_conditions
        {
            Back Frontiere_ouverte_vitesse_imposee Champ_front_fonc_xyz 3 (sqrt(1./2)) 0 (sqrt(1./2))
            Front Frontiere_ouverte_vitesse_imposee Champ_front_fonc_xyz 3 (sqrt(1./2)) 0 (sqrt(1./2))
            Left frontiere_ouverte_vitesse_imposee Boundary_field_inward { normal_value 1.0 }
            Right frontiere_ouverte_pression_imposee champ_front_uniforme  1 0.0
            Top Frontiere_ouverte_vitesse_imposee Champ_front_fonc_xyz 3 (sqrt(1./2)) 0 (sqrt(1./2))
            Bottom Frontiere_ouverte_vitesse_imposee Champ_front_fonc_xyz 3 (sqrt(1./2)) 0 (sqrt(1./2))
        }
    }

    Post_processing
    {
        format lml
        fields dt_post 0.0
        {
            pression elem
            vitesse
        }
    }
    Post_processings
    {
        volumic
        {
            format lml
            fields dt_post 0.0
            {
                pression elem
                # vitesse som #
                vitesse
            }
        }
        Champ_front_normal
        {
            format lml
            Domaine boundary_Left
            definition_champs
            {
                # velocity given by Trio on the boundary #
                velocity_trio Extraction { Domaine boundary_Left nom_frontiere Left methode trace source refChamp { Pb_champ pb vitesse } }
                # we know what is the vector shape on the boundary #
                true_vector  Transformation { methode vecteur expression 3 (sqrt(1./2)) 0 (sqrt(1./2)) localisation Faces }

                # all this stuff is to compute error between velocity_trio and true_vector #
                true_vector_interp Interpolation { localisation elem  sources_reference { true_vector } }
                velocity_X Transformation { methode composante numero 0 source refChamp { Pb_champ pb vitesse } localisation elem }
                velocity_Y Transformation { methode composante numero 1 source refChamp { Pb_champ pb vitesse } localisation elem }
                velocity_Z Transformation { methode composante numero 2 source refChamp { Pb_champ pb vitesse } localisation elem }
                true_velocity_X Transformation { methode composante numero 0 sources_reference { true_vector_interp } localisation elem }
                true_velocity_Y Transformation { methode composante numero 1 sources_reference { true_vector_interp } localisation elem }
                true_velocity_Z Transformation { methode composante numero 2 sources_reference { true_vector_interp } localisation elem }
                error_X transformation  { methode formule expression 1 true_velocity_X-velocity_X sources_reference { velocity_X , true_velocity_X } }
                error_Y transformation  { methode formule expression 1 true_velocity_Y-velocity_Y sources_reference { velocity_Y , true_velocity_Y } }
                error_Z transformation  { methode formule expression 1 true_velocity_Z-velocity_Z sources_reference { velocity_Z , true_velocity_Z } }

                error	transformation { methode vecteur expression 3 error_X error_Y error_Z sources_reference { error_X , error_Y , error_Z } }
                error_norm Transformation { methode norme source_reference error }

            }
            fields dt_post 0.0
            {
                velocity_trio
                true_vector_interp
                error
                error_norm
            }
        }
    }

}

Solve pb
End
